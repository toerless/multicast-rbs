<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.5.25 (Ruby 2.7.0) -->
<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>
<?rfc comments="yes"?>
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-eckert-bier-cgm2-rbs-01" category="exp" obsoletes="" updates="" submissionType="IETF" xml:lang="en" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.12.1 -->
  <front>
    <title abbrev="bier-cgm2-rbs">Carrier Grade Minimalist Multicast (CGM2) using Bit Index Explicit Replication (BIER) with Recursive BitString Structure (RBS) Addresses</title>
    <seriesInfo name="Internet-Draft" value="draft-eckert-bier-cgm2-rbs-01"/>
    <author initials="T." surname="Eckert" fullname="Toerless Eckert">
      <organization>Futurewei Technologies USA</organization>
      <address>
        <postal>
          <street>2220 Central Expressway</street>
          <city>Santa Clara</city>
          <code>CA 95050</code>
          <country>USA</country>
        </postal>
        <email>tte@cs.fau.de</email>
      </address>
    </author>
    <author initials="B." surname="Xu" fullname="Bing (Robin) Xu">
      <organization>Huawei Technologies (2012Lab)</organization>
      <address>
        <postal>
          <country>China</country>
        </postal>
        <email>bing.xu@huawei.com</email>
      </address>
    </author>
    <date year="2022" month="February" day="09"/>
    <workgroup>BIER</workgroup>
    <abstract>
      <t>This memo introduces the architecture of a multicast
architecture derived from BIER-TE, which this memo calls
Carrier Grade Minimalist Multicast (CGM2). It reduces
limitations and complexities of BIER-TE by replacing
the representation of the in-packet-header delivery tree
of packets through a "flat" BitString of adjacencies
with a hierarchical structure of BFR-local BitStrings 
called the Recursive BitString Structure (RBS) Address.</t>
      <t>Benefits of CGM2 with RBS addresses include smaller/fewer BIFT in BFR,
less complexity for the network architect and in the CGM2
controller (compared to a BIER-TE controller) and fewer packet
copies to reach a larger set of BFER.</t>
      <t>The additional cost of forwarding with RBS addresses is
a slightly more complex processing of the RBS address
in BFR compared to a flat BitString and the novel per-hop rewrite of
the RBS address as opposed to bit-reset rewrite in BIER/BIER-TE.</t>
      <t>CGM2 can support the traditional deployment model of BIER/BIER-TE
with the BIER/BIER-TE domain terminating at service provider
PE routers as BFIR/BFER, but it is also the intention of this document to
expand CGM2 domains all the way into hosts, and therefore
eliminating the need for an IP Multicast flow overlay,
further reducing the complexity of Multicast services using
CGM2. Note that this is not fully detailed in this version
of the document.</t>
      <t>This document does not specify an encapsulation for CGM2/RBS
addresses. It could use existing encapsulations such as <xref target="RFC8296" format="default"/>,
but also other encapsulations such as IPv6 extension headers.</t>
    </abstract>
  </front>
  <middle>
    <section anchor="overview" numbered="true" toc="default">
      <name>Overview</name>
      <section anchor="introduction" numbered="true" toc="default">
        <name>Introduction</name>
        <t>Carrier Grade Minimalist Multicast (CGM2) is an architecture
derived from the BIER-TE architecture <xref target="I-D.ietf-bier-te-arch" format="default"/> with the following
changes/improvements.</t>
        <t>CGM2 forwarding is based on the principles of BIER-TE forwarding:
It is based on an explicit, in-packet, "source routed" tree indicated
through bits for each adjacency that the packet has to
traverse. Like in BIER-TE, adjacencies can be L2 to a subnet
local neighbor in support of "native" deployment of CGM2
and/or L3, so-called "routed" adjacencies to support
incremental or partial deployment of CGM2 as needed.</t>
        <t>The address used to replicate packets in the network is
not a flat network wide BitString as in BIER-TE, but a
hierarchical structure of BitStrings called a Recursive BitString Structure (RBS)
Address. The significance of the BitPositions (BP)
in each BitString is only local to the BIFT of the router/BFR
that is processing this specific BitString.</t>
        <t>RBS addressing allows for a more compact representation of
a large set of adjacencies especially in the common case
of sparse set of receivers in large Service Provider Networks (SP).</t>
        <t>CGM2 thereby eliminates the challenges in BIER <xref target="RFC8279" format="default"/> and BIER-TE having to
send multiple copies of the same packet in large SP
networks and the complexities especially for BIER-TE
(but also BIER) to engineer multiple set identifier (SI) and/or
sub-domains (SD) BIER-TE topologies for limited size BitStrings
(e.g.: 265) to cover large network topologies.</t>
        <t>Like BIER-TE, CGM2 is intended to leverage a Controller
to minimize the control plane complexity in the network to
only a simple unicast routing underlay required only for
routed adjacencies.</t>
        <t>The controller centric architecture
provides most easily any type of required traffic optimization
for its multicast traffic due to their need to perform
often NP-complete calculations across the whole topology:
reservation of bandwidth to support CIR/PIR traffic buffer/latency
to support Deterministic Network (DetNet) traffic, cost optimized
Steiner trees, failure point disjoint trees for higher resilience including
DetNet deterministic services.</t>
        <t>CGM2 can be deployed as BIER/BIER-TE are specified today,
by encapsulating IP Multicast traffic at Provider Edge (PE)
routers, but it is also considered to be highly desirable
to extend CGM2 all the way into Multicast Sender/Receivers
to eliminate the overhead of an Overlay Control plane for
that (legacy) IP Multicast layer and the need to deal with
yet another IP multicast group addressing space. In this deployment option
Controller signaling extends directly (or indirectly via BFIR) into
senders.</t>
      </section>
      <section anchor="encapsulation-considerations" numbered="true" toc="default">
        <name>Encapsulation Considerations</name>
        <t>This document does not define a specific BIER-RBS encapsulation
nor does it preclude that multiple different encapsulations
may be beneficial to better support different use-cases
or operator/user technology preferences. Instead, it discusses
considerations for specific choices.</t>
        <t>BIER-RBS can easily re-use <xref target="RFC8296" format="default"/> encapsulation. The
RBS address is inserted into the <xref target="RFC8296" format="default"/>  BitString
field. The BFR forwarding plane needs to be configured 
(from Controller or control plane) that the BIFT-id(s) used
with RBS addresses are mapped to BIFT and forwarding
rules with RBS semantic.</t>
        <t>SI/SD fields of <xref target="RFC8296" format="default"/> may be used as in BIER-TE,
but given that CGM2 is designed (as described in the Overview
section) to simplify multicast services, a likely and
desirable configuration would be to only use a single 
BIFT in each BFR for RBS addresses, and mapping these to
a single SD and SI 0.</t>
        <t>IP Multicast <xref target="RFC1112" format="default"/> was defined as an extension
of IP <xref target="RFC791" format="default"/>, reusing the same network header, and
IPv6 multicast inherits the same approach. In comparison,
<xref target="RFC8296" format="default"/> defines BIER encapsulation as a
completely separate (from IP) layer 3 protocol,
and duplicates both IP and MPLS header elements into the
<xref target="RFC8296" format="default"/> header. This not only results in always
unused, duplicate header parameters (such as TC vs. DSCP), but
it also foregoes the option to use any non-considered
IPv6 extension headers with BIER and would require the
introduction of a whole new BIER specific socket API
into host operating systems if it was to be supported 
natively in hosts.</t>
        <t>Therefore an encapsulation of RBS addresses using an
IP and/or IPv6 extension header may be more desirable
in otherwise IP and/or IPv6 only deployments, for example
when CGM2 is extended into hosts, because it would allow
to support CGM2 via existing IP/IPv6 socket APIs as long as
they support extension headers, which the most important
host stacks do today.</t>
      </section>
    </section>
    <section anchor="cgm2rbs-architecture" numbered="true" toc="default">
      <name>CGM2/RBS Architecture</name>
      <t>This section describes the basic CGM2 architecture
via <xref target="FIG-ARCH" format="default"/> through its key differences over the BIER-TE
architecture.</t>
      <figure anchor="FIG-ARCH">
        <name>CGM2/RBS Architecture</name>
        <artwork name="" type="" align="left" alt=""><![CDATA[
                    Optional
   |<-IGMP/PIM->  multicast flow   <-PIM/IGMP->|
                     overlay

       CGM2      [CGM2  Controller] 
control plane   .  ^      ^     ^   
               .  /       |      \     BIFT configuration
     ..........  |        |       |    per-flow RBS setup
    .            |        |       |   
   .             v        v       v
Src (-> ... ) -> BFIR-----BFR-----BFER -> (... ->) Rcvr

                |<----------------->|
          CGM2 with RBS-address forwarding plane

 |<.............. <- CGM domain ---> ...............|

              |<--------------------->|
              Routing underlay (optional)
]]></artwork>
      </figure>
      <t>In the "traditional" option, when deployed with a domain
spanning from BFIR to BFER, the CGM2 architecture is very
much like the BIER-TE architecture, in which the BIER-TE forwarding rules
for (BitString,SI,SD) addresses are replaced by the
RBS address forwarding rules.</t>
      <t>The CGM2 Controller replaces the BIER-TE controller,
populating during network configuration the BIFT,
which are very much like BIER-TE BIFT, except that
they do not cover a network-wide BP address space, but
instead each BFR BIFT only needs as many BP in its BIFT
as it has link-local adjacencies, and in partial deployments
also additional L3 adjacencies to tunnel across non-CGM
capable routers.</t>
      <t>Per-flow operations in this "traditional" option is very much as in
BIER/BIER-TE, with the CGM2 controller determining the
RBS address (instead of the BIER-TE (BitString,SI,SD)) to be
imposed as part of the RBS address header (compared
to the BIER encapsulation <xref target="RFC8296" format="default"/>) on the BFIR.</t>
      <t>To eliminate the need for an IP Multicast flow overlays,
a CGM2 domain may extend all the way into Sender/Receiver
hosts. This is called "end-to-end" deployment model.
In that case, the sender host and CGM2 controller
collaborate to determine the desired receivers for
a packet as well as desired path policy/requirements,
the controller indicates to the sender of the packet
the necessary RBS address and address of the BFIR,
and the Sender imposes an appropriate RBS address header
together with a unicast encapsulation towards the BFIR.</t>
      <t>CGM2 is also intended so especially simplify
controller operations that also instantiate QoS policies
for multicast traffic flows, such as bandwidth and
latency reservations (e.g.: DetNet). As in BIER-TE, this
is orthogonal to the operations of the CGM2/RBS address
forwarding operations and will be covered in separate documents.</t>
    </section>
    <section anchor="cgm2rbs-forwarding-plane" numbered="true" toc="default">
      <name>CGM2/RBS forwarding plane</name>
      <t>Instead of a (flat) BitString as in BIER-TE
that use a network wide shared BP address space for
adjacencies across multiple BFR, CGM2 uses a structured
address built from so-called RecursiveUnits (RU) that contain BitStrings,
each of which is to be parsed by exactly one BFR along the delivery
tree of the packet.</t>
      <t>The equivalent to a BIER/BIER-TE BitString is
therefore called the RecursiveUnit BitString Structure (RBS) Address.
Forwarding for CGMP2 is therefore also called RBS forwarding.</t>
      <section anchor="rbs-bift" numbered="true" toc="default">
        <name>RBS BIFT</name>
        <t>RBS BIFT as shown in <xref target="FIG-RBS-BIFT" format="default"/> are, like BIER-TE BIFT, tables that are indexed by
BP, containing for each BP an adjacency.  The core difference over BIER-TE
BIFT is that the BP of the BIFT are all local to the BFR,
whereas in BIER-TE, the BP are shared across a BIER-TE domain,
each BFR can only use a subset the BP for its own adjacencies,
and only in some cases can BP be shared for adjacencies across
two (or more) BFR.  Because of this difference, most of the complexities
of BIER-TE BIFT are not required with BIER-RBS BIFT, see <xref target="complexities" format="default"/>.</t>
        <figure anchor="FIG-RBS-BIFT">
          <name>RBS BIFT</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
+--+---------+-------------+
|BP|Recursive|    Adjacency|
+--+---------+-------------+
| 1|        1|adjacenct BFR|
+--+---------+-------------+
| 2|        0|    punt/host|
+--+---------+-------------+
|     .....    ...         |
+--+---------+-------------+
| N|      ...|         ... |
+--+---------+-------------+
]]></artwork>
        </figure>
        <t>An RBS BIFT has a configured number of N addressable BP entries.
When a BFR receives a packet with an RBS address,
it expects that the BitString inside the RBS address that
needs to be parsed by the BFR (see <xref target="RBS-address" format="default"/> has a length that matches N
according to the encapsulation used for the RBS address.
Therefore, N MUST support configuration in increments of the supported size
of the BitString in the encapsulation of the RBS Address.
In the reference encoding (see <xref target="RBS-address" format="default"/>), the increment for N is 1 (bit).
If an encapsulation would call for a byte accurate encoding of the
BitString, N would have to be configurable in increments of 8.</t>
        <t>BFR MUST support a value of N larger than the maximum number of adjacencies
through which RBS forwarding/replication of a single packet is required,
such as the number of physical interfaces on BFR that are intended to be
deployed as a Provider Core (P) routers.</t>
        <t>RBS BIFT introduce a new "Recursive" flag for each BP. These
are used for adjacencies to other BFR to indicate that the
BFR processing the packet RBS address BitString also has to
expect for every BP with the recursive flag set another
RU inside the RBS address.</t>
      </section>
      <section anchor="encoding" numbered="true" toc="default">
        <name>Reference encoding of RBS addresses</name>
        <t>Structure elements of the RBS Address and its components
are parameterized according to a specific encapsulation
for RBS addresses, such as the total size of the TotalLen
field and the unit in which it is counted (see <xref target="RBS-address" format="default"/>).
These parameters are outside the scope of this document. Instead,
this document defines example parameters that together form the 
so called "Reference encoding of RBS addresses". This encoding 
may or may not be adopted for any particular encapsulation
of RBS addresses.</t>
      </section>
      <section anchor="RBS-address" numbered="true" toc="default">
        <name>RBS Address</name>
        <t>An RBS address is structured as shown in <xref target="FIG-RBS" format="default"/>.</t>
        <figure anchor="FIG-RBS">
          <name>RBS Address</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
+----------+-----+---------------+---------+
| TotalLen | Rsv | RecursiveUnit | Padding |
+----------+-----+---------------+---------+
           .                     .
            .... TotalLen .......
]]></artwork>
        </figure>
        <t>TotalLen counts in some unit, such as bits, nibbles or
bytes the length of the RBS Address excluding
itself and Padding. For the reference encoding, TotalLen
is an 8-bit field that counts the size of the RBS address
in bits, permitting for up to 256 bit long RBS addresses.</t>
        <t>In case additional, non-recursive flags/fields are determined
to be required in the RBS Address, they should be encoded
in a field between TotalLen and RecursiveUnit, which is
called Rsv. In the reference encoding, this field has a length
of 0.</t>
        <t>Padding is used to align the RBS address as required
by the encapsulation. In the reference encoding, this alignment
is to 8 bits (byte boundaries).
Therefore, Padding (bits) = (8 - TotalLen % 8).</t>
        <section anchor="recursiveunit" numbered="true" toc="default">
          <name>RecursiveUnit</name>
          <t>The RecursiveUnit field is structured as shown in <xref target="FIG-RBS-RU" format="default"/>.</t>
          <figure anchor="FIG-RBS-RU">
            <name>RBS RecursiveUnit</name>
            <artwork name="" type="" align="left" alt=""><![CDATA[
+-+-+-+-+-+  -+-+-+-+-+-+-+-+-+  -+-+-+-+-+-+-+-+     -+
| BitString...| AddressingField...| RecursiveUnit 1...M|
+-+-+-+-+-+  -+-+-+-+-+-+-+-+-+  -+-+-+-+-+-+-+-+-    -+
]]></artwork>
          </figure>
          <t>The BitString field indicates the bit positions (BPs) 
to which the packet is to be replicated using the
BIFT of the BFR that is processing the Recursive unit.</t>
          <t>For each of M BP set in the BitString of the RecursiveUnit for
which the Recursive flag is set in the BIFT of the BFR, the
RecursiveUnit contains a RecursiveUnit i, i=1...M, in order of increasing BP index.</t>
          <t>If adjacencies between BFR are not configured as recursive in the BIFT,
this recursive extraction does not happen for an adjacency, no
RecursiveUnit i has to be encoded for the BP,
and BFRs across such adjacencies would have to share the
BP of a common BIFT as in BIER-TE. This option is not further
discussed in this version of the document.</t>
        </section>
        <section anchor="addressingfield" numbered="true" toc="default">
          <name>AddressingField</name>
          <t>The AddressingField of an RBS address is structured as shown in
<xref target="FIG-RBS-AF" format="default"/>.</t>
          <figure anchor="FIG-RBS-AF">
            <name>RBS AddressingField</name>
            <artwork name="" type="" align="left" alt=""><![CDATA[
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+   +-+-+-+-+-+-+-+-+
|      L1       |     L2        |...|      L(M-1)   |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+   +-+-+-+-+-+-+-+-+
]]></artwork>
          </figure>
          <t>The AddressingField consists of one or more fields Li,
i=1...(M-1).  Li is the length of RecursiveUnit i for the
i'th recursive bit set in the BitString preceding it.</t>
          <t>In the reference encoding, the lengths are
8-bit fields indicating the length of RecursiveUnits in bits.</t>
          <t>The length of the M'th RecursiveUnit is not explicitly
encoded but has to be calculated from TotalLen.</t>
        </section>
      </section>
    </section>
    <section anchor="bier-rbs-example" numbered="true" toc="default">
      <name>BIER-RBS Example</name>
      <t><xref target="FIG-E-TOPO" format="default"/> shows an example for RBS forwarding.</t>
      <figure anchor="FIG-E-TOPO">
        <name>Example Network Topology</name>
        <artwork name="" type="" align="left" alt=""><![CDATA[
               +-+     +-+      +-+
               | |-----| |------|C|-=> Client2
               +-+     +-+      +-+
              /   \      \   /=>/ \
             /     \      \ /     |
            +-+    +-+    +-+    +-+    
 Client1 =>-|B|-=>-|R|-=>-|S|-=>-|D|-=> Client3
            +-+    +-+    +-+    +-+
                      \         /
                       \     +-+
                        \-=>-|E|-=> Client4
                             +-+
]]></artwork>
      </figure>
      <t>A packet from Client1 connected to BFIR B is intended to be
replicated to Client2,3,4. The example initially assumes
the traditional option of the architecture, in which the imposition of the 
header for the RBS address happens on BFIR B, for example
based on functions of an IP multicast flow overlay.</t>
      <t>A controller determines that the packet should be forwarded
hop-by-hop across the network as shown in <xref target="FIG-E-TREE" format="default"/>.</t>
      <figure anchor="FIG-E-TREE">
        <name>Desired example forwarding tree</name>
        <artwork name="" type="" align="left" alt=""><![CDATA[
Client 1 ->B(impose BIER-RBS)
            =>R(
               => E (dispose BIER-RBS)
                    => Client4
               => S(
                   =>C (dispose BIER-RBS)
                       => Client2
                   =>D (dispose BIER-RBS)
                       => Client3
                    )
               )
]]></artwork>
      </figure>
      <section anchor="bfr-b" numbered="true" toc="default">
        <name>BFR B</name>
        <t>The 34 bit long (without padding) RBS address shown in <xref target="FIG-E-B" format="default"/>
is constructed to represent the desired tree from <xref target="FIG-E-TREE" format="default"/> and is
imposed at B onto the packet through an appropriate header supporting the
reference encoding of RBS addresses.</t>
        <figure anchor="FIG-E-B">
          <name>RBS Address imposed at BFIR-B</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
         .............. RecursiveUnit .................
        .                                              .
+-------+----+-----+-----+-----+----+-----+------+-----+-----+
|Tlen:34|B:01|R:011|L1:10|S:011|L1:3|C:001|D:0001|E:001|Pad:6|
+-------+----+-----+-----+-----+----+-----+------+-----+-----+
  8bit   2bit  3bit 8bit  3bit  8bit 3bit  4bit   3bit  6bit
]]></artwork>
        </figure>
        <t>In <xref target="FIG-E-B" format="default"/> and further the illustrations of RBS addresses, BitStrings are
preceded by the name of the BFR for whom they are destined
and their values are shown as binary with the lowest BP 1
starting on the left. TotalLength (Tlen:),
AddressingField (L1:) and Padding (Pad:) fields are shown
with decimal values.</t>
        <t>RBS forwarding on B examines this address based 
on its RBS BIFT with N=2 BP entries, which is shown in
<xref target="FIG-E-B-BIFT" format="default"/>.</t>
        <figure anchor="FIG-E-B-BIFT">
          <name>BIER-RBS BIFT on B</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
+--+---------+---------+
|BP|Recursive|Adjacency|
+--+---------+---------+
| 1|        0| client1 |
+--+---------+---------+
| 2|        1|       R |
+--+---------+---------+
]]></artwork>
        </figure>
        <t>This results in the parsing of the RBS address as shown in
<xref target="FIG-E-B2" format="default"/>, which shows that B does not need (nor can)
parse all structural elements, but only those relevant
to its own RBS forwarding procedure.</t>
        <figure anchor="FIG-E-B2">
          <name>RBS Address as processed by BFIR-B</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
         ......... RecursiveUnit ...............
        .                                       .
        .     ......,.. RecursiveUnit 1 .........
        .    .                                  .
+-------+----+----------------------------------+-----+
|Tlen:34|B:01|R:01100001010011000000110010001001|Pad:6|
+-------+----+----------------------------------+-----+
  8bit   2bit  32bit                             6bit
]]></artwork>
        </figure>
        <t>There is only one BP towards BFR R set in the BitString B:01,
so the RecursiveUnit 1 follows directly after the end
of the BitString B:01 and it covers the whole Tlen - length
of BitString (34 - 2 = 32 bit).</t>
        <t>B rewrites the RBS address by replacing the RecursiveUnit with RecursiveUnit 1
and adjusts the Padding to zero bits. The resulting RBS address
is shown in <xref target="FIG-E-R" format="default"/>. It then sends
the packet copy with that rewritten RBS address to BFR R.</t>
      </section>
      <section anchor="bfr-r" numbered="true" toc="default">
        <name>BFR R</name>
        <t>BFR R receives from BFR B the packet with that RBS address
shown in <xref target="FIG-E-R" format="default"/>.</t>
        <figure anchor="FIG-E-R">
          <name>RBS Address processed by BFR-R</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
         .............. RecursiveUnit ............
        .                                         .
+-------+-----+-----+-----+----+-----+------+-----+
|Tlen:32|R:011|L1:18|S:011|L1:3|C:001|D:0001|E:001|
+-------+-----+-----+-----+----+-----+------+-----+
  8bit    3bit  8bit  3bit 8bit 3bit  4bit   3bit    
                    .                       .     .
                     . RecursiveUnit 1...... .....
                                               .
                            RecursiveUnit 2 ...
]]></artwork>
        </figure>
        <t>BFR R parses the RBS Address as shown in <xref target="FIG-E-R2" format="default"/> using its
RBS BIFT of N=3 BP entries shown in <xref target="FIG-E-R-BIFT" format="default"/>.</t>
        <figure anchor="FIG-E-R2">
          <name>RBS Address processed by BFR-R</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
         .............. RecursiveUnit ............
        .                                         .
+-------+-----+-----+--------------------+-----+
|Tlen:32|R:011|L1:18|S:011000000110010001|E:001|
+-------+-----+-----+--------------------+-----+
  8bit    3bit  8bit  18bit               3bit    
                    .                    .     .
                     . RecursiveUnit 1... .....
                                            .
                         RecursiveUnit 2 ...
]]></artwork>
        </figure>
        <t>Because there are two recursive BP set in the BitString for R,
one for BFR S and one for BFR E, one Length field L1 is required in
the AddressingField, indicating the length of the
RecursiveUnit 1 for BFR S, followed by the remainder of
the RBS address being the RecursiveUnit 2 for BFR E.</t>
        <figure anchor="FIG-E-R-BIFT">
          <name>RBS BIFT on BFR R</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
+--+---------+---------+
|BP|Recursive|Adjacency|
+--+---------+---------+
| 1|        1|       B |
+--+---------+---------+
| 2|        1|       S |
+--+---------+---------+
| 3|        1|       E |
+--+---------+---------+
]]></artwork>
        </figure>
        <t>BFR R accordingly creates one copy for BFR S using
RecursiveUnit 1, and only copy for BFR E using
RecursiveUnit 2, updating Padding accordingly for each
copy.</t>
      </section>
      <section anchor="bfr-s" numbered="true" toc="default">
        <name>BFR S</name>
        <t>BFR S receives from BFR B the packet and parses the
RBS address as shown in <xref target="FIG-E-S" format="default"/> using its RBS BIFT
of N=3 BP shown in <xref target="FIG-E-S-BIFT" format="default"/>.</t>
        <figure anchor="FIG-E-S">
          <name>RBS Address processed by BFR-S</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
         .... RecursiveUnit ....
        .                       .
+-------+-----+----+-----+------+-----+
|Tlen:18|S:011|L1:3|C:001|D:0001|Pad:6|
+-------+-----+----+-----+------+-----+
  8bit    3bit 8bit  3bit   4bit  3bit 
                   .    . .      .
                    ....   ......
     RecursiveUnit 1 .      .
                            .
     RecursiveUnit 2 .......
]]></artwork>
        </figure>
        <figure anchor="FIG-E-S-BIFT">
          <name>RBS BIFT on BFR-S</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
+--+---------+---------+
|BP|Recursive|Adjacency|
+--+---------+---------+
| 1|        1|       R |
+--+---------+---------+
| 2|        1|       C |
+--+---------+---------+
| 3|        1|       D |
+--+---------+---------+
]]></artwork>
        </figure>
        <t>BFR S accordingly sends one packet copy with RecursiveUnit 1
in the RBS address to BFR C and a second packet copy with
RecursiveUnit 2 to BFR D.</t>
      </section>
      <section anchor="bfr-c" numbered="true" toc="default">
        <name>BFR C</name>
        <t>BFR C receives from BFR S the packet and parses the
RBS address according to its N=3 BP entries BIFT (shown in
<xref target="FIG-E-C-BIFT" format="default"/>) as shown in <xref target="FIG-E-C" format="default"/>.</t>
        <figure anchor="FIG-E-C">
          <name>RBS Address processed by BFR-C</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
+-------+-----+-----+
|Tlen:3 |C:001|Pad:5|
+-------+-----+-----+
  8bit    3bit 5bi
]]></artwork>
        </figure>
        <figure anchor="FIG-E-C-BIFT">
          <name>RBS BIFT on BFR-C</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
+--+---------+-------------+
|BP|Recursive|    Adjacency|
+--+---------+-------------+
| 1|        1|           S |
+--+---------+-------------+
| 2|        1|           D |
+--+---------+-------------+
| 3|        0|  local_decap|
+--+---------+-------------+
]]></artwork>
        </figure>
        <t>BFR S accordingly creates one packet copy for BP 3
where the RBS address encapsulation is disposed of,
and the packet is ultimately forwarded to Client 2,
for example because of an IP multicast payload
for which the multicast flow overlay identifies
Client 2 as an interested receiver, as in BIER/BIER-TE.</t>
        <t>To avoid having to use an IP flow overlay, the BIFT
could instead have one BP allocated for every non-RBS
destination, in this example BP 3 would then explicitly
be allocated for Client 2, and instead of disposing
of the RBS address encapsulation, BFR C would
impose or rewrite a unicast encapsulation to make the packet
become a unicast packet directed to Client 2. This option
is not further detailed in this version of the document.</t>
      </section>
      <section anchor="bfr-d" numbered="true" toc="default">
        <name>BFR D</name>
        <t>The procedures for processing of the packet on BFR D
are very much the same as on BFR C.  <xref target="FIG-E-D" format="default"/> shows
the RBS address at BFR D, <xref target="FIG-E-D-BIFT" format="default"/> shows
the N=4 bit RBS BIFT of BFR D.</t>
        <figure anchor="FIG-E-D">
          <name>RBS Address processed by BFR-D</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
+-------+------+-----+
|Tlen:4 |D:0001|Pad:4|
+-------+------+-----+
  8bit    4bit   4bit
]]></artwork>
        </figure>
        <figure anchor="FIG-E-D-BIFT">
          <name>RBS BIFT on BFR-D</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
+--+---------+-------------+
|BP|Recursive|    Adjacency|
+--+---------+-------------+
| 1|        1|           S |
+--+---------+-------------+
| 2|        1|           C |
+--+---------+-------------+
| 3|        1|           E |
+--+---------+-------------+
| 4|        0|  local_decap|
+--+---------+-------------+
]]></artwork>
        </figure>
      </section>
      <section anchor="bfr-e" numbered="true" toc="default">
        <name>BFR E</name>
        <t>The procedures for processing of the packet on BFR E
are very much the same as on BFR C and D.  <xref target="FIG-E-E" format="default"/> shows
the RBS address at BFR D, <xref target="FIG-E-E-BIFT" format="default"/> shows
the N=E bit RBS BIFT of BFR E.</t>
        <figure anchor="FIG-E-E">
          <name>RBS Address processed by BFR-E</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
+-------+-----+-----+
|Tlen:3 |E:001|Pad:5|
+-------+-----+-----+
  8bit    3bit   5bit
]]></artwork>
        </figure>
        <figure anchor="FIG-E-E-BIFT">
          <name>RBS BIFT on BFR-E</name>
          <artwork name="" type="" align="left" alt=""><![CDATA[
+--+---------+-------------+
|BP|Recursive|    Adjacency|
+--+---------+-------------+
| 1|        1|           R |
+--+---------+-------------+
| 2|        1|           D |
+--+---------+-------------+
| 3|        0|  local_decap|
+--+---------+-------------+
]]></artwork>
        </figure>
      </section>
    </section>
    <section anchor="rbs-forwarding-pseudocode" numbered="true" toc="default">
      <name>RBS forwarding Pseudocode</name>
      <t>The following example RBS forwarding Pseudocode assumes
the reference encoding of bit-accurate length of BitStrings
and RecursiveUnits as well as 8-bit long TotalLen and AddressingField
Lengths. All packet field addressing and address/offset calculations
is therefore bit-accurate instead of byte accurate (which is what most
CPU memory access today is).</t>
      <figure anchor="FIG-PSEUDOCODE">
        <name>RBS address forwarding Pseudocode</name>
        <artwork name="" type="" align="left" alt=""><![CDATA[
void ForwardRBSPacket (Packet)
{
  RBS = GetPacketMulticastAddr(Packet); 
  Total_len = RBS;
  Rsv = Total_len + length(Total_Len);
  BitStringA = Rsv + length(Rsv);
  AddressingField =  BitStringA + BIFT.entries;

  // [1] calculate number of recursive bits set in BitString
  CopyBitString(*BitStringA, *RecursiveBits, BIFT.entries);
  And(*RecursiveBits,*BIFTRecursiveBits, BIFT.entries);
  N = CountBits(*RecursiveBits, BIFT.entries);

  // Start of first RecursiveUnit in RBS address
  // After AddressingField array with 8-bit length fields
  RecursiveUnit = AddressingField + (N - 1) * 8;

  RemainLength = *Total_len - length(Rsv)
                 - BIFT.entries;

  Index = GetFirstBitPosition(*BitStringA);
  while (Index) {
    PacketCopy = Copy(Packet);

    if (BIFT.BP[Index].recursive) {
      if(N == 1) {
        RecursiveUnitLength = RemainLength;
      } else {
        RecursiveUnitLength = *AddressingField;
        N--;
        AddressingField += 8;
        RemainLength -= RecursiveUnitLength;
        RemainLength -= 8; // 8 bit of AddressingField
      }
      RewriteRBS(PacketCopy, RecursiveUnit, RecursiveUnitLength);
      SendTo(PacketCopy, BIFT.BP[Index].adjacency);

      RecursiveUnit += RecursiveUnitLength;
    } else {
      DisposeRBSheader(PacketCopy);
      SendTo(PacketCopy, BIFT.BP[Index].adjacency);
    }
    Index = GetNextBitPosition(*BitStringA, Index);
  }
]]></artwork>
      </figure>
      <t>Explanations for <xref target="FIG-PSEUDOCODE" format="default"/>.</t>
      <t>RBS is the (bit accurate) address of the RBS address in packet
header memory.  BitStringA is the address of the RBS address
BitString in memory.  length(Total_Len) and length(Rsv) are the bit length of the two RBS 
address fields, e.g.: 8 bit and 0 bit for the reference encoding.</t>
      <t>The BFR local BIFT has a total number of BIFT.entries
addressable BP 1...BIFTentries. The BitString therefore
has BIFT.entries bits.</t>
      <t>BIFT.RecursiveBits is a BitString pre-filled by the control
plane with all the BP with the recursive flag set. This is constructed
from the Recursive flag setting of the BP of the BIFT. The
code starting at [1] therefore counts the number of
recursive BP in the packets BitString.</t>
      <t>Because the AddressingField does not have an entry for the
last (or only) RecursiveUnit, its length has to be calculated
by taking TotalLen into account.</t>
      <t>RewriteRBS needs to replace RBS address with the
RecursiveUnit address, keeping only Rsv, recalculating
TotalLen and adding appropriate Padding.</t>
      <t>For non-recursive BP, the Pseudocode assumes disposition of the
RBSheader. This is not strictly necessary but non-disposing
cases are outside of scope of this version of the document.</t>
    </section>
    <section anchor="operational-and-design-considerations-informational" numbered="true" toc="default">
      <name>Operational and design considerations (informational)</name>
      <section anchor="comparison" numbered="true" toc="default">
        <name>Comparison with  BIER-TE / BIER</name>
        <t>This section discusses informationally, how and where 
CGM2 can avoid different complexities of BIER/BIER-TE,
and where it introduces new complexities.</t>
        <section anchor="eliminating-the-need-for-large-bift" numbered="true" toc="default">
          <name>Eliminating the need for large BIFT</name>
          <t>In a BIER domain with M BFER, every BFR requires M
BIFT entries. If the supported BSL is N and M &gt; 2 ^ N,
then S = (M / 2 ^ N) set indices (SI) are required,
and S copies of the packet have to be sent by the BFIR
to reach all targeted BFER.</t>
          <t>In CGM2, the number of BIFT entries does not need
to scale with the number of BFER or paths through
the network, but can be limited to only the number
of L2 adjacencies of the BFR. Therefore CGM2 requires
minimum state maintenance on each BFR, and multiple
SI are not required.</t>
        </section>
        <section anchor="reducing-number-of-duplicate-packet-copies-across-bfr" numbered="true" toc="default">
          <name>Reducing number of duplicate packet copies across BFR</name>
          <t>If the total size of an RBS encoded delivery tree is
larger than a supported maximum RBS header size, then
the CGM2 controller simply needs to divide the tree
into multiple subtrees, each only addressing a part
of the BFER (leaves) of the target tree and pruning
any unnecessary branches.</t>
          <figure anchor="FIG-SMPLT">
            <name>Simple Topology Example</name>
            <artwork name="" type="" align="left" alt=""><![CDATA[
             B1
            /  \
      B2    B3
        /   \  /  \
       /     \/    \
     B4      B5     B6
   /..|     /  \    |..\
B7..B99  B100..B200 B201...B300
]]></artwork>
          </figure>
          <t>Consider the simple topology in <xref target="FIG-SMPLT" format="default"/> and a multicast packet
that needs to reach all BFER B7...B300. Assume that
the desired maximum RBM header size is such that a
RBS address size of &lt;= 256 bits is desired. The CGM2
controller could create an RBS address
B1=&gt;B2=&gt;B4=&gt;(B7..B99), for a first packet, an
RBS address B1=&gt;B3=&gt;B5=&gt;(B100..B200) for a second
packet and a third RBS address B1=&gt;B3=&gt;B6=&gt;B201...B300.</t>
          <t>The elimination of larger BIFT state in BFR
through multiple SI in BIER/BIER-TE does come at
the expense of replicating initial hops of a tree
in RBS addresses, such as in the example the encoding
of B1=&gt;B3 in the example.</t>
          <t>Consider that the assignment of BFIR-ids with BIER
in the above example is not carefully engineered. It is
then easily possible that the BFR-ids for B7..B99 are not
sequentially, but split over a larger BFIR-id space.
If the same is true for all BFER, then it is possible
that each of the three BFR B4,B5 and B6 has attached
BFER from three different SI and one may need to send
for example three multiple packets to B7 to
address all BFER B7..B99 or to B5 to address all
B100..B200 or B6 to address all B201...B300. These
unnecessary duplicate packets across B4, B5 or B6 are
because of the addressing principle in BIER and are not
necessary in CGM2, as long as the total length of an RBS
address does not require it.</t>
          <t>For more analysis, see <xref target="analysis" format="default"/>.</t>
        </section>
        <section anchor="complexities" numbered="true" toc="default">
          <name>BIER-TE forwarding plane complexities</name>
          <t>BIER-TE introduces  forwarding plane complexities to allow
reducing the BSL required. While all of these
could be supported / implemented with CGM2, this
document contends that they are not necessary, therefore
providing significant overall simplifications.</t>
          <ul spacing="normal">
            <li>BIER-TE supports multiple adjacencies in a single BIFT Index
to allow compressing multiple adjacencies into a single Index
for traffic that is known to always require replications
to all those adjacencies (such as when flooding TV traffic).</li>
            <li>BIER-TE support ECMP adjacencies which
have to calculate which out of 2 or more possible adjacencies
a packet should be forwarded to.</li>
            <li>BIER-TE supports special Do-Not-Clear (DNC) behavior of
adjacencies to permit reuse of such a bit for adjacencies
on multiple consecutive BFR. This behavior specifically
also raises the risk of looping packets.</li>
          </ul>
        </section>
        <section anchor="bier-te-controller-complexities" numbered="true" toc="default">
          <name>BIER-TE controller complexities</name>
          <t>BIER-TE introduces BIER-TE controller plane mechanisms
that allow to reuse bits of the flat BIER-TE BitStrings
across multiple BFR solely to reduce the number of BP
required but without introducing additional complexities
for the BIER-TE forwarding plane.</t>
          <ul spacing="normal">
            <li>Shared BP for all Leaf BFR.</li>
            <li>Shared BP for both Interfaces of p2p links.</li>
            <li>Shared bits for multi-access subnets (LANs).</li>
          </ul>
          <t>These bit-sharing mechanisms are unnecessary
and inapplicable to CGM2 because there is no need to
share BP across the BIFT of multiple BFR.</t>
        </section>
        <section anchor="bier-te-specification-complexities" numbered="true" toc="default">
          <name>BIER-TE specification complexities</name>
          <t>The BIER-TE specification distinguishes between forward (link scope)
and routed (underlay routed) adjacencies to highlight, explain
and emphasize on the ability of BIER-TE to be deployed in an overlay fashion
especially also to reduce the necessary BSL, even
when all routers in the domain could or do support BIER-TE.</t>
          <t>In CGM2, routed adjacencies are considered to be only
required in partial deployments to forward across non-CGM2
enabled routers. This specification does therefore not
highlight link scope vs. routed adjacencies as core
distinct features.</t>
        </section>
        <section anchor="forwarding-plane-complexity" numbered="true" toc="default">
          <name>Forwarding plane complexity</name>
          <t>CGM2 introduces some more processing calculation steps to extract
the BitString that needs to be examined by a BFR from
the RBS address. These additional steps are considered
to be non-problematic for todays programmable
forwarding planes such as P4.</t>
          <t>Whereas BIER-TE clears bit on each hops processing,
CGM2 rewrites the address on every hop by extracting the recursive
unit for the next hop and make it become the packet copies
address. This rewrite shortens the RBS address. This hopefully
has only the same complexity as (tunnel) encapsulations/decapsulations
in existing forwarding planes.</t>
        </section>
      </section>
      <section anchor="cgm2-rbs-controller-considerations" numbered="true" toc="default">
        <name>CGM2 / RBS controller considerations</name>
        <t>TBD. Any aspects not covered in <xref target="comparison" format="default"/>.</t>
      </section>
      <section anchor="analysis" numbered="true" toc="default">
        <name>Analysis of performance gain with CGM2</name>
        <t>TBD: Comparison of number of packets/header sizes required
in large real-world operator topology between BIER/BIER-TE and CGM2.
Analysis: Gain in dense topology.</t>
        <section anchor="reference-topology" numbered="true" toc="default">
          <name>Reference topology</name>
          <t>Reference topology description:</t>
          <ol spacing="normal" type="1"><li>Typical topology of Beijing Mobile in China.</li>
            <li>All zones dual homing access to backbone.</li>
            <li>Core layer: 4 nodes full mesh connected</li>
            <li>Aggregation layer: 8 nodes are divided into two layers, with full
interconnection between the layers and dual homing access to
the core layer on the upper layer.</li>
            <li>Aggregation rings: 8 rings, 6 nodes per ring</li>
            <li>Access rings: 3600 nodes, 18 nodes per ring.</li>
          </ol>
          <figure anchor="FIG-REFTOPO">
            <name>Reference Topology</name>
            <artwork name="" type="" align="left" alt=""><![CDATA[
                      ┌──────┐          ┌──────┐
                      │      ├──────────┤      │
                     /└──────┘\        /└──────┘\   Interconnected
                    /   / | \  \      /  / | \   \   BackBone
           ┌──────┐/   /  |  \  \    /  /  |  \   \┌──────┐
           │      │   /   |   \  \  /  /   |   \   │      │
           └───┬──┘  /    |    \  \/  /    |    \  └─┬────┘
               │    /     |     \ /\ /     |     \   │
            ┌──┴───┐      |      /  \      |      ┌──┴───┐
            │      │------------+ \/ +------------│      │
            └──────┘\     |       /\       |     /└──────┘
                     \    |      /  \      |    /
                      \ ┌──────┐/    \┌──────┐ /
                       \│      ├──────┤      │/
                        └───┬──┘      └───┬──┘
                            │   \     /   │  Dual Return Access
                            │    \   /    │
                            │     \ /     │
                            │      /      │
                            │     / \     │
                          ┌─┴───┐/   \┌───┴─┐
                          │     ├─────┤     │
                          └─┬───┘\   /└───┬─┘
                            │     \ /     │  Core Layer
                            │      /      │
                            │     / \     │
                          ┌─┴───┐/   \┌───┴─┐
                         /│     ├─────┤     │\
                        / └──┬──┘\   /└──┬──┘ \
                       /     │\   \ /   /│     \   Zone1
                      /      │ \   \   / │      \
                     /       │  \ / \ /  │       \
                    /   +----│---+   +---│----+   \
                   /   /     │    \ /    │     \   \
                  /   /      │     +     │      \   \
                 /   /       │    / \    │       \   \
               ┌───┐/       ┌┴──┐/   \┌──┴┐       \┌───┐
               │   │\      /│   │     │   │\      /│   │
               └─┬─┘ \    / └─┬─┘\   /└─┬─┘ \    / └─┬─┘  
                 │    \  /    │   \ /   │    \  /    │ Aggregation
                 │     \/     │    /    │     \/     │ Layer
                 │     /\     │   / \   │     /\     │
               ┌─┴─┐  /  \  ┌─┴─┐/   \┌─┴─┐  /  \  ┌─┴─┐
               │   │--    --│   │     │   │--    --│   │
               └───┘        └───┘\   /└───┘\       └───┘
                            / | \ \ /  / |  \
                           /  |  \ \  /  |   \
                          /   |   / \/   |    \
                         / +--|--+ \/+---|---+ \
                        / /   |    /\    |    \ \
                     ┌───┐   ┌┴──┐/  \┌───┐   ┌───┐   ASBR
                     │   │   │   │    │   │   │   │
                     └─┬─┘   └─┬─┘    └─┬─┘   └─┬─┘
                       │       │        │       │  
                       │       │        │       │  
                     ┌─┴─┐   ┌─┴─┐    ┌─┴─┐   ┌─┴─┐
                     │   │   │   │    │   │   │   │
                     └─┬─┘   └─┬─┘    └─┬─┘   └─┬─┘
                       │       │        │       │  
                       │       │ 8Rings │       │  
                     ┌─┴─┐   ┌─┴─┐ ...┌─┴─┐   ┌─┴─┐
                     │   │---│   │    │   │---│   │
                 ----└───┘   └───┘    └───┘\  └───┘
                /   /   \  \   |  \       \ \    |  \
              /    /     \  \  |   \       \ +---|-+ \
             /    /       \  +-|---+\       \    |  \ \   
           /     /         \   |    \\       \   |   \ \   
          /     /           \  |     \\       \  |    \ \  
         /     /             \ |      \\       \ |     \ \ 
    ┌───┐   ┌───┐           ┌───┐   ┌───┐       ┌───┐   ┌───┐ CSBR
    │   │   │   │           │   │   │   │       │   │   │   │ 
    └─┬─┘   └─┬─┘           └─┬─┘   └─┬─┘       └─┬─┘   └─┬─┘ 
      │       │    Access     │       │           │       │   
      │       │    Rings      │       │           │       │   
    ┌─┴─┐   ┌─┴─┐  ...      ┌─┴─┐   ┌─┴─┐       ┌─┴─┐   ┌─┴─┐ 
    │   │   │   │           │   │   │   │       │   │   │   │ 
    └─┬─┘   └─┬─┘           └─┬─┘   └─┬─┘       └─┬─┘   └─┬─┘ 
      │       │               │       │           │       │   
      │       │               │       │           │       │   
    ┌─┴─┐   ┌─┴─┐           ┌─┴─┐   ┌─┴─┐       ┌─┴─┐   ┌─┴─┐ 
    │   │   │   │           │   │   │   │       │   │   │   │ 
    └───┘...└───┘           └───┘...└───┘       └───┘...└───┘ 
]]></artwork>
          </figure>
        </section>
        <section anchor="comparison-bier-and-cgm2rbs" numbered="true" toc="default">
          <name>Comparison BIER and CGM2/RBS</name>
          <t>The following performance comparison is based on <xref target="FIG-REFTOPO" format="default"/>.</t>
          <ol spacing="normal" type="1"><li>CGM2: We randomly select egress points as group members, with the total number ranging from 10 to 28800 (for sake of simplicity, we assume merely one client per egress point). The egress points are randomly distributed in the topology with 10 runs for each value, showing the average result in our graphs. The total number of samples is 60</li>
            <li>BIER: We divide the overall topology into 160 BIER domains, each of which includes 180 egress points, providing the total of 28000 egress points.</li>
            <li>Simulation: In order to compare the BIER against the in-packet tree encoding mechanism, we limit the size of the header to 256 bits (the typical size of a BIER header).</li>
          </ol>
          <t>Conclusion: 
1. BIER reaches its 160 packet replication limit at about 500 users, while the in-packet tree encoding reaching its limit of 125 replications at about 12000 users. And the following decrease of replications is caused by the use of node-local broadcast as a further optimization.
2. For the sake of comparison, the same 256-bit encapsulation limit is imposed on CGM2, but we can completely break the 256-bit encapsulation limit, thus allowing the source to send fewer multicast streams.
3. CCGM2 encoding performs significantly better than BIER in that it requires less packet replications and there network bandwidth.</t>
        </section>
      </section>
      <section anchor="example-use-case-scenarios" numbered="true" toc="default">
        <name>Example use case scenarios</name>
        <t>TBD.</t>
      </section>
    </section>
    <section anchor="acknowledgements" numbered="true" toc="default">
      <name>Acknowledgements</name>
      <t>This work is based on the design published by Sheng Jiang, Xu Bing, Yan Shen, Meng Rui, Wan Junjie and Wang Chuang {jiangsheng|bing.xu|yanshen|mengrui|wanjunjie2|wangchuang}@huawei.com, see <xref target="CGM2Design" format="default"/>.</t>
    </section>
    <section anchor="security-considerations" numbered="true" toc="default">
      <name>Security considerations</name>
      <t>TBD.</t>
    </section>
    <section anchor="changelog" numbered="true" toc="default">
      <name>Changelog</name>
      <t>[RFC-Editor: please remove this section].</t>
      <t>This document is written in https://github.com/cabo/kramdown-rfc2629 markup language.
This documents source is maintained at https://github.com/toerless/bier-cgm2-rbs,
please provide feedback to the appropriate IETF mailing list and submit an Issue
to the GitHub.</t>
      <t>01 - Added section 6.3 about performance comparison and co-author (Robin).</t>
      <t>00 - Initial version from <xref target="CGM2Design" format="default"/>.</t>
    </section>
  </middle>
  <back>
    <references>
      <name>References</name>
      <references>
        <name>Normative References</name>
        <reference anchor="RFC791" target="https://www.rfc-editor.org/info/rfc791">
          <front>
            <title>Internet Protocol</title>
            <author fullname="J. Postel" initials="J." surname="Postel">
              <organization/>
            </author>
            <date month="September" year="1981"/>
          </front>
          <seriesInfo name="STD" value="5"/>
          <seriesInfo name="RFC" value="791"/>
          <seriesInfo name="DOI" value="10.17487/RFC0791"/>
        </reference>
        <reference anchor="RFC1112" target="https://www.rfc-editor.org/info/rfc1112">
          <front>
            <title>Host extensions for IP multicasting</title>
            <author fullname="S.E. Deering" initials="S.E." surname="Deering">
              <organization/>
            </author>
            <date month="August" year="1989"/>
            <abstract>
              <t>This memo specifies the extensions required of a host implementation of the Internet Protocol (IP) to support multicasting.  Recommended procedure for IP multicasting in the Internet.  This RFC obsoletes RFCs 998 and 1054.  [STANDARDS-TRACK]</t>
            </abstract>
          </front>
          <seriesInfo name="STD" value="5"/>
          <seriesInfo name="RFC" value="1112"/>
          <seriesInfo name="DOI" value="10.17487/RFC1112"/>
        </reference>
        <reference anchor="RFC8279" target="https://www.rfc-editor.org/info/rfc8279">
          <front>
            <title>Multicast Using Bit Index Explicit Replication (BIER)</title>
            <author fullname="IJ. Wijnands" initials="IJ." role="editor" surname="Wijnands">
              <organization/>
            </author>
            <author fullname="E. Rosen" initials="E." role="editor" surname="Rosen">
              <organization/>
            </author>
            <author fullname="A. Dolganow" initials="A." surname="Dolganow">
              <organization/>
            </author>
            <author fullname="T. Przygienda" initials="T." surname="Przygienda">
              <organization/>
            </author>
            <author fullname="S. Aldrin" initials="S." surname="Aldrin">
              <organization/>
            </author>
            <date month="November" year="2017"/>
            <abstract>
              <t>This document specifies a new architecture for the forwarding of multicast data packets.  It provides optimal forwarding of multicast packets through a "multicast domain".  However, it does not require a protocol for explicitly building multicast distribution trees, nor does it require intermediate nodes to maintain any per-flow state. This architecture is known as "Bit Index Explicit Replication" (BIER).  When a multicast data packet enters the domain, the ingress router determines the set of egress routers to which the packet needs to be sent.  The ingress router then encapsulates the packet in a BIER header.  The BIER header contains a bit string in which each bit represents exactly one egress router in the domain; to forward the packet to a given set of egress routers, the bits corresponding to those routers are set in the BIER header.  The procedures for forwarding a packet based on its BIER header are specified in this document.  Elimination of the per-flow state and the explicit tree-building protocols results in a considerable simplification.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8279"/>
          <seriesInfo name="DOI" value="10.17487/RFC8279"/>
        </reference>
        <reference anchor="RFC8296" target="https://www.rfc-editor.org/info/rfc8296">
          <front>
            <title>Encapsulation for Bit Index Explicit Replication (BIER) in MPLS and Non-MPLS Networks</title>
            <author fullname="IJ. Wijnands" initials="IJ." role="editor" surname="Wijnands">
              <organization/>
            </author>
            <author fullname="E. Rosen" initials="E." role="editor" surname="Rosen">
              <organization/>
            </author>
            <author fullname="A. Dolganow" initials="A." surname="Dolganow">
              <organization/>
            </author>
            <author fullname="J. Tantsura" initials="J." surname="Tantsura">
              <organization/>
            </author>
            <author fullname="S. Aldrin" initials="S." surname="Aldrin">
              <organization/>
            </author>
            <author fullname="I. Meilik" initials="I." surname="Meilik">
              <organization/>
            </author>
            <date month="January" year="2018"/>
            <abstract>
              <t>Bit Index Explicit Replication (BIER) is an architecture that provides optimal multicast forwarding through a "multicast domain", without requiring intermediate routers to maintain any per-flow state or to engage in an explicit tree-building protocol.  When a multicast data packet enters the domain, the ingress router determines the set of egress routers to which the packet needs to be sent.  The ingress router then encapsulates the packet in a BIER header.  The BIER header contains a bit string in which each bit represents exactly one egress router in the domain; to forward the packet to a given set of egress routers, the bits corresponding to those routers are set in the BIER header.  The details of the encapsulation depend on the type of network used to realize the multicast domain.  This document specifies a BIER encapsulation that can be used in an MPLS network or, with slight differences, in a non-MPLS network.</t>
            </abstract>
          </front>
          <seriesInfo name="RFC" value="8296"/>
          <seriesInfo name="DOI" value="10.17487/RFC8296"/>
        </reference>
        <reference anchor="I-D.ietf-bier-te-arch" target="https://www.ietf.org/archive/id/draft-ietf-bier-te-arch-12.txt">
          <front>
            <title>Tree Engineering for Bit Index Explicit Replication (BIER-TE)</title>
            <author fullname="Toerless Eckert">
              <organization>Futurewei Technologies Inc.</organization>
            </author>
            <author fullname="Michael Menth">
              <organization>University of Tuebingen</organization>
            </author>
            <author fullname="Gregory Cauchie">
              <organization>Bouygues Telecom</organization>
            </author>
            <date day="28" month="January" year="2022"/>
            <abstract>
              <t>   This memo describes per-packet stateless strict and loose path
   steered replication and forwarding for "Bit Index Explicit
   Replication" (BIER, RFC8279) packets.  It is called BIER Tree
   Engineering (BIER-TE) and is intended to be used as the path steering
   mechanism for Traffic Engineering with BIER.

   BIER-TE introduces a new semantic for "bit positions" (BP).  They
   indicate adjacencies of the network topology, as opposed to (non-TE)
   BIER in which BPs indicate "Bit-Forwarding Egress Routers" (BFER).  A
   BIER-TE packets BitString therefore indicates the edges of the (loop-
   free) tree that the packet is forwarded across by BIER-TE.  BIER-TE
   can leverage BIER forwarding engines with little changes.  Co-
   existence of BIER and BIER-TE forwarding in the same domain is
   possible, for example by using separate BIER "sub-domains" (SDs).
   Except for the optional routed adjacencies, BIER-TE does not require
   a BIER routing underlay, and can therefore operate without depending
   on an "Interior Gateway Routing protocol" (IGP).

   As it operates on the same per-packet stateless forwarding
   principles, BIER-TE can also be a good fit to support multicast path
   steering in "Segment Routing" (SR) networks.

              </t>
            </abstract>
          </front>
          <seriesInfo name="Internet-Draft" value="draft-ietf-bier-te-arch-12"/>
        </reference>
      </references>
      <references>
        <name>Informative References</name>
        <reference anchor="CGM2Design" target="https://github.com/BingXu1112/CGMM/blob/main/Novel%20Multicast%20Protocol%20Proposal%20Introduction.pptx">
          <front>
            <title>Novel Multicast Protocol Proposal Introduction</title>
            <author initials="S." surname="Jiang" fullname="Sheng Jiang">
              <organization/>
            </author>
            <author initials="B.(." surname="Xu" fullname="Bing (Robin) Xu">
              <organization/>
            </author>
            <author initials="Y." surname="Shen" fullname="Yan Shen">
              <organization/>
            </author>
            <author initials="M." surname="Rui" fullname="Meng Rui">
              <organization/>
            </author>
            <author initials="W." surname="Junjie" fullname="Wan Junjie">
              <organization/>
            </author>
            <author initials="W." surname="Chuang" fullname="Wang Chuang">
              <organization/>
            </author>
            <date year="2021" month="October" day="10"/>
          </front>
        </reference>
      </references>
    </references>
  </back>
  <!-- ##markdown-source:
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
DTXtDBgt1ocpMa0Ds0XF+BHVapqtrGCKTeUhPFcepGpkvEt9T4U8MzF9L01E
MvHRWPNe4UYPJts608/Xyz5XJWsj580UoICUh5729fwe7etnvtGSsK9ceTpX
i5617njKXaDq++BZ06IZdsBNatmPDX826BW+cqiCICYgURt3qrEmEMOGMzEC
kyh0RHzQFLQOSfHUKYciEkwlcAL9AnSgx54O1NK3rvi4df9fx/INpFULitck
1Yb4vZF8CpB793lTTH0mZn8eWn8uTt/X5T5sbhW269DZZIdSSjDp/phD6nzf
66Jd5NrtoWLPbl4kirHi/FX35KRHf4pNwvG9V7t+NhUppGXTxd9b7xFvCYvt
ujn0RMY7myzHmqdy4qFZT2+i28Xt0C3iP9nosJ8Of4bRMd607+Nm35NPMVjO
WlNLTeKbYNmGmG94q82sAgUNw5clZdJpVjwctkmFvRoq9JTNog7an7S3H/ZU
tZoxnhnlyX+/yaWjQpM3vjYzNsJgfJ82gxNy8iI8lNUmMMa+vPAy8J28aHa5
U060SIfNpMJ6GXCfdnOHRrPWMPlELcb3FonuQn+sxTcx1/rB2lob9ilfuyE/
G2bhvSPVANkyyrCZVwXbuREPHxuVRCD5n8mcNvBqcN8W5nT0M5jT8acwp/a8
d2FOBnwiujyaJ5OHOE7D4mkYYEkzdUlMnyM+OIfFBDJiAOFQDUZk+h37TObI
zPCohcmMN2Yyfqoq8pSa2klQ6TQ9REfCVbqtbOqoJedxvcNZCRNA6n96l77X
SutPJ4m/sUcb0cfRBvSxlkbwyc89f+IxgPsE8n00swnur6EdPMNCh51+PwNt
b/VJZ0cMDqyjoaN1NOTLbR/1SRyP1GM5bNUgnvDIAZ1XKtiXn114J05d0hc6
NZYxVcSx4UoX2QX5zinYJsg1cceh6hHTVXyzyOIZt/fKirSGVF3hRKxLLu+S
ekJ0AEAXpXeit+flGgW1md9mKr7KkpmrEylFbnBuQSFim3WFqkhFmXJ8LJOS
ncRDhhVXOLjtEu4xt5Sq/3LsIeZCCSaNyQAGN0Wyp8jv42eMTHRtYAtcOUZv
z4fybpGe1eKGDja3J1yS3mmieZjKY0pZrz8VrJaxFGIwp5dhWzG32HURBGFH
X4gRQaIXecC8TK+15ZjX5HkxyzaxUevO5mpozQrhMi1Rj4/5XIE77U9Jx1Qu
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

-->

</rfc>
