<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.9 (Ruby 3.1.2) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

]>

<?rfc comments="yes"?>

<rfc ipr="trust200902" docName="draft-eckert-bier-rbs-00" category="exp" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="bier-rbs">Recursive BitString Structure (RBS) Addresses for BIER and MSR6</title>

    <author initials="T." surname="Eckert" fullname="Toerless Eckert" role="editor">
      <organization>Futurewei Technologies USA</organization>
      <address>
        <postal>
          <street>2220 Central Expressway</street>
          <city>Santa Clara</city>
          <code>CA 95050</code>
          <country>USA</country>
        </postal>
        <email>tte@cs.fau.de</email>
      </address>
    </author>
    <author initials="M." surname="Menth" fullname="Michael Menth">
      <organization>University of Tuebingen</organization>
      <address>
        <postal>
          <country>Germany</country>
        </postal>
        <email>menth@uni-tuebingen.de</email>
      </address>
    </author>
    <author initials="X." surname="Geng" fullname="Xuesong Geng">
      <organization>Huawei 2012 NT Lab</organization>
      <address>
        <postal>
          <country>China</country>
        </postal>
        <email>gengxuesong@huawei.com</email>
      </address>
    </author>
    <author initials="X." surname="Zheng" fullname="Xiuli Zheng">
      <organization>Huawei 2012 NT Lab</organization>
      <address>
        <postal>
          <country>China</country>
        </postal>
        <email>zhengxiuli@huawei.com</email>
      </address>
    </author>
    <author initials="R." surname="Meng" fullname="Rui Meng">
      <organization>Huawei 2012 NT Lab</organization>
      <address>
        <postal>
          <country>China</country>
        </postal>
        <email>mengrui@huawei.com</email>
      </address>
    </author>
    <author initials="F." surname="Li" fullname="Fengkai Li">
      <organization>Huawei 2012 NT Lab</organization>
      <address>
        <email>lifengkai@huawei.com</email>
      </address>
    </author>

    <date year="2022" month="October" day="20"/>

    
    <workgroup>BIER</workgroup>
    

    <abstract>


<t>This memo introduces a compact data-structure representation of multicast trees
called "Recursive Bitstring Structure" (RBS) and its use for (stateless)
forwarding of packets that include this structure in their
header. It is intended as an alternative to "flat" bitstring addresses
as used in BIER and BIER-TE or possible forwarding plane variations such as MSR6.
RBS aims to improve performance and scalability over flat bitstrings and simplify
operations.</t>

<t>Operations is simplified because RBS does not require the use, management and optimization
of network-wide configured address spaces BIFT-ID and SI and because one common RBS mechanism
can replace flat bitstring addresses for both shortest-path forwarding and tree engineered
forwarding. It intends to improve performance by allowing multicast to sparse set of
receivers in larger networks with fewer packets and it intends to improve scalability
by requiring less BIFT state on routers.</t>



    </abstract>



  </front>

  <middle>


<section anchor="introduction"><name>Introduction</name>

<t>This memo introduces a compact data-structure representation of multicast trees
called "Recursive Bitstring Structure" (RBS) and its use for (stateless)
forwarding of packets that include this structure in their
header. It is intended as an alternative to "flat" bitstring addresses
in BIER and BIER-TE or their possible variations such as MSR6.
RBS aims to improve performance and scalability over flat bitstrings and simplify
operations.</t>

<t>Operations is simplified because RBS does not require the use, management and optimization
of network-wide configured address spaces BIFT-ID and SI and because one common RBS mechanism
can replace flat bitstring addresses for both shortest-path forwarding and tree engineered
forwarding.</t>

<t>This document calls the bitstring addressing used today in BIER and BIER-TE "flat" solely as
simple to remember distinction to the "recursive" bitstring addressing used by RBS.</t>

<t>The document is structured as follows:</t>

<t>The introduction reviews the aspect of BIER and BIER-TE that RBS intends to improve on
to then give an introduction to RBS.</t>

<t>The architecture section describes the models how RBS can integrate into comprehensive forwarding
architectures such as those defineed by BIER/BIER-TE.</t>

<t>The Overview section explains RBS address encoding and forwarding based on an example</t>

<t>The Specification section defines normative requirements of RBS including forwarding Pseudocode.</t>

<t>The section on using RBS with BIER and RFC8296 encapsulation describes proposed normative
aspects when applying RBS to BIER.</t>

<t>Appendices discuss High-speed implementation considerations and current insight into
how well RBS can help to reducing the number of of packet required to be sent with RBS.</t>

<section anchor="bier-review"><name>BIER review</name>

<t>In BIER, each bit of a bitstring indicates a BIER egres router (BFER). When using
<xref target="RFC8296"/> encapsulation, BitString can have a BitStringLength (BSL) of 2^N, N=6...12.
Routers may not be able to support up to 2^12=496 long BitStrings. The most common
BSL assumed to be supported is 256.</t>

<t>When a network has a number M of BFER, M &gt;&gt; BSL support by routers in the network,
it it necessary to use multiple "sets" of BitStrings across the network to address all BFER.
Each set has a SetIdentifier (SI). BFER are identified in BIER via their BFR-id which is
(SI &lt;&lt; N | 2^BP ), where BP is the BitPosition, the bit in the BitString used for this BFER:
the lower N bits of the BFR-id are the BP of the BFER and the high order bits the SI.
In <xref target="RFC8279"/> this is also shown as (SI:BitString), where the BitString has only the BP of
the BFER set.</t>

<t>When a network requires k SI to address all BFER, then a message that needs to
be sent to k arbitrary BFER in the network may require to send as many as k BIER packets -
when each of the k BFER has a different SI. The total number of packets required for
any possible set of receiver BFER is a stochastial matter. At best, BIER can reduce the
number of packet required to reach M BFER to M/BSL.</t>

<t>Intelligent allocation of BFR-id can lead to a more efficient delivery of
BIER traffic. Consider a network requiring k SI and random allocation of BFR-id so that
every edge area of the network has at least one BFR in each of the k BFR. This makes
it more likely that up to k BIER packets need to be sent into such an area to reach
subsets of BFR in it. Compare this to an allocation that attempts to minimize the
number of SI used by BFR in each individual area. This will result in fewer BIER
packets required to reach subsets of BFR in such an area.</t>

</section>
<section anchor="bier-te-review"><name>BIER-TE review</name>

<t>Whereas BIER relies on hop-by-hop routing to direct its traffic, Tree Engineering
for BIER (BIER-TE, <xref target="RFC9262"/>) is based on explicit source routing by encoding the whole
delivery tree in a BitString. This is done to support similar type of requirements
as those that require explicit source routing in IP unicast, also called traffic steering,
such as SRH in IPv6, but also multicast specific ones, such as lowest cost trees (so-called
Steiner trees).</t>

<t>BIER-TE was designed to reuse the packet encodings of BIER and as much as feasible of
the BIER forwarding plane. It therefore relies on the same type of flat BitStrings (and
their addressing via SI) as BIER.  In BIER-TE, each bit of a BitString indicates an adjacency.
In the most simple case those adjacencies are subnet adjacent BFR for the edges of the multicast
tree which are called forward_connected() in BIER-TE, and local_decap() adjacencies for the
leaves of the tree - effectively its BFER.</t>

<t>Because BIER-TE needs to represent the whole delivery tree and not only its leaves/BFER
in the BitString, intelligent and efficient allocation of BP is even more important than
in BIER, and a significant number of BP in every SI must be allocated to transit hops of
the network to allow defining BIER-TE trees across those transit hops. In large networks this
may also lead to the need to allocate BP across multiple SI for the same transit hops and
thus a much larger total number of BP required to represent a smaller number of BFER and
transit hop adjacencies - and in result also more BIER-TE packets required for the
same message to send to the larger number of different SI required.</t>

</section>
<section anchor="rbs-introduction"><name>RBS introduction</name>

<t>One way to understand the Recursive BitString Structure address is to think of it as an
evolution of BIER-TE flat bitstrings. Every single BFR processing a BIER-TE bitstring
only needs to look at a small subset of the BP in it: those BP that indicate adjacencies of
this BFR. All the other bits are ignored because they are adjacencies on other BFR.</t>

<t>Consider we decompose a BIER-TE BitString into separate smaller bitstrings - one each for
every BFR on the multicast tree that we want to encode. The BitString for each BFR now
only needs to have a BP for each subnet adjacent (neighbor) BFR. And an equivalent to the
local_decap() BP to indicate to the BFR itself to be a leaf/BFER on the multicast tree itself.</t>

<t>With this step, RBS eliminates the complex optimization problems resulting from the
flat BitStrings: There is no need anymore for a network wide SI address space and optimizing
which adjacencies and BFR-id to put into which SI. There is no hard partitioning by SI:
A tree can span an arbitrary subset of BFR. Just the total encoded size of the tree needs
to fit into an appropriate maximum header field size. And if the target tree is too large,
then it can arbitrarily be broken up into overlapping subtrees - all originating at the
sender, but each only delivering to a subset of BFER small enough so the encoded tree
fits into the target packet header size. And none of these optimization have to happen
at network configuration time by seeding optimized BIFT, but it happens when building
an RBS address on on ingres router or with the help of a controller.</t>

<t>The RBS encoding is called recursive, because it consists of such a local BitString
for the first BFR of the tree (BFIR), followed by a sequence of RBS sub-trees, one for
each adjacent BFR whose BP is set in the first BFR BitString. Whenever a packet is
forwarded to such an adjacent BFR, the RBS addressing information is appropriately
updated such that that BFR will only have to examine the local BitString for that BFR.
In result, every BFR in RBS only has to examine - like in BIER and BIER-TE a single
BitString. What really changes is that instead of clearing bits in a flat bitstring as
done in BIER/BIER-TE, every hop advances the decoding othe RBS address structure to look
at a differnt, small local BitString.</t>

</section>
</section>
<section anchor="arch"><name>RBS Network Architecture</name>

<section anchor="controller-centric"><name>Controller centric</name>

<t>RBS may simply use the same network architecture as BIER-TE
as shown in <xref target="FIG-ARCH"/>, and operations of the Controller 
is significantly simplified because the complex allocation of
BP across SI, especially the allocation of BP for transit
adjacencies is eliminated.</t>

<figure title="RBS Architecture with Controller" anchor="FIG-ARCH"><artwork><![CDATA[
                    Optional
   |<-IGMP/PIM->  multicast flow   <-PIM/IGMP->|
                     overlay

                    [Controller] 
control plane   .  ^      ^     ^   
               .  /       |      \     BIFT configuration
     ..........  |        |       |    per-flow RBS setup
    .            |        |       |   
   .             v        v       v
Src (-> ... ) -> BFIR-----BFR-----BFER -> (... ->) Rcvr

                |<----------------->|
             RBS-address forwarding plane

 |<.............. <- RBS domain ---> ...............|

              |<--------------------->|
              Routing underlay (optional)
]]></artwork></figure>

</section>
<section anchor="distributeddecentralized"><name>Distributed/Decentralized</name>

<t>Instead of a controller centric network architecture, RBS also lends itself
to a distributed/decentralized model, similar to the typical deployment model
of BIER, with extensions to a link-state IGP routing protocol.</t>

<t>Every BFR can autoamtically allocate its BFR neighbors and derive the size
of its local BitString and allocation of BP to each neighbor from it. This
is then signalled via appropriate link-state IGP extensions.</t>

<t>BFIR can derive not only the hop-by-hop paths towards BFER from this IGP information,
but also the necessary local BitString for each BFR on a tree. In the most simple
cae, these paths are the shorted-paths normally calculated by link-state IGP,
but for traffic-engineering purposes, this can easily include all type of
constrained path calculations.</t>

<t>It is this model that would be attractive, when there are no tree engineering /
traffic engineering requirements, but RBS is simply used to replace flat bitstrings
for BIER to simplify its operations and (depending on size / topology of network)
improve its scale / performance.</t>

</section>
<section anchor="host-to-host"><name>Host-to-host</name>

<t>To eliminate the need for an IP Multicast flow overlays and allow
utilization of benefits of bitstring addressing at the application level
(e.g.: eliminating group membership management for the network), the
 RBS domain may extend all the way into Sender/Receiver
hosts. This is possible with BIER/BIER-TE as well, but when the
total numer of sender/receiver hosts is for example a factor 10 larger
than the number of BFR in BIER, then the elimination of the network wide
SI/BP allocation issue of BIER/BIER-TE could help to make this model
easier deployable with RBS than with BIER-TE/BIER.</t>

<t>To avoid dependencies against initial operating system level network stack
upgrades on hosts, such deployment option could for example be
introduced by tunneling the RBS packets over UDP to first-hop BFIR/BFER
as well as appropriate routing / controller plane extensions.</t>

</section>
</section>
<section anchor="fwd-overview"><name>Overview</name>

<t>This section gives a more thourough run through the life
of a packet forwarded with an RBS address.</t>

<section anchor="example"><name>Example</name>

<t><xref target="FIG-RBS-Topo1"/> shows the example network topology.
R1 has network connections to R2, R3, R4, R5 (not shown) and R6.
R3 and R4 have connections to R1, R7, R8, R9 and R10.
R9 has connections to R3, R4, and further, not shown routers.
For the purpose of explaining RBS, it is irrelevant whether those
connections are separate L2 point-to-point links or adjacencies on shared LANs.</t>

<t>The example multicast tree encoded as an RBS address utilizing
topology informtion as explained in <xref target="arch"/> is
R1 -&gt; (R2, R3 -&gt; (R7), R4 -&gt; (R9 -&gt; (...), R10), R6): The packet
originates in the trees root R1, which needs to form the appropriate
packet header with this trees RBS address and replicate the packet to
R2, R3, R4 and R6. R2, R4 and R6 should receive the packet as domain
egres routers. R3 should only replicate the pcket to R7, and R7 should
replicate the packet to R9 and R10. R10 should only receive the packet,
R9 should receive the packet and further replicate it to further routers
not shown.</t>

<figure title="Example Topology/RBS tree" anchor="FIG-RBS-Topo1"><artwork><![CDATA[
                +---+
                |R1 | (root)
                +-+-+           
            ...........................
     .......    .           .          .
  ...           .            .          ....
  |             |            |            |
+-v-+         +-v-+        +-v-+ (rcvr/ +-v-+
| R2| (rcvr)  |R3 |(vertex)|R4 | leaf)  |R6 | (rcvr)
+-+-+         +---+        +---+        +---+
                .            .
     .................................
  ...           .         .        .....
  |             |         |            |
+-v-+         +-v-+     +-v-+        +-v-+
|R7 | (recvr) |R8 |     |R9 |(rcvr/  |R10| (rcvr)
+-+-+         +---+     +---+ vertex +---+
                          .
                        .....
                    .... more vertex/leaves...
]]></artwork></figure>

<t>R7, R10 and some MSER behind R9. Given how R7, R8, R8, R10 and
the router behind R9 can be reached via both either R3 and R4, this
tree involves an explicit packet steering and replication (tree engineering)
choice of using R3 instead of R4 to reach R7, and R4 instead of R3
to reach R9, R10 (and routers below R9).</t>

</section>
<section anchor="rbs-bift"><name>RBS-BIFT</name>

<t>Every router has an RBS "Bit Index Forwarding Table" (RBS-BIFT) that defines
which BitPosition (BP) (1..N) indicates which adjacency.
<xref target="FIG-RBS-R1-BIFT"/>, shows the example RBS-BIFT for R1.</t>

<figure title="BIFT on R1" anchor="FIG-RBS-R1-BIFT"><artwork><![CDATA[
+--+-------+----------+
|BP|R Flag | Adjacency|
+--+-------+----------+
| 1|      0|   receive|
+--+-------+----------+
| 2|      0|       R2 |
+--+-------+----------+
| 3|      1|       R3 |
+--+-------+----------+
| 4|      1|       R4 |
+--+-------+----------+
| 5|      0|       R5 |
+--+-------+----------+
| 6|      0|       R6 |
+--+-------+----------+
]]></artwork></figure>

<t>The "receive" adjacency is the BP indicating that the
packet is to be received by the router itself. The (R)ercursive
flag indicates whether the adjacency when set in the BitString
of an RBS address will have a subtree (Recursive Unit, see below)
associated with it.</t>

<t>The absence of the R flag allows for more compact RBS encodings 
or adjacencies that for the purpose of RBS are not used for transit.
In the example, R2, R5 and R6 are connected to R1 but also leaf router in
the topology.  Hence they have R=0 in the RBS-BIFT of R1.</t>

</section>
<section anchor="rbs-address"><name>RBS Address</name>

<t>The RBS address as shown in <xref target="FIG-RBSA"/> consists of 
RU-Length, RU-Offset and RecursiveUnit0. Depending on packet header
encoding, these fields do not need to be encoded squentially.</t>

<t>A RecursiveUnit (RU) is the unit of data processed by a particular
router Rx on the multicast tree encoded by the RBS address. RU0 is
the RU processed by the root of the tree. An RU consists of
the BitString whose length is the length of the RBS-BIFT of Rx, followed
by (N-1) AddressFields and N RUs. N is the number of BP set in BitString
with R=1 flag set - e.g. which do need an RU in the RBS address.
Each AddressField indicates the length of one RU. 
There are only N-1 AF for N RU because the length of the N'th
RU can be derived by calculation, saving for every router on the
tree one AF field, and therefore resulting in a more compact encoding.</t>

<t>RU-Offset indicates the offset of the current RU from the start of
RU0. '$' in <xref target="FIG-RBSA"/> is the first bit of RU0, and a value of
RU-Offset=0 indicates that the RU starts at '$' - and is therefore RU0.</t>

<t>For every copy of an RBS packet made by a router, RU-Offset and RU-Length
are updated. None of the other fields of the RBS-Address are modified for
RBS forwarding.</t>

<figure title="RBS Address" anchor="FIG-RBSA"><artwork><![CDATA[
       +----------------------+
       | RU-Length            |
       +----------------------+
       | RU-Offset            |
       +----------------------+
       |$ RecursiveUnit0 (RU0)|
       +----------------------+
      .                       .
 .....                         ................
.                                              .
+-----------+-----+     +--------+---+     +----+
| BitString | AF1 | ... | AF(n-1)|RU1| ... |RU N|
+-----------+-----+     +--------+---+     +----+
]]></artwork></figure>

</section>
<section anchor="processing-on-r1-in-the-example"><name>Processing on R1 in the example</name>

<t>In the example, the root of the tree is is R1, so the BitString
of RU0 is as shown in <xref target="FIG-R1"/></t>

<figure title="RU for R1 (RU0)" anchor="FIG-R1"><artwork><![CDATA[
  BitString (of RU0)
 1 2 3 4 5 6 
+-+-+-+-+-+-+-..-+...+...+
|0|1|1|1|0|1|AF1 |RU1|RU2|
+-+-+-+-+-+-+-..-+...+...+
]]></artwork></figure>

<t>When RBS forwarding in a router processes the RBS address, the
length of the BitString is known from the length of the RBS-BIFT.
In the case of R1 it is therefore known to be 6 bits long.</t>

<t>Two of the BP set in the BitString, BP3 for R3 and for R4
have R=1 in the RBS-BIFT of R1, therefore (N-1)=1 AF field must follow
and N=2 RU must follow in the RBS address for RU0 - one for R3,
one for R4.</t>

<t>When R1 creates packet copies to R3 and R4, it will rewrite
RU-Length and RU-Offset accordingly, so that RU-offset will
point to RU1 for the packet towards R3 and to RU2 for the
packet towards R4, and RU-Length indicates the length of RU1
or RU2.</t>

<t>This forwarding process repeats on every hop along the tree.
When a packet copy is made on a BP with R=0, RU-Length is set
to 0. When such a packet copy is received, it indicates that
no further RU lookup is required, and the packet is only
received - same as processing for a receive BU.</t>

</section>
</section>
<section anchor="specification"><name>Specification</name>

<section anchor="rbs-address-1"><name>RBS Address</name>

<t>Any RBS router MUST support to parse its RU with AF entries that are 8
bit in size.  Any RBS routers SHOULD support to decode a variable length
AF encoding, where 0XXXXXXX (8-bit length AF field) is used to encode a
7-bit XXXXXXX (0..127) values, and where 1XXXXXXXXXXXX is used to
encode an 12-bit value XXXXXXXXXXX. All values indicate the size of an RU
in bits, therefore allowing up to 4096 bit long RU.</t>

<t>An RBS router MUST support processing the BitString size of its configured RBS-BIFT
(see <xref target="bift-size"/>).</t>

<t>RBS routers MUST suport RU-Length and RU-Offset encodings of 12 bits.</t>

</section>
<section anchor="bift-size"><name>RBS-BIFT</name>

<t>An Router must support for its RBS-BIFT to be configured with a number of entries
ranging between min(k,1024), where k is an implementation specific number, no
less than the number of physical interfaces on the router.</t>

<t>The leftmost bit in an RBS RU Bitstrings is RBS-BIFT entry 1.</t>

<t>The type of adjacencies to be supported depend on the encapsulation and
are out of scope.</t>

</section>
<section anchor="rbs-address-creation"><name>RBS address creation</name>

<t>Upon creation of the RBS header with an RBS-Address, RU-Length MUST be 
set to the length of RU0 and RU-offset is set to 0.</t>

</section>
<section anchor="common"><name>Common RBS processing</name>

<t>Whether a header with an RBS address is created/imposed on the root of an
RBS tree or received from another RBS router, encapsulation independent
processing of the packet by RBS forwarding is the same.</t>

<t>Parsing RBS-Address, generating copies and rewriting RU-Length and RU-Offset for
each copy is formally described in <xref target="pseudocode"/></t>

</section>
<section anchor="reciving-rbs-packets"><name>Reciving RBS packets</name>

<t>When a packet copy is received with RU-Length=0, the packet is "received" -
it is passed up the stack to an appropriate receiving entity based on the
encapsulation parameters.</t>

<t>When a packet copy is made for a receive BP, its RU-Length is set to 0 and
the packet is processed as if it was received with RU-Length=0.</t>

</section>
<section anchor="encapsulation-considerations"><name>Encapsulation considerations</name>

<t>The total length of an RBS address is not included in the definition of an
RBS address here. This length is assumed to be provided by some other packet
header field, because it is not required to parse an RBS address itself, but is
only required to parse beyond an RBS address in a packet header by an RBS
unaware parser. The field that carries RU0 may be larger (for example due to
padding) than RU0 itself without problems for the RBS parsing/processing described here.</t>

<t>Additional forwarding rules may be established by specific encapsulations
such as BIER OAM processing steps when using BIER with RFC8296 encapsulation.</t>

<t>Given how the processing of the RBS address describes a naturally loop-free
rewrite operation, no further loop-prevention mechanism is required in packet
processing with RBS addresses, but no harm is done if this is still performed
(on appropriate header TTL fields independent of RBS).</t>

</section>
<section anchor="pseudocode"><name>RBS forwarding Pseudocode</name>

<t>The following RBS forwarding (derived from C language) pseudocode assumes all pointers
(and dereferencing them) are using bit-accurate addresses so that of calculation of
starting bit addresses of address fields and RU in RU0 can be shown with
as simple code as if byte addressing for pointers was used.  byte addressing of
pointers was used. This is NOT supported by C language!</t>

<figure title="RBS forwarding Pseudocode" anchor="FIG-PSEUDOCODE"><artwork><![CDATA[
void ForwardRBS(Packet)
{
  // parse bit accurate addresses of RBS address fields in Packet into
  // RBS.{RULength,RUOffset,RU0}
  RBS = ParseRBSAddress(Packet); 

  if(*(RBS.RULength) == 0) return ReceiveRBS(Packet);
  RU  = RBS.RU0 + *(RBS.RUOffset);
  RUL = *(RBS.RULength);

  BitStringA = RU
  AddressingField =  BitStringA + BIFT.entries;

  // [1] calculate number of R=1 BP set in BitString
  CopyBitString(*BitStringA, *RecursiveBits, BIFT.entries);
  And(*RecursiveBits,*BIFTRecursiveBits, BIFT.entries);
  N = CountBits(*RecursiveBits, BIFT.entries);

  // Start of first RecursiveUnit in RBS address
  // After AddressingField array with 8-bit length fields
  RecursiveUnit = AddressingField + (N - 1) * 8;

  RemainLength = *(RBS.RULength);
  Index = GetFirstBitPosition(*BitStringA);
  while (Index) {
    PacketCopy = Copy(Packet);
    RBSc = ParseRBSAddress(PacketCopy)
    if (BIFT.BP[Index].adjacency == receive)
      *(RBSc.RULength) = 0;
      ReceiveRBS(PacketCopy);
      next;
    }

    If (BIFT.BP[Index].recursive) {
      if(N == 1) {
        RecursiveUnitLength = RemainLength;
      } else {
        RecursiveUnitLength = *AddressingField;
        N--;
        AddressingField += 8;
        RemainLength -= RecursiveUnitLength;
        RemainLength -= 8; // 8 bit of AddressingField
      }
      *(RBSc.RUOffset) = RecursiveUnit - RU0
      *(RBSc.RULength) = RecursiveUnitLength
      RecursiveUnit += RecursiveUnitLength;
    } else {
      *(RBSc.RUOffset) = 0
      *(RBSc.RULength) = 0
      *(MSR6c.SegmentsLeft) -= 1
    }
    Forward(PacketCopy)
    Index = GetNextBitPosition(*BitStringA, Index);
  }
}
]]></artwork></figure>

<t>Explanations for <xref target="FIG-PSEUDOCODE"/>.</t>

<t>ForwardRBS(Packet) processes the RBS address independent
of its encapsulation. ParseRBSAddress(Packet) parses the
header of Packet to create a list of bit-accurate pointers to
the elements of an RBS address: RBS.{RULength,RUOffset,RU0}.</t>

<t>BitStringA is the address of the RBS address BitString in Packet.
Other variables use names matching those from the packet header
figures (without " -_").</t>

<t>The BFR local BIFT has a total number of BIFT.entries
addressable BP 1...BIFTentries. The BitString therefore
has BIFT.entries bits.</t>

<t>BIFT.RecursiveBits is a BitString pre-filled by the control
plane with all the BP with the recursive flag set. This is constructed
from the Recursive flag setting of the BP of the BIFT. The
code starting at [1] therefore counts the number of
recursive BP in the packets BitString.</t>

<t>Because the AddressingField does not have an entry for the
last (potentially only) RecursiveUnit, its length has to be calculated
By subtracting the length of the prior N-1 RecursiveUnits from
RULength as received. This is done via variable RemainLength.</t>

<t>For every PacketCopy that is to be forwarded, the RU-Length  and RU-Offset
fields are updated.</t>

</section>
</section>
<section anchor="using-rbs-with-bier-and-rfc8296-encapsulation"><name>Using RBS with BIER and RFC8296 encapsulation</name>

<t>RBS can be used in a BIER domain by introducing as a per-subdomin mode of forwarding,
exactly the same as <xref target="RFC8279"/> (non-TE) BIER and <xref target="RFC9262"/> BIER-TE can co-exist in a BIER.</t>

<t>In BIER deployments, RBS can most easily replace BIER-TE, and using a centralized controller
and therefore simplify and esier scale deployment of tree engineering. RBS should also
be able to replace BIER in networks with link-state routing protocols and reduce the
number of replicated packets in large networks. This requires as aforementioned the
change from hop-by-hop routing to sourc-routing.</t>

<t>When using BIER, RBS routers are BFR, RBS ingres routers are BFIR, RBS egres routers are BFER.
Routers may support multiple RBS-BIFT through different BIFT-ID or SI. This may be useful
when specific constructs such as slices of the network are only allowed to use a subset
of the adjacencies of the network.</t>

<t>The RBS address is encoded as a binary string concatenating {RULenth,RUOffset,RU0} into the
BitString field in <xref target="RFC8296"/> packet headers.  Without changes to <xref target="RFC8296"/>, the length of this
field has to be a power of 2 sized. The RBS address SHOULD be zero-padded to the size used.</t>

<t>In BIER, the BitStringLength (BSL) expects to indicate different BIFT. When using RBS addresses,
it SHOULD be possible for all supported BSL to refer to the same RBS-BIFT, so that upon
imposition of an RBS-Address the smallest power of 2 BitString size can be used without
duplication of BIFT state on routers.</t>

<t>TBD: This description does not outline, how much of existing BIER IGP extensions could be
reused with RBS and how.</t>

</section>
<section anchor="security-considerations"><name>Security considerations</name>

</section>
<section anchor="acknowledgements"><name>Acknowledgements</name>

<t>This work is based on the design published by Sheng Jiang, Xu Bing, Yan Shen, Meng Rui, Wan Junjie and Wang Chuang {jiangsheng|bing.xu|yanshen|mengrui|wanjunjie2|wangchuang}@huawei.com, see <xref target="CGM2Design"/>.
Many thanks for Bing Xu (bing.xu@huawei.com) for editorial work on the prior variation of this work <xref target="I-D.xu-msr6-rbs"/>.</t>

</section>
<section anchor="changelog"><name>Changelog</name>

<t>[RFC-editor: please remove]</t>

<t>This document is written in https://github.com/cabo/kramdown-rfc2629 markup language.
This documents source is maintained at https://github.com/toerless/rbs,
please provide feedback to the bier@ietf.org and/or msr6@ietf.org mailing list and submit an Issue
to the GitHub.</t>

<t>This draft is derived from and superceeds <xref target="I-D.eckert-bier-cgm2-rbs"/> as follows:</t>

<t><list style="symbols">
  <t>Removes larger architectural context (CGM2) and refocusses on only RBS.</t>
  <t>Add explanation about possible distributed/decentralized control plane via
link-state IGP to complement the central controller based approach.</t>
  <t>Define its procedures independent of specific
architectures such as BIER wih RFC8296 encapsulation or proposed MSR encoding.</t>
  <t>Inherits the RBS specific improvements originally introduced with  <xref target="I-D.eckert-msr6-rbs"/>.
RU-Length and RU-Offset to avoid rewriting complete RBS address with the RU of the next
hop and instead just updating these two indices when forwarding RBS address.</t>
  <t>Adds specific proposed encapsulation details for BIER.</t>
</list></t>

</section>


  </middle>

  <back>


    <references title='Normative References'>





<reference anchor='RFC8279' target='https://www.rfc-editor.org/info/rfc8279'>
<front>
<title>Multicast Using Bit Index Explicit Replication (BIER)</title>
<author fullname='IJ. Wijnands' initials='IJ.' role='editor' surname='Wijnands'><organization/></author>
<author fullname='E. Rosen' initials='E.' role='editor' surname='Rosen'><organization/></author>
<author fullname='A. Dolganow' initials='A.' surname='Dolganow'><organization/></author>
<author fullname='T. Przygienda' initials='T.' surname='Przygienda'><organization/></author>
<author fullname='S. Aldrin' initials='S.' surname='Aldrin'><organization/></author>
<date month='November' year='2017'/>
<abstract><t>This document specifies a new architecture for the forwarding of multicast data packets.  It provides optimal forwarding of multicast packets through a &quot;multicast domain&quot;.  However, it does not require a protocol for explicitly building multicast distribution trees, nor does it require intermediate nodes to maintain any per-flow state. This architecture is known as &quot;Bit Index Explicit Replication&quot; (BIER).  When a multicast data packet enters the domain, the ingress router determines the set of egress routers to which the packet needs to be sent.  The ingress router then encapsulates the packet in a BIER header.  The BIER header contains a bit string in which each bit represents exactly one egress router in the domain; to forward the packet to a given set of egress routers, the bits corresponding to those routers are set in the BIER header.  The procedures for forwarding a packet based on its BIER header are specified in this document.  Elimination of the per-flow state and the explicit tree-building protocols results in a considerable simplification.</t></abstract>
</front>
<seriesInfo name='RFC' value='8279'/>
<seriesInfo name='DOI' value='10.17487/RFC8279'/>
</reference>



<reference anchor='RFC8296' target='https://www.rfc-editor.org/info/rfc8296'>
<front>
<title>Encapsulation for Bit Index Explicit Replication (BIER) in MPLS and Non-MPLS Networks</title>
<author fullname='IJ. Wijnands' initials='IJ.' role='editor' surname='Wijnands'><organization/></author>
<author fullname='E. Rosen' initials='E.' role='editor' surname='Rosen'><organization/></author>
<author fullname='A. Dolganow' initials='A.' surname='Dolganow'><organization/></author>
<author fullname='J. Tantsura' initials='J.' surname='Tantsura'><organization/></author>
<author fullname='S. Aldrin' initials='S.' surname='Aldrin'><organization/></author>
<author fullname='I. Meilik' initials='I.' surname='Meilik'><organization/></author>
<date month='January' year='2018'/>
<abstract><t>Bit Index Explicit Replication (BIER) is an architecture that provides optimal multicast forwarding through a &quot;multicast domain&quot;, without requiring intermediate routers to maintain any per-flow state or to engage in an explicit tree-building protocol.  When a multicast data packet enters the domain, the ingress router determines the set of egress routers to which the packet needs to be sent.  The ingress router then encapsulates the packet in a BIER header.  The BIER header contains a bit string in which each bit represents exactly one egress router in the domain; to forward the packet to a given set of egress routers, the bits corresponding to those routers are set in the BIER header.  The details of the encapsulation depend on the type of network used to realize the multicast domain.  This document specifies a BIER encapsulation that can be used in an MPLS network or, with slight differences, in a non-MPLS network.</t></abstract>
</front>
<seriesInfo name='RFC' value='8296'/>
<seriesInfo name='DOI' value='10.17487/RFC8296'/>
</reference>



<reference anchor='RFC9262' target='https://www.rfc-editor.org/info/rfc9262'>
<front>
<title>Tree Engineering for Bit Index Explicit Replication (BIER-TE)</title>
<author fullname='T. Eckert' initials='T.' role='editor' surname='Eckert'><organization/></author>
<author fullname='M. Menth' initials='M.' surname='Menth'><organization/></author>
<author fullname='G. Cauchie' initials='G.' surname='Cauchie'><organization/></author>
<date month='October' year='2022'/>
<abstract><t>This memo describes per-packet stateless strict and loose path steered replication and forwarding for &quot;Bit Index Explicit Replication&quot; (BIER)  packets (RFC 8279); it is called &quot;Tree Engineering for Bit Index Explicit Replication&quot; (BIER-TE) and is intended to be used as the path steering mechanism for Traffic Engineering with BIER.</t><t>BIER-TE introduces a new semantic for &quot;bit positions&quot; (BPs). These BPs indicate adjacencies of the network topology, as opposed to (non-TE) BIER in which BPs indicate &quot;Bit-Forwarding Egress Routers&quot; (BFERs).  A BIER-TE &quot;packets BitString&quot; therefore indicates the edges of the (loop-free) tree across which the packets are forwarded by BIER-TE. BIER-TE can leverage BIER forwarding engines with little changes. Co-existence of BIER and BIER-TE forwarding in the same domain is possible -- for example, by using separate BIER &quot;subdomains&quot; (SDs). Except for the optional routed adjacencies, BIER-TE does not require a BIER routing underlay and can therefore operate without depending on a routing protocol such as the &quot;Interior Gateway Protocol&quot; (IGP).</t></abstract>
</front>
<seriesInfo name='RFC' value='9262'/>
<seriesInfo name='DOI' value='10.17487/RFC9262'/>
</reference>




    </references>

    <references title='Informative References'>




<reference anchor='I-D.eckert-msr6-rbs'>
   <front>
      <title>Recursive Bitstring Structure (RBS) for Multicast Source Routing over IPv6 (MSR6)</title>
      <author fullname='Toerless Eckert' initials='T. T.' surname='Eckert'>
         <organization>Futurewei Technologies USA</organization>
      </author>
      <author fullname='Xuesong Geng' initials='X.' surname='Geng'>
         <organization>Huawei 2012 NT Lab</organization>
      </author>
      <author fullname='Xiuli Zheng' initials='X.' surname='Zheng'>
         <organization>Huawei 2012 NT Lab</organization>
      </author>
      <author fullname='Rui Meng' initials='R.' surname='Meng'>
         <organization>Huawei 2012 NT Lab</organization>
      </author>
      <author fullname='Fengkai Li' initials='F.' surname='Li'>
         <organization>Huawei 2012 NT Lab</organization>
      </author>
      <date day='11' month='July' year='2022'/>
      <abstract>
	 <t>   This document defines an encoding and corresponding packet processing
   procedures for native IPv6 multicast source routing (MSR6) using a
   so-called &quot;Recursive Bitstring&quot; (RBS) address structure.

   The RBS address structure encodes the source-routed multicast tree as
   a tree of bitstrings.  Each router on the tree only needs to examine
   and perform replication for the one bitstring destined for it.

   The MSR6/RBS IPv6 extension header encoding and processing is modeled
   after that of unicast source routing headers, RFC6554 and RFC8754,
   and shares all elements that can be shared.  To support the RBS
   structure, it is replacing the &quot;Segments Left&quot; pointer to the next
   segment with two fields to point to the next sub-tree to parse.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-eckert-msr6-rbs-00'/>
   <format target='https://www.ietf.org/archive/id/draft-eckert-msr6-rbs-00.txt' type='TXT'/>
</reference>


<reference anchor='I-D.xu-msr6-rbs'>
   <front>
      <title>RBS(Recursive BitString Structure) for Multicast Source Routing over IPv6</title>
      <author fullname='Bing Xu' initials='B.' surname='Xu'>
         <organization>Huawei</organization>
      </author>
      <author fullname='Xuesong Geng' initials='X.' surname='Geng'>
         <organization>Huawei</organization>
      </author>
      <author fullname='Toerless Eckert' initials='T. T.' surname='Eckert'>
         <organization>Futurewei Technologies</organization>
      </author>
      <date day='30' month='March' year='2022'/>
      <abstract>
	 <t>   This document defines a new type of segment: End.RBS, and the
   corresponding packet processing procedures over the IPv6 data plane
   for the MSR6(Multicast Source Routing over IPv6) TE solutions.


	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-xu-msr6-rbs-01'/>
   <format target='https://www.ietf.org/archive/id/draft-xu-msr6-rbs-01.txt' type='TXT'/>
</reference>


<reference anchor='I-D.eckert-bier-cgm2-rbs'>
   <front>
      <title>Carrier Grade Minimalist Multicast (CGM2) using Bit Index Explicit Replication (BIER) with Recursive BitString Structure (RBS) Addresses</title>
      <author fullname='Toerless Eckert' initials='T. T.' surname='Eckert'>
         <organization>Futurewei Technologies USA</organization>
      </author>
      <author fullname='Bing Xu' initials='B.' surname='Xu'>
         <organization>Huawei Technologies (2012Lab)</organization>
      </author>
      <date day='9' month='February' year='2022'/>
      <abstract>
	 <t>   This memo introduces the architecture of a multicast architecture
   derived from BIER-TE, which this memo calls Carrier Grade Minimalist
   Multicast (CGM2).  It reduces limitations and complexities of BIER-TE
   by replacing the representation of the in-packet-header delivery tree
   of packets through a &quot;flat&quot; BitString of adjacencies with a
   hierarchical structure of BFR-local BitStrings called the Recursive
   BitString Structure (RBS) Address.

   Benefits of CGM2 with RBS addresses include smaller/fewer BIFT in
   BFR, less complexity for the network architect and in the CGM2
   controller (compared to a BIER-TE controller) and fewer packet copies
   to reach a larger set of BFER.

   The additional cost of forwarding with RBS addresses is a slightly
   more complex processing of the RBS address in BFR compared to a flat
   BitString and the novel per-hop rewrite of the RBS address as opposed
   to bit-reset rewrite in BIER/BIER-TE.

   CGM2 can support the traditional deployment model of BIER/BIER-TE
   with the BIER/BIER-TE domain terminating at service provider PE
   routers as BFIR/BFER, but it is also the intention of this document
   to expand CGM2 domains all the way into hosts, and therefore
   eliminating the need for an IP Multicast flow overlay, further
   reducing the complexity of Multicast services using CGM2.  Note that
   this is not fully detailed in this version of the document.

   This document does not specify an encapsulation for CGM2/RBS
   addresses.  It could use existing encapsulations such as [RFC8296],
   but also other encapsulations such as IPv6 extension headers.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-eckert-bier-cgm2-rbs-01'/>
   <format target='https://www.ietf.org/archive/id/draft-eckert-bier-cgm2-rbs-01.txt' type='TXT'/>
</reference>


<reference anchor="CGM2Design" target="https://github.com/BingXu1112/CGMM/blob/main/Novel%20Multicast%20Protocol%20Proposal%20Introduction.pptx">
  <front>
    <title>Novel Multicast Protocol Proposal Introduction</title>
    <author initials="S." surname="Jiang" fullname="Sheng Jiang">
      <organization></organization>
    </author>
    <author initials="B. (Robin)" surname="Xu" fullname="Bing (Robin) Xu">
      <organization></organization>
    </author>
    <author initials="Y." surname="Shen" fullname="Yan Shen">
      <organization></organization>
    </author>
    <author initials="M." surname="Rui" fullname="Meng Rui">
      <organization></organization>
    </author>
    <author initials="W." surname="Junjie" fullname="Wan Junjie">
      <organization></organization>
    </author>
    <author initials="W." surname="Chuang" fullname="Wang Chuang">
      <organization></organization>
    </author>
    <date year="2021" month="October" day="10"/>
  </front>
</reference>


    </references>


<section anchor="high-speed-implementation-considerations"><name>High-speed implementation considerations</name>

<t>RBS was designed with high-speed, low-cost forwarding hardware and possible backward compatibility
with potentially existing flat-bitstring look-up and replication hardware in mind.</t>

<t>Because RBS requires to only perform replication on each router on a single
bitstring, it could be possible to reuse existing bitstring replication hardware,
or design future hardware such that it supports BIER, BIER-TE and RBS bitstrings.</t>

<t>The calculations required to process an RBS header are the added complexity of
processing RBS packets are the additional new cost of RBS. It has to be seen
whether / how these are feasible at the low-end of high-speed forwarding plane
hardware, especially P4. Further optimizations to reduce calculations are possible,
but at the expense of compression of the RBS address.</t>

<t>RBS also minimizes write-cycles to packet memory by only requiring per-packet-copy
rewrites of the RU-Length and RU-Offset fields. With mandatory encoding of 12
bits each, these are 24 bits to rewrite and should therefore be causing minimal
cost with todays high-speed forwarding hardware.</t>

</section>
<section anchor="complete-rbs-example"><name>Complete RBS example</name>

<t>TBD: Need to rewrite more elaborete multi-hop example from <xref target="I-D.eckert-bier-cgm2-rbs"/> with RU-Offset, RU-Length.</t>

</section>
<section anchor="replication-efficiency-performance-considerations"><name>Replication efficiency performance considerations</name>

<t>This section discusses in more detail the number of packets
required to reach a set of receivers when using flat bitstrings
vs. RBS addresses. The first sub-section gives a hopefully
simple to understand theoretical topology example, the second
sub-section presents initial results of a real-world, large-network
simulation.</t>

<section anchor="reducing-number-of-duplicate-packet-copies"><name>Reducing number of duplicate packet copies</name>

<t>If the total size of an RBS encoded delivery tree is
larger than a supported maximum RBS header size, then
the CGM2 controller simply needs to divide the tree
into multiple subtrees, each only addressing a part
of the BFER (leaves) of the target tree and pruning
any unnecessary branches.</t>

<figure title="Simple Topology Example" anchor="FIG-SMPLT"><artwork><![CDATA[
             B1
            /  \
      B2    B3
        /   \  /  \
       /     \/    \
     B4      B5     B6
   /..|     /  \    |..\
B7..B99  B100..B200 B201...B300
]]></artwork></figure>

<t>Consider the simple topology in <xref target="FIG-SMPLT"/> and a multicast packet
that needs to reach all BFER B7...B300. Assume that
the desired maximum RBM header size is such that a
RBS address size of &lt;= 256 bits is desired. The CGM2
controller could create an RBS address
B1=&gt;B2=&gt;B4=&gt;(B7..B99), for a first packet, an
RBS address B1=&gt;B3=&gt;B5=&gt;(B100..B200) for a second
packet and a third RBS address B1=&gt;B3=&gt;B6=&gt;B201...B300.</t>

<t>The elimination of larger BIFT state in BFR
through multiple SI in BIER/BIER-TE does come at
the expense of replicating initial hops of a tree
in RBS addresses, such as in the example the encoding
of B1=&gt;B3 in the example.</t>

<t>Consider that the assignment of BFIR-ids with BIER
in the above example is not carefully engineered. It is
then easily possible that the BFR-ids for B7..B99 are not
sequentially, but split over a larger BFIR-id space.
If the same is true for all BFER, then it is possible
that each of the three BFR B4,B5 and B6 has attached
BFER from three different SI and one may need to send
for example three multiple packets to B7 to
address all BFER B7..B99 or to B5 to address all
B100..B200 or B6 to address all B201...B300. These
unnecessary duplicate packets across B4, B5 or B6 are
because of the addressing principle in BIER and are not
necessary in CGM2, as long as the total length of an RBS
address does not require it.</t>

</section>
<section anchor="analysis"><name>Statistical Analysis of performance gain with CGM2</name>

<t>TBD: Comparison of number of packets/header sizes required
in large real-world operator topology between BIER/BIER-TE and CGM2.
Analysis: Gain in dense topology</t>

<t>Topology description:
1. Typical topology of Beijing Mobile in China.
2. All zones dual homing access to backbone.
3. Core layer: 4 nodes full mesh connected
4. Aggregation layer: 8 nodes are divided into two layers, with full interconnection between the layers and dual homing access to the core layer on the upper layer.
5. Aggregation rings: 8 rings, 6 nodes per ring
6. Access rings: 3600 nodes, 18 nodes per ring</t>

<figure title="Validation Topology" anchor="FIG-TOPO"><artwork><![CDATA[
                  ┌──────┐          ┌──────┐
                  │      ├──────────┤      │
                 /└──────┘\        /└──────┘\   Interconnected
                /   / | \  \      /  / | \   \   BackBone
       ┌──────┐/   /  |  \  \    /  /  |  \   \┌──────┐
       │      │   /   |   \  \  /  /   |   \   │      │
       └───┬──┘  /    |    \  \/  /    |    \  └─┬────┘
           │    /     |     \ /\ /     |     \   │
        ┌──┴───┐      |      /  \      |      ┌──┴───┐
        │      │------------+ \/ +------------│      │
        └──────┘\     |       /\       |     /└──────┘
                 \    |      /  \      |    /
                  \ ┌──────┐/    \┌──────┐ /
                   \│      ├──────┤      │/
                    └───┬──┘      └───┬──┘
                        │   \     /   │  Dual Return Access
                        │    \   /    │
                        │     \ /     │
                        │      /      │
                        │     / \     │
                      ┌─┴───┐/   \┌───┴─┐
                      │     ├─────┤     │
                      └─┬───┘\   /└───┬─┘
                        │     \ /     │  Core Layer
                        │      /      │
                        │     / \     │
                      ┌─┴───┐/   \┌───┴─┐
                     /│     ├─────┤     │\
                    / └──┬──┘\   /└──┬──┘ \
                   /     │\   \ /   /│     \   Zone1
                  /      │ \   \   / │      \
                 /       │  \ / \ /  │       \
                /   +----│---+   +---│----+   \
               /   /     │    \ /    │     \   \
              /   /      │     +     │      \   \
             /   /       │    / \    │       \   \
           ┌───┐/       ┌┴──┐/   \┌──┴┐       \┌───┐
           │   │\      /│   │     │   │\      /│   │
           └─┬─┘ \    / └─┬─┘\   /└─┬─┘ \    / └─┬─┘  Aggregation
             │    \  /    │   \ /   │    \  /    │    Layer
             │     \/     │    /    │     \/     │
             │     /\     │   / \   │     /\     │
           ┌─┴─┐  /  \  ┌─┴─┐/   \┌─┴─┐  /  \  ┌─┴─┐
           │   │--    --│   │     │   │--    --│   │
           └───┘        └───┘\   /└───┘\       └───┘
                        / | \ \ /  / |  \
                       /  |  \ \  /  |   \
                      /   |   / \/   |    \
                     / +--|--+ \/+---|---+ \
                    / /   |    /\    |    \ \
                 ┌───┐   ┌┴──┐/  \┌───┐   ┌───┐   ASBR
                 │   │   │   │    │   │   │   │
                 └─┬─┘   └─┬─┘    └─┬─┘   └─┬─┘
                   │       │        │       │  
                   │       │        │       │  
                 ┌─┴─┐   ┌─┴─┐    ┌─┴─┐   ┌─┴─┐
                 │   │   │   │    │   │   │   │
                 └─┬─┘   └─┬─┘    └─┬─┘   └─┬─┘
                   │       │        │       │  
                   │       │ 8Rings │       │  
                 ┌─┴─┐   ┌─┴─┐ ...┌─┴─┐   ┌─┴─┐
                 │   │---│   │    │   │---│   │
             ----└───┘   └───┘    └───┘\  └───┘
            /   /   \  \   |  \       \ \    |  \
          /    /     \  \  |   \       \ +---|-+ \
         /    /       \  +-|---+\       \    |  \ \   
       /     /         \   |    \\       \   |   \ \   
      /     /           \  |     \\       \  |    \ \  
     /     /             \ |      \\       \ |     \ \ 
┌───┐   ┌───┐           ┌───┐   ┌───┐       ┌───┐   ┌───┐ CSBR
│   │   │   │           │   │   │   │       │   │   │   │ 
└─┬─┘   └─┬─┘           └─┬─┘   └─┬─┘       └─┬─┘   └─┬─┘ 
  │       │    Access     │       │           │       │   
  │       │    Rings      │       │           │       │   
┌─┴─┐   ┌─┴─┐  ...      ┌─┴─┐   ┌─┴─┐       ┌─┴─┐   ┌─┴─┐ 
│   │   │   │           │   │   │   │       │   │   │   │ 
└─┬─┘   └─┬─┘           └─┬─┘   └─┬─┘       └─┬─┘   └─┬─┘ 
  │       │               │       │           │       │   
  │       │               │       │           │       │   
┌─┴─┐   ┌─┴─┐           ┌─┴─┐   ┌─┴─┐       ┌─┴─┐   ┌─┴─┐ 
│   │   │   │           │   │   │   │       │   │   │   │ 
└───┘...└───┘           └───┘...└───┘       └───┘...└───┘ 
]]></artwork></figure>

<t>Comparison notes:</t>

<t><list style="numbers">
  <t>CGM2: We randomly select egress points as group members, with the total number ranging from 10 to 28800 (for sake of simplicity, we assume merely one client per egress point). The egress points are randomly distributed in the topology with 10 runs for each value, showing the average result in our graphs as below. The total number of samples is 60</t>
  <t>BIER: We divide the overall topology into 160 BIER domains, each of which includes 180 egress points, providing the total of 28000 egress points.</t>
  <t>Simulation: In order to compare the BIER against the in-packet tree encoding mechanism, we limit the size of the header to 256 bits (the typical size of a BIER header).</t>
</list></t>

<t>Results are shown in the following image: https://user-images.githubusercontent.com/92767820/153332926-defe38e4-1b63-4b16-852f-feaae487d307.png</t>

<t>Conclusions:</t>

<t><list style="numbers">
  <t>BIER reaches its 160 packet replication limit at about 500 users, while the in-packet tree encoding reaching its limit of 125 replications at about 12000 users. And the following decrease of replications is caused by the use of node-local broadcast as a further optimization.</t>
  <t>For the sake of comparison, the same 256-bit encapsulation limit is imposed on CGM2, but we can completely break the 256-bit encapsulation limit, thus allowing the source to send fewer multicast streams.</t>
  <t>CCGM2 encoding performs significantly better than BIER in that it requires less packet replications and network bandwidth.</t>
</list></t>

</section>
</section>


  </back>

<!-- ##markdown-source:
H4sIAAAAAAAAA+19S3Mb2bHmnhH8D2ekO2GwhSclURK71WFSj2469GCQ4thz
TdtRAA6IaoJVmKoCKVpkxITXs/DCCy9meZde+hf5l0x+mXkeVQAo+l5PxI0Z
s1sSWDiPPHny5PtkdTqdzY1RPk6zs12zqCad55sbmxtVWs3srjmyo0VRppfW
7KfVcVVQI0P/LEbVorCmdbR/vGX2xuPClqUtzSQvzP7BmyOTZGPz/vhoZ3Mj
GQ4Le7lrhqktOsWw3NwY56MsuaCxx0UyqTp2dG6LquO+7/T7mxtXBAnGIbiS
yp7lxfWusZ/nmxvpvNg1NH1Zbff7L/rbgLSsaLbfJbM8ozGvLc0wT3fNr6t8
1DZlXlSFnZT06fpCPozyiwubVeVv0DdZVNO82N3cMKaDv/hHoPuU22JGyzJv
GED/bZEDL3acVnnhH+YFQfx2AaRc2dR8sqNpls/ys5SQcnK859uVBI2tds32
9nbfvCIwimRm3nyeA39XybVvN0orWvJxklWJeTVLiiR8k49p+ld75sXT/tN+
9HhBg1GfeDZ7kaQzwldlfz4qu5Nk0R3bVUt9n46miZ2Z9wTQtL6mk4z2ngig
ujb5xHxa2CFRgM2W5/3BFhdJdt2cG6ie/nyRpZ3K9V0DxK8WtsyJun6w2Vkd
hh8XCZC63R9smw+fzLtkuDz9q2maJc3JabKzzzLsz6c8SJd2f+Xk6WKWmn+d
/uPm/j3G+oxhvzL10SIF4v9R8xLCz4rF1yZ9S63Ok9S8S+89rY4/SyfStzYD
/styooCKyIWP09HbV8+3n70In1/suM8vtne2d9EjzSa1Pged111lBxdlsQN2
4J9/Xiw/i1nH6Oxi23/56of3269tmZ5luwK/crMP+SXIfDGr0lFSVuawyIlN
5DN8mOclncUDQm0+JvaW5krkY+JAdGD724POoE//64BJcYaDPK2qebnb652l
1XQxBDJ6+0Tlv1oMBoPtHsHxvjec5cMeIS/r8fT/dbvvAaDPDgT5yEDQxxiM
7nxefZZZI3aFn7Cruq3HIDrzizQJ5LTUBuAR487pMG7RofPtTLPhf08yHnDt
SKBakO/aBr+kEX6xyH5K7V1NzoiQF/gHJNHpdEwyJDaZjCr8/mmalkTTF7lJ
FSXEURMw8Tm1wOYkndLLo8KCkxLLSYA4cKwLv9fgvCUEymxmx+ZBTbCVDcH2
QCUbxBh9axalZdnWIllTWUiFrc0NenCVFBCbmIjAObfUtJomFcE6mi3Gln4h
6AN4aUZPbEpiY2qTsS265oDalliazcYEVUJry0wyq2yR8bEwVW4eTGZJ9YAE
qAMzcfKW5BfDNsbIXu7iQ+fTGzrQhsipTIczBt7BOp8lmTWXSZEykgi+xWiK
mSGvu5sbtHCTpBclpk4v5gXRrJnbgk9qNrI8RUlYTIbpjMUCyQcDEAOEpTSi
3sQtSCTk1F8m62JPP/pfsXhtltIqhnaUANUAYZzTRmd5RXv6PxZpAVxarLVt
CIzkzEKw8DT5vEov0t8ncmJpJzJbXeXFeecqpR0Y5dkkPSPkjx3aTElbRWPv
H7z91Dl4zWMcH/A/bn7SJFhNIBICKBckzZMsLS9APRmIbEYjNNYcdoUpZZhX
U1PSYa1sWXXmCf0W7QEmAz0aOkFpZi2BF9OT0AUTxdptGF4TnczyKwwXEXmO
5RW0htJWRJabG4UdWRbhoJEZuFbhMFSaqxRwkcpSePoVkl81e7Tpmxs0vWwM
5mc1Cfg0fD4If6QlLYiIZb9xpi/S8Xhm8dvDBo/95xn/yhlfc7Z5lnDC/3mg
/zMfaE/mZPwseKWg0ZJxsDQjPjJXr/Jxcr2Styu9lGSLzIgREJUw1pmWCkLl
xZD2cJyWFVEpHxN6jrkeFO5IrCA2Py8dbkKTAm0DzDGhMyFPcrCgcte1TKOT
TXBcpvZK1piUczsCQ1peCh8m7MoKlgMCEMgzc4ajQrtVm4O+jCFNitE0rayc
xNJKm7EtR0U6tALJBdlPhPhpfsWTjmREe1aAcdGnnPlOYWlK5hxhE0naRsOH
Y0YqGZHY2E6w8Yw8LK2n6/OwfaRjBYR4uMignZFWWDIcjpZtJpY4oygisGGC
jaFeCTom2Gs38DGhlo7bSPhhWDXgwYlTDdudOzZ+sROCczAxTBDNdVjaBe05
IcoD70al/xdMJ+jM0sPvpyr5WEEyLxezpIH8OWu3tAgPEdQXkAXJIWxwMp/P
rt3YtA8YmQHYm8+JMFKccSLp0YLQ9GN6Nu1QZ6g+wMWFlwfEH0riE44fATKi
+ILJl745m7Jsy4k9EwVc2dnMk8HUzuZyfoi6AAfIJVvwUSJ0ef7vEInzSRzG
QBYJLhwpPnwoaJETgCcHcobbxiZENHTyMFwSHcEUCyQShODjvkSR9IuIUdPa
f/vmaKtrfgk88QZsbnz5ohi/va3jvB25anhdCQ5OePiOeBQB29o/frcFMLZ/
+6FtPrzc6Xa7g23ICxHdxJavmV/TEpOhsJZyMZ8TBzQLRtT2bwfbL5/Qls9g
t/vxy675xAeNBLIw3c0NmouOSklsxGNNhsIGlmb76Q4jjteXOIZPkAMdugXv
mXu8BRLfm++/NxjSwQNtRKEW+euGaJP4rKDPZKQGlWVSXGN6iARWGsAxH5Cm
VD7gwf0KTDIqSLDGI6GfO6TEuhkSgvkN9hO6lsB6bKuDMdEDxB9t2/EBbRpa
Emci7uK+Cfr6ZZqoIN9/e9RJx3QSUhowJYZOnc1335kP5oYQvX9otto4JjQM
fU4FNAL4MC9T2XQVJQ4BgQaYpU9YY6B+gIb4NZoQ6yYgPzAVYv3cTcBIVD7T
XP4LPef4ZUrniHQQOmbSGc+OD7pM50qXz14QXfKMKRBW5hCeVxkYJq1s14Pn
l1UHGujMM5JtHgqBmcEgfK8iFz2XpTmH/F+xX22RJAkpAEQLZ1ZkD7g2pA4p
tXqYqes5oYCWVoBieM46XfHh8IpMjm4sEOECw7/nsr1OYSSzl1kcn35F6LmM
K3QzTicTy0yK0MjHp8qrZBaxHzeUZz4TuB8xnVcBReU3TuNXuDF8WeWk8ZA2
QEMS762glu7hZJdVWyAVPQiqN4Db3GhOXGN6Ba/jvUxAv7/v0WHsCp8j1XmW
nrEuR7rByCvpSliYZ0aKMW8P8QhCn52Q8ErRgyQzAL/m3WawaAPwbde8Ura+
tN0glnOn7xX0V36xeuYy5+3e3LA8hR2fQV+widuPGtOpACTxLyiO1B+739y7
I+wTDJfknLX0SlYzS88tk23i2GSDFlhJiCQH6xyiS2QCkMMwKXWLIbiTrgJQ
pBVwQYZRoZYH8JjFK+aZsccX84q/vkgz6NNLG0s4c9pevERIost0vCBSATS6
yquUzhAdJuKaaCk2o7jolyjTU8gy+PE6uyaSldAEg7j8JThCUjopOoMbnZY2
zeed4XWH/mF2zzI6p7NTQLdkPiTk0jafoIu/UV2cxaUPTbR0urZwKjgjb2+3
cE68jgXNjEiyIppZFHQi3GSEKa+fgQyupjnUME+2bAGkWSxsFX2s+Wc1GUoK
e0r2uKmu51aObVDP2LEjeiVvp+M06wCjOQ8OzSJjK7gt7FaNYEUJsQDBRBtU
JYrr8dGP0vNyp22Gi0r6BWu6VMUSpwARFO0GscGi3RncZDLnHZluc+O4soT0
Qr7ZYqbg9veKOo/ZK+uIZFEK31ce45Bb1gwFsFWdekJEwazOiwM0ajq32OSu
QEKTnB0Gjn7Qo0wurMc5W3yR2G/RfDwwCeTIKIKUJlFulCK7xqg+x2RUV+mC
CItUOiKJ8U9kYmajaxGSlVOQ1GwjfFvdcNcSMOOU0yEi1uQeV3ySRJpbZmJe
dPuNoxWAEEWVwBBKCoqn35GKTOoQqV6tLaeI8EKAbLCR2e/GZDfP6dsYFp1z
c4M442WYlafqgInDRLgE78NJVPWINl9NcEcETtoGP044SqZ+kgAPFFDWAzCo
zNzD2OwWqakMbbbjvPChvkGwNAQCK1AkBjJh2bQFdCAThiTJvMNFEELCkwiW
7StqELgnBsmMyBLipBeLUjRlmUkInM4eSa0KfKv0JBvrk7CexVIDwXiLmA+V
V0GZC0QjdUF97MkLjjyIgs0NKCV8hp2ElfkEGAcZINexvQ5MC3AkJecjBlzP
xAKKBB9E9SI2NRQaty4C3P4SCi9AgUXcWNVJ0Kqfq0ZvHfHMZU7qCHPCfjk8
rVKJhER5EV7JU/VM8eF8oB6UWPfyYzk7Th0TNX/lR2LkV4lYEhnpJByA5rHv
jpY7dVSkNm1Zdo75ae3sE4Rmks8Wnkp1lQ1PXNe8YZoDY5qJckKW9Ug5VeK7
+R6bG3x+/Lmb5fk5FBzdFRXSXs0/FC1jVwmPfldvpzCz2hYJSbNRQUxxjwbD
EDlYr9gFbPWckcEf+QLp22v+ojZSpt0wEnDs9b0rcAW4ZJg3+uXFbJY3mDQi
gOcoLXJddliLYy7NOrOcWSBORULdfyzrvcIWiynAUsmKVh6mBa3xmBgoy6+a
aHZW92Fo2eTkrcySHTXMiy1FINgN8RSiwMtkpoaIsNwaV8ae5GFHlK5Zw6pK
O5uodpmADUyYW65ZqTQXUwr+C3Vl23mb6Z6YMemOLMHQGZsws59r/lnQHsnj
i1JPKWOmIBWcwW6I112gEBQBr5TwJbJf+EgDR0GzZ0cvVPrYwRv7hpmsVb7F
4hJuRdH2CQXzhSrX0lANKz//lEQhsZCiYvtZ1TuyTDc39gQ7MFVo5kz0VWcM
huPCe/YL8P3K22tCK3CV/97WJCTTBTszJ6mClbDLq8jncNzT3iSf04vFhZGw
ATWzMxlHCCPVwTjurNsHQsuFobVZuODkMtwO3pRIkkhhWOTn8BzNZWZ4+Gc0
NxZN6xF502EzOS/SM+w5M5NKuSkCF4WoiGIFgdJVVqsSntQQAxudmYvN8sXZ
VGwv67GDCYk6wCEYnmhhqgkqEsLyM5xhQSj8+TEJ8knjEwc/IanOlSckFyxQ
yyi94LhZSXvBER0ZxY45dCDrgyDicdQpOVykM3X+ZjVHrThD6ZvITUdEfCXn
yIo3kTVCAoLkB7iSd6fy6XKWBG2jKmjeOd/23BL7CVZYihklOrhoaeFkiXWD
WScpSSPhbRHxtfbfHhxttdVdLyYfbRgxGosAkPqCaQM7TAptZpjCK5NwxGTc
KycWwCqsdzeFiSPTB/4ZcFuaTPcVWoqqoaIleIMwmkN8WRGyhc1rrgiwXsYn
Z3a9ubGYj1np4uGYgfNfDDAsV6ZYRyjwn6eZWB4NTKoKIV1FVRfG1jZBbKRC
CTpmGQ/ZYft/ZcgmUZFNKnGMIbbuaPuvDWJSUOdTH2AkVkx6HG3PiDg5gzeU
M0ODNYNVnFiX+al7wTxhuEW7ukTAT7g5hKqcggayo1imagt8pJyPKiNUyNlu
oE40Jh7pgx6/vTgc8+Uhwie3qle98ofCYNuLdIQvODiXXItVdG2cecjqnDvT
tRiPWmS0UDaZxcWYwgn59uCHzt7Rqx9vb9sqOXxMQI9GBALp/GWs58+uV0Ux
YyFYsyhoS71OfXxAKGfLmTeVg19N64OJTNReAjsSYDBLnNAdi38kJMw0fz7O
MWQy8y1uvusc/PD+sHd48L7zvYmE/QRmhjHfdeibHpp0vr9ZP66KB03lW9/u
1wGBv9Fmyuo0x8QYspR/K41/6/9eOSA17LlVyD+n/DcnFdS4eNS96398r/CB
/6U97/Dimb/ZajEP3bvx/Cu7+7a1puay+eFSGh4XI9MixAOeLUMfwHU7+IFO
Iv8ST6AvWmjS+X7LHI0ui7vQTDva/Fm5c7S8jju+TW9Ibfyb77q1H6IJDc4j
Qc1gfFNv0b1ZD+AK8NaCaI7UV8UmE5GXaeVKwFubG192zUN3YiVZ7+UDwFXj
ICxbA9E9cLzkdQomSNLbjnuv7UiyaiHXxSPtuWgsih3XWclWRP1VSxohaVGU
WX1LOKzuphvH00lsuR08e6rZXM9TcMqxnc/yaw6kc0PObRBHA6/Mfq4QcwaH
4nlmZB92JKHm4IdD7+uba8Ig89s3Xiix1reo8uQChx6sxxv84o8hK0XNDVGU
aRc4+QT8laBnaNjJ0pCI7ARpcjCIPKgGbkhR+uGc/sSeCAlQZcxTRbeBDy1W
dxurC4sXrxEdHV6SQundQKxaBTcw8jCALlC8OJ2c+UEQYNxIbSAV2Ts5xTHi
QoKrlABv2yHmzmoU+10ajjskkNi2aqUCjAudSa7IuCNPOejNUj6ZjRCoFS2s
jgWFUMUDvFcdG3zYZNAUsILLtiwP6IE/FM4xzUWCWFbfJlL6M+RRpvC2cr6K
m9pjWTKTeDCmSDV988VszAZkxWmYrI+yMsw+VV5gltfTXQBej3057GyOH8d+
bdGx2adSRkLe+YtWZOGUkece6qKmIDGlRiIdRNqiA4Y8Aeg0mVhgPeozRx4+
Z6/rUSd24/JLMApSn9AySolyzp8faaM7VU6UVkoyah7Ec/Ctse3KDvj3dYmr
crT0R+iKFNUqnTnDhUAakoI80fDrynwcscE4N8JleMxIoyPm0bLds+6uBwiN
z4hHzI1k/5TTdB5nVjkLwSGhLbZdzP2hefE5HAshTcXNxSbaMduAvSONLSJ9
gkySEN3wQUifFNLzim/JeRay946OwEvVfSheODEyez54yeNjZD6MkvECtZcI
kh4M+urHg9mbZI1UDVXShbdWOmPAlKA+9sXC4bC5cXzQgx4XeF1algvrfHF+
PSM+Hy5bBOG/6AjBZCoR+xdun3iUcFILQPUIorF6PseFSCu5zFOwZRCxc2ic
IUEIpkDKsVuleJjt1yTWLoQW/DKIkYzOYQydFWQ+a8isrFzsJhJAInp1KTGG
hxb+b83CZBZVLbKMUKchLyzD+V05UfDkNUsDtv+YJYN1q4ted57dmxHrd5Ks
F8tjURkbYuBhyJr68nByNe7k+uutT6hzmUlIDytdSLma5ouCPQ/FApsvn9ne
Syci6rxJGsxR3pm6me84wZuQciWmBTSuT8RbBre3bHWIUeWwGHz8wn2QVTNg
WzHyTGQCOUv7o23SOR7Tnyf056lpQd6xMSP5qZLH+Vg+PxFDtjnCgHo+oz/P
6c8LaTnoo9sLnrjZXCfjNLNFAc7eNn7WKH33rfINFT44DZq4pqlabU4XpqNa
FJbIEU5TOuTszGUXMgsiPzVHtJyz9t028Q2iNvBY/sDysIQfpeEcLqcJfMjv
9j6U3onikN1wajonk+TZxoat8F72l3ixIPoBUxB10JVJgs6XL2yw3rLTgrYP
irvsk3x8tgUUyucXTq3Hs0Eff+9ssb9TyYxoTj1r1ucoid+tyAnr2D1xU3oH
MuByvN8dHRdsd/6xK++1lbHi1XI+hBWxUYuyItMl0JujLyFB9yvIAKxB2XHc
HUFclhfE6iLnF8kCQox2Y1WtMbnOzUTKkzzT1shRXwlmTMf4qzF6E7I20/od
gAdSj2BLeSb/XNaCy0x6FLrrTPBHZOk8WmO2EbXcmBZ2dmtdZ/ov+n25VXf9
z7IJzB/jztFH11qbLbeoN4/Gv4nb1H+r/yIdHnUuozXVfpNfWgWZuz35Rbrc
ENXdyPMtoO2xuWkRh6/s560bosUbjmDwNzvGtXOTPapN1okna/6yeg/qKFjp
V/jKBqxDabc20tfQ+ffgchmrikg6TUCQZUzeHD3XUW/oRNwo3kGW/fthUT7J
TtyFwtX4W/V1g25XfC2SW+bsSaSf+zjXgJe4zj+gMtl8Ul7eYxWL+KA4BlgY
EtPgmwv5hTXvj8mGGNppCpbyomt+SJEBwIngTm4+910kVq9+fd+Jba6hlfQm
NWr5YoBNmX14Ed3WiLxmBF3ms0vJA/EZPMqUXFpOjV1DGrWa9hVt2Wiap+Kv
1yTsx7GTmA6Mz7zyTPZJrcVjdmFokxey2BbPrNmzQ8veshdbUfy7AydccDYo
TqZBvj4gy5ls4zHRytvgfPoE3Vcu2fAIW2Jdal66C99FKaymtX+4ZVqDbvfD
VpQ8Uw/zQZUKGtjRgIeGj3dZCXMTs357NPCMnOj5kXqqHgWnlTtI+4c3R+bt
LDmjE7TnJr25T08z0JPcx78qgO7XczvuiZ+jbXO/no+1x8D3fHzPnk+Wej65
Z8+nS9A+vWfPnaWeO1/tGZ9/3W/HAfgz7vQMHtw6rfCBIv5BIBmfLn3oyEqs
GRff9LEpDZzrCGL9BC6g0XJW6lpHW7bQYB3Huc9qFOvUXxsBwZZvFDGLoncw
R+qqKgetNIVAI7Q0p88uOSF7sI04phzYLZhaZT5K2a3ESmFahUsxw9KF+diC
Mwwu+yPEumbG627bxaHJ0kBtrenijLXJsk3AwBfiqAsJ5xLjCClvejTbomw+
dcom56i5pDQxZkI+IlQAvwWZ8GVvVxnzI6+Nk0oYX0cv+w7DngEAvkGc0aMV
K+JwrFebl6JI9O0eWQFxGJaky0lH7lHQOk46HyeTUjVMv0nYI9JbX8dOqZr2
Tvqz4tk5EDnmD/Wa0RglCvu0AkRsK44syc2Y+nREIidbjtoXmaQk4vqkSxFy
oV9Oe4AvkIBQ1B59XpMk4ubWwxAbx7T0PltH/MVJfRY5OXkVR6IRy0fDCJea
x+l9rxJfnskdFV2K/uYION7WzyGqzZdSWx86A1+R5K3gE9vygaYlgD+4IWtp
a3oqoxMpLpuXAzkr+L5j4G9TaTT26StYTSC3yG3AF0NiOCIGUV8TorZHJ4j2
ffL+VTZxaClm7y2fJIBfi0PWUfLhZ6jbAcSKfiJec96GyOlLHCO59P7tWJjn
zieHDQc8mBZAt92VD59L67J8OAhd4xyOmpkyw6GoLzuXhwq3u5lFkLusITix
Crm6TNTVNT/7l58tHUXdQ8k50MxbauwSNi+T2cLqCAoFM4UAh3pVaVqejRP+
MZHmHJbRigEEFvTW42yUz9mdrCxbz/QFHWk5XILTJb7gGAauEdLplIQFosiQ
2KIpcMoFImrfc7yp4PuLEpXm/AwA0LhmWtOyI1Ea/9TV+ZsAXKyU3/w7R9JF
/wdH+pcGJwVv62/9/SPVY7fRc23k7efVrVZafuvb3zVVDK18DsaWfxg98lpT
YI6kkr6FawEg43MrI253c3Qy0EdE0B9u/t2zRZrWXi0IK+Tn462HId+UlS/H
AKN7qU15v0oYGIkcwPWlEbm6SiTCZZVAHtze1oPSAUMt6ejcLgOzbR6bJ+ap
2TGRyev/63Y7jwhz/EfR3b8Z8H/4l7EN9B6dbN98vb9HoLdRwdjY+hDyFRTy
tbX6yRV2qtzYidGyKVY0ZlPn/VEmbGnOM2DK89LVgjPoY3ztgLUjdeIGvicj
ifqxI3lHuOYpWuVVHuULr9Jp2/TFY1n6Y3eVmQyMzQ3V0QardbR2BABL8pcD
L4okxV6EPbLxSKa/3AYLj56vEMUyM5FSx2W1wfGJbF395Um4SkhoGJFxDBmh
XJ14PWu9eWzap5W7DnVVpHDKBvapnN7x/dEo5+2dXbfd/TN8rUIQg5D1wY5v
zHAyCJq184FKYFsn50bbIc292Ur9+QGcdSoHTcWaPY0WShPEiSNCgXBIEDrY
Ax+lkfF1X6/S+WuYAWVscbFA5OA50YjqU/12DBwnELJHoq9XmzW9sTGSs8ck
0lAT43DUeuct0QLS1ZDlGi4FeA0mpCCyduUro4yJMjjBLCnjTHrJSHZu5P0T
jUfVLtuvtij2Mi6f4E7z+5PjT/7SF9KSuTwLzhPBy3ghCudkFKeaQMw/J21W
LvNKDqypj1qa4x8/nrx7HQ/MGX2W9Z8i5cDjTBUOnsCZGnLbtv8r+TGt5x1M
pLThDhtbES4yLxaASTY3nnFb37WPG+PPtkThKgXTMvzgV9FPNJbaPFzIYbDN
o4m2FjWXmwQyZpTlrnkqTvM64Xs64Esx0/AlceTq5ZP+C+ZdckP9SDZxL1u7
PdH+11mrmxnbFlUgCd6xFozxL1+G6aTqoPHtrbjQ4i1zU2GmdSyjdgVusM0L
bPrizJeHYR63IlkN80K3GpAw05nrJ9w8gl8inpExpHRIhyOB5/GM2ldXFhel
0qx13h70t5/4C9vnLJ2zZgEGf2tQRkVUESKLrzItRern0+uSk6Nwd6uYcB0X
NUMFa96LMbOTihNv9Fio9k1naD9c9UijxWIp12bgB3B3/mrejEYpAgm+Owjq
lSzYKcy22YLVmJLYk/V3WGOJwzJE2cPJHGF2fRAJ4loET9bi1PyYRzLJEIhI
wnfXQWp8vO/oR2WKZmUzT/Wptr7wTUTfXx5KbQankTAHTVaAFV9bEuk47qUX
UsrDb5VodrjD5JzwCOJ6DssKSZKJfROORLuBYjrsmv1AjD2CVdGmDFyq09SU
p9KnCfOiD4nFanQ6IPXMZi55QqW6uNwhw7nxmhMZ8uCdPJq4XC5X3ETDxXNf
N+XWqcpkw6SXrqaJ5k1ElQvWCDoVlw4giM26AHNOzvEDlBYQ1W2esOcFjE+s
6NG5uxwe515wR0AER1J1HS49s0ZR3w+E6S+sBHfXQ82CviEuD9sq4erCnuky
hFfCgoLniKRwynficFt4LUJ8XkYN3nrtF3/wOdEoHJplsoa3TVPoxk6FlFuZ
7tQ6ynadwAA1+Sm4quoFTpBhlqrjjONPQv0uHSC+5lO77pHWqmSNg8rQhJvd
0XprpdTrZ8u9hvY6l3tltc7RPiok8F1wo82NRZZcgdPxCIV4vEUHZ/1klBSs
rID7IGds6C9VtuJUovHCssSf06SIXwn/Z6tOrqlhU8FM/R0yp/3KYeEz3IvY
QDhujH6WfDS0JBHH/KBYkLxxoFk6CsNZWk51K5x4qpF6GW7Fc6rhx733MbPE
nTi9ECSRN24kRLmq7BHDFuKLTOtL7Czej1AmiaRxUi0K5i+kzc47E74spbZG
yHmEXPWaLzecF7jSzBTrC5zFmjA23VFfBI3PTvP1zoSm5IrchS9dwBfQxGQv
K5g/mjAJx2srr3MZJalPn945b1bE2jVcEIcYV1efIhkVsVR3nMXSczw16thy
Xk+WNq+IJrOzRXJmt0wYRc+olIRhy4uzPVqaEG35IrAr/nSxxaq47DipHR2y
5xaFXIJ1peGcVYdLOsHTys5Hdi1q16gHqyBqmgb/tLiRcTjUhSs+D2yO3GzR
OgGyBmzG8DoA4gwWtyJmnlC5yXBotgNoK9q5RM4PHz9FChEdmIDI/+Kci5yo
qKFe2oTWIVOV+ly+OKdMr+dYUMqmcBN1LmpURwZh4VDFApfp8mOhuNaXoxON
uhydiHimD/1b1wrDvTSQ/hY+LBnYQfetCb7RdNL6BoHprhtvy7x8afpbdFbo
7GVG01yjtX3r5zgxNIf07ZtHxo0j4MTt3lG7xizfBhC8bbGH4U7c4z2/URI0
eFlr+YgvxHRVS/+27gQjHP168JuQYB6p2XC4rIxzSM9XJMn9w9Y3YcK2+cZ7
YffZ1IrnD4vdy8atRstv0PJenT/QIl+hpjUaNYdZ2Sda8bFGCzQYUA+HpTWh
F/Xam8BYauKaxBqJDOaHNaNYKNNvbG2Kl0ujPDKtD6ZjBlvmG/O8AfARimhn
qhKtog5pJrkUL80PtnqLZUVJEvHuhA5X05SYQ4v7bYUTaPQoYX8ZyfPrJXrm
UzNae2zQJ8phI77T4h3ZP/w1z/abbohw0xFSha2W9carHMVHzfS/jRssnTae
tNYks5+r6MFtHOY4WIbJX6StIYPP/QeAOWg8b+yq36B4v2rw3Bo7I852r0G+
aVDIt/VOHzqdxpMlinrpCSnMFBFS5+Wqmb/S4/m3OAjPXfisMWdtrSs3U/md
acxNlE988SvbvwLaBj1EAz762upW7cUKML8GVON7FM8ddY/tGV9ceWcnNAih
bVAjQvdRZeHqMxOd5g9ExmsOc1vaBbLX4W9DWOHw+M3J64+vPr5+E0dnVqpO
Emh4g3TmTK/IQD+Q+EkY5/bWxTYbonx9DKJupKtLrK78rpPAog6UYmmqikgD
HPp8X3Ev8NW3stIrMUHp8koL1AK50BGKmdbtm10W0Kdr1AW5YRakqroP/M3+
ZfU8rjai8NIgH1n3dt5WqSCNqvYwParRVLRIZDP4eEwj/0PccKVpOUuIzPnf
PdjyLivcY9G7afBoSanApbI7kYDEbWKGmN2/JPEH3W4XDfT7ZhET7zhFYKas
DRU8j/y0JpWlqGAYhiyPziTla36a+KEXO0jT5Gsd4k7SO0UuHMCeI5/S5BIt
giYq99cWyAkiVDkUHi31qCKbKqpXCaixXH63jaYV6I2qU+hJwWnML9RopIVw
eMDV8jl0TgF386V+6X0/ysto8m5f9VqSuTJ1S4ZiWsizac3zyuX1cHBiq87y
2lr9inm3VhwY2ugqIcFwLXliuK+n3ut68I8sM+SRdAb1oUsmToSwnPMreF0a
teuQ7OpDC7E4aeRHRDqH1DFw8PqbNlrgISQd1DxuOBdiF0V5EhJ9Ofl7ag87
97saVO49CVpfV++8Da99eScpowC/iC06hExqgUtxIB7ol57Ntjc37GfCs95G
dbGjuO5pK8uzzqc3WwHCqNagrwgBwEZ5x35OyypA1o3qBUdXtsq2L1TMbnC9
+eluTdaKuC20FlR8NzlctZLgaSB/f6eSa6bx5TW5ExnfF5ss3ffsyqV6uW6B
TD2un+oqBcdwYW31Vw5E116b15qdW3ZVKVJ/a2PsT2LaLIWmROtrwWJHscwL
cY3YsQwqxTaEM68uK8klFjv6IMSIg/+nXYvHgVi5dolUDItvxuh3B/qlXfEd
b3tceNnFcHyJthDE0dtsoWyZK3xPJ1CKHKXe+UVEP1nMtPqsd315zhqKmJcz
rq/duBfpU9ESLRyjxZNdtR9WAOI013RpjFrNm8jnGl/TIlmTcW0lLVqdZ9hk
vdQqQrwpw33hoEiSq48y9TWIuTZ2TeYSeZhfqrB19VZonKh9e4l3cs0aHjmw
XmISXDwZ5bM5ODgW0RovUiO01Pr3tsg7cINaX4WOA4rseamVB69FHWuFuu1n
KZUeV/6qk0BcHrzh0OMYQYAnfi2MkRpwzuGDqtp8fCfWFzBgDufoLyQyLObg
sRwKivzktYQ17s0V2YhjRRhrBFZjDq2q0ObGeBEuQ6ias/r1Ip/2X+8K0YsX
Va62esFLLYnd2DZ7Yrl+IV9h5HcjqCO3XoBAb8UO2evqYRKMEmuiYVwuAAQp
YijLcYeHZm+EDJoZKnRqSVdNs+CDFVeblWgDKiWY+SLyVEcvc2qbXy34xU1t
/1amtn/9Ujt6zxJDGL9T6fTLTxigxFinN3gBW/fz4vTmOsnw6PRGXxd2enOV
ZD/xENv8+WzE/U9vo9d8Scb5ly/h7VpsP7xHEWr49s/1BYDAK8Hb0tmiEbYk
9ZTfnYf7zIwLRYEoKP41Ju7sSZsvXxrvAFPL5SGtE6d4lp/h19Nf0znuyPi7
Zo4aztAxL/JLe/qb5XdwYHTawMpyctmKV3mNkmHeOy+Si3F+lXWKyYgE+Avi
rQWSTJxbtNsYtnTVeZkNE5+SG6V0YlbMUOlbBnu0pjbUZQZZY0dmYu14qIE8
4AhvOvt5aqtJNy/4ylAP6fuEkvAQb2nDBrAJxXefFsMLOGAzc4Dr7O6FGuaH
tPqRgAhYwdsYWdmL3egyAmlEI76XKvuw6r1rxGkbLwT5BkpijntPGh2KSqzQ
3kMhoUNnWiCnLZX6kxyvd9CCkBA87pUK30Czlvu5eoWftgaxI8fK1ldlqRcl
Ii0WhnWj/Ii+9kMMSrFg9OWM0RV1ObEc50hGUwXrNd9nYgWdbeYxW3SNcIeT
vJh59UtENKC0Jp7E7/Jy7894f3xUz7X+xhxkpM25QvysljlRr5Uu1E6WK8iz
WVB6HXer72ztlJm1ofHKFS0IUXTBYlWXhN7cOzoJ2sFnfqUmJ5RxnVe5pfYT
ElhY6VczBnbVlco8qzG4yOXRvKvPdFKG9XusNV9LQqdyFl5Y6t9TNeQKCmAs
933FiDMzatWtecVTP0IbRbM7XDE7gh0VKDnOCgR4QgYEaCF59VXq3rjFQ8aG
opdhqJjSCdVDkAPXWcyXbhT66VJO5xnXbFdWZZ3OjBKROHwa4auNkmuZ+HBz
IBS28zC0pW6h1pHxS/M1vz3oAepVkLY5SVFl44TfrhpWEUr9pT7lqVQ1ypce
yThHKy6f69TRuBhOPWyuuY/qUVI/lavqI0qcVoGTt6LWoqlxfYyojwtSZ/ZK
CqdL8IsrlQetksRrxro6O5Z6LnZcyp0QX/xcby+ApDhbaRJR2oryXx6bcV26
wydd81ajx3E1zdK/AaeBIs4H0I10lZQqTfJGuUw2kuXVSWXZyHWKD6ivrOVe
SyAy2HZG16OZ0J67UUHSg4yC4bWJUht4XSR2pE0HOSg+OB5cd+tSediv0GUL
ALVxiMtgBl+Jk1PuhIyZyNsR9ref6KtOcpf3K7JR7N9gTbNfRnRwXiHq8/GO
CxPEG73KNfvlNsppNjErjd/5BH33g3VVkwQWeZPGjIRigS5sNrJF67IxWJrf
Kb5djo1aWQGLkAFc2jE6oq62+ui69i65VRk4UZEWfX2TlMBgkIURN7MCXaLU
8islkuZbTmppGUu1oy7Lbt0UcsksBedJDjvN8jGEMljMyA8Ob1SrV/kGhjln
0RcRqV1zoBFzJDjFo2sl9NIX8pF7VOK55vqfHVJzkQjEqlJHbWeGIU4p4Ywy
dVVFBcwXrphFPWudLUu9b8FO4zh/1l3z5KzH2vsrSnglpcI7EnaSyDp0NYoj
xogxpciSOOWhzcVKk1b58mVN+OUi1qePc7WhPLg5XDnidlRpOC6HxVcXvduB
C761pFjAlr9bEpVIZslaLLJUKvheGxQzcmXfhgXR7NRqcptp/uwPlh/2jDmN
n+5v89+P6y1RyvJ0ubGWuDzlf+Jv9p/ov0/lnx3/Xa/bvfET49+bbld77j/r
dvdfvACc/T593O73CZw+e/wf4yXqLmx0/P7wnb8yfZzWaia4wkYSL/JF18VD
oeTvK+Vo+IjHg7rPl+3CbVGXW1R7qZI7tvoGJoaa4euaPU7F0TR+ZwQXNSp7
H1MZZx55oZ/UE/IcaX/3Ei8T0zq5pRtSTj1Ik6sR+RqQzLtd1KmRLLA/ePn9
/jb9efLy+5Yim2soI9FRGIjWnVnKDuSuj+nPU3T127OlnR2HiOrS4C1gaTE2
K0fZASB+Y0P9o3o9Mz2zkZ8EqR5vj4Bb8RjGr3tolAkWd8kIaYpuNyKx7nUz
DoAJB9N3WmhtRE7GbySROdOmfjvMZVbnY3fPS9bZaCZnMiJIVwivhDLofNJc
YTUdlyEc4N8LQpLwMkyqSZUjkq7M3aP3dOoLWrV+urrVg8rqJpa68mox6NHT
C+9Izg4XsyV7riSMVVIhLfFbI9BKOfuu583sXuMSTovgkYteV6bpvQqRnq/4
bVS0v1aChftP2vtyq35/R19kVXGlElTUDLUx0bz21gsukJxZeeWfahYoyCfF
F8POoaOnIv823JwQwkHZ5vvWPKJy9iUSaPWXsuGQed4FvO4svbUtonucYZQT
i1l4U/T516YQJjCfDJogwOnfBes81l6ozElZGPGS4rrdfnPDbPQ1eEhb3oIk
4aIgXZsZxgEfS6++1eoMJM6PYVOWok/skYVwXaZ8rGKlCkUAtfgthOuXh4k2
vPXqoLwSLC2FFSxpUr2IjQZrh8+KRE+CCqIZprxjyvndHZB6VUdCEcDp4vqJ
gLNrfgCkKcxrcA43gNQ31MEiH+3u5saAdlXL48aVOvdt+hN25n0+TGVbXk2J
1dFc23I76Pd4JZXhl5RNEaY7Q4Ihe5xzNqCH9D21foyXpeGlbMm1LXbNE9oE
1EUEC8DrYaah6sTmBhlEe2dnhT3TKpvS5bl2ATWI6jLW0MNVLm1KLd/Lg3KG
Qqh351HH9hq3ltq7KwGXwLkD1/lFSflChi8e0Yqe1qHU92o8lw9ts6Pgootk
+O1QB5lB2z7eocPGrdpm8Hyp/boiTX/70//625/+59L/f/x6i/Uj/sF9+N+r
Osb//5vvsma03t/+9KdVHf98eq8WB9G+2fHqOXr85wZ62Kl/og/4zz4R3n7u
Km5/BSsyGsp0ufF60QNzei9sRij8g0J4Y9yIvdqDWtvGIDFe/uLxovoq65+n
orbWHrh+f2ngcwl7OrNov6LOnpreaePBit2NcPDXZZq78ZtwWnuwrldz7ICO
WvEALLRWWGAt4szdNOdqHPUcCaomv67XGso+Xb/W3rqjdXon2a0nrvUjos/d
xzUc0fWD3EFrd317d205AezUIUh+fw0OeyTZ3ML/7jMIj9LT3+/VwTgyvncH
96KDe3fo6dq+0sHt6V+b293Y7b/ezZXjmVft9L/dD5Zl1sCnordqi++1vzVM
GxHr7yAU/1/Beu9eWD9dP0IvPj9/WYv26NCtH8xjWmRbL4YPj/6VxNwK90jc
mTHpRGMvbMS6Sd37P7jhKeO/F+3fun7o9kjZtFY0eeR/419Xd+zFqzR+lSZe
5cqeoaNv+6j229quUU/XWKksWuXKvnVa+mMvfvzXtWT316CeNahxmQ4FAt1w
43c70OS6r1eMFJ/9PzvdpvG4RpV3NzWxxrsCrYF1Rxt4GkRB86u1bMNvfY0u
equ/uqN/7zT6tVdTvnrrmUqdk/zRCfvG49oe3910/R53OvjVaTZLe7z09do9
doxk9eMVDN+r443Hd/NkUbJPnb59B9+S1qJEn7qPd7d3OnJPNle027v4NPjL
jSiK4DQ3ojTexZf9uL2gzJ2u7dI4qu5J7Zw3z/PKbnvH+0dr5/jDyr9Xf7F2
kMY5XfHk643WIi4wxfCp+fD/Ruel07Xiydcb/RPx+PT8iOty/KMQ3+12/8OI
7zT43sovVgwiOkaT763ghMsc76vMzmkG6gq48WaesDGzkun1/F/az1n68kR4
0zJnirpx80fCwUJHE/hnfad6Ju7qQaUPp40ny52bfT3A9d6ONdY6L/dFGzWJ
o97Ok3Cqne/DI93Pfdt+vd0rz3XXnnU/1vrvV3/nxr3H8ffj3K/t19u5DVni
DupeXPnd0m/yae1Ywi7+HWPdg2n7Oo/3YvD3avf/1T7fsQd3780/cqz77t3f
0/Y/yz7L/39mIbdSv/472n69XUgQ+PTx8KPLD/hvySwdS2zBhWxcboCPMGV5
ZSXFd9DlGNCu+aU1RZKN8wu8OdXOLMoBn3Hsi29t8jWc2tvJ2iEptHah0dUd
40jloI+wyPbz5/2+lJYp8bIt5NPylaVRWl238aZ2KepBQxeWL9BZM5qlCG0i
rBHDsSWJAA3Qigj4KI3Yv6bHBaYYYoKpWOh1Wg7CcqE6ef+Au3mXXNoiOXPV
kjFOviho/cl8ypjgou0CSvM2Z8mhVs5d2OlzuAsBN0ZwlDmDuDJfpwzJGYSo
wU4/vtvmc2gmWrVaSxyVZvC8X8dBWzPO3QIEKlzVINQ32kpY7dgnJu3itYh5
MZb7Ipy0qnmPEkrVV5jhQZp1XMlKX1mcE+VcuRreTaQ1VLV6f/isEUzQg8vv
aFXT8HZNn9sk00pzrcGnyVacNepKyVa1UjLpBe3Xrk/QX5S26PCzsivJ+njC
GetZxXn7L7af7Tx7vt3vDZ4+fvx4+8X2TmdsJ/bxc/ukMxjuPO48GQ52Os+f
bk86E5sk9snzZ+PH/WfducTYXuXYC75usmv0JDHc8mYRru7E+6n4irNjBT9I
geEM+Ke0QYCubGsZiLswzcPzgnGhlAfipMen8QxlGHyw3XfDy3vY62gbWyTP
NJJEMAC/nnIRVYLXyDuijR250jws8mTMiUN8BWyyIhlV4r3uDWTu8I88J2qH
/AkiCi7ZUU/zlhXiDmsoWCcRfH4XodUrmJJnOUNGmE3OedA7xsOsizKUmmQY
5MaHpk2Yib3iYowuNYp4ik0u9Oi84ii+3xKN9DffPz20VeVS8NwlSpft7BO1
uaziMolIkNld4hvSL1fpWO/pbm78Hy+B+1LwowAA

-->

</rfc>

