<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.9 (Ruby 3.1.2) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

]>

<?rfc comments="yes"?>

<rfc ipr="trust200902" docName="draft-eckert-bier-rbs-00" category="exp" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="bier-rbs">Recursive BitString Structure (RBS) Addresses for BIER and MSR6</title>

    <author initials="T." surname="Eckert" fullname="Toerless Eckert" role="editor">
      <organization>Futurewei Technologies USA</organization>
      <address>
        <postal>
          <street>2220 Central Expressway</street>
          <city>Santa Clara</city>
          <code>CA 95050</code>
          <country>USA</country>
        </postal>
        <email>tte@cs.fau.de</email>
      </address>
    </author>
    <author initials="M." surname="Menth" fullname="Michael Menth">
      <organization>University of Tuebingen</organization>
      <address>
        <postal>
          <country>Germany</country>
        </postal>
        <email>menth@uni-tuebingen.de</email>
      </address>
    </author>
    <author initials="X." surname="Geng" fullname="Xuesong Geng">
      <organization>Huawei 2012 NT Lab</organization>
      <address>
        <postal>
          <country>China</country>
        </postal>
        <email>gengxuesong@huawei.com</email>
      </address>
    </author>
    <author initials="X." surname="Zheng" fullname="Xiuli Zheng">
      <organization>Huawei 2012 NT Lab</organization>
      <address>
        <postal>
          <country>China</country>
        </postal>
        <email>zhengxiuli@huawei.com</email>
      </address>
    </author>
    <author initials="R." surname="Meng" fullname="Rui Meng">
      <organization>Huawei 2012 NT Lab</organization>
      <address>
        <postal>
          <country>China</country>
        </postal>
        <email>mengrui@huawei.com</email>
      </address>
    </author>
    <author initials="F." surname="Li" fullname="Fengkai Li">
      <organization>Huawei 2012 NT Lab</organization>
      <address>
        <email>lifengkai@huawei.com</email>
      </address>
    </author>

    <date year="2022" month="October" day="22"/>

    
    <workgroup>BIER</workgroup>
    

    <abstract>


<t>This memo introduces a compact data-structure representation of multicast trees
called "Recursive Bitstring Structure" (RBS) and its use for (stateless)
forwarding of packets that include this structure in their
header. It is intended as an alternative to "flat" bitstring addresses
as used in BIER and BIER-TE or possible forwarding plane variations such as MSR6.
RBS aims to improve performance and scalability over flat bitstrings and simplify
operations.</t>

<t>Operations is simplified because RBS does not require the use, management and optimization
of network-wide configured address spaces BIFT-ID and SI and because one common RBS mechanism
can replace flat bitstring addresses for both shortest-path forwarding and tree engineered
forwarding. It intends to improve performance by allowing multicast to sparse set of
receivers in larger networks with fewer packets and it intends to improve scalability
by requiring less BIFT state on routers.</t>



    </abstract>



  </front>

  <middle>


<section anchor="introduction"><name>Introduction</name>

<t>This memo introduces a compact data-structure representation of multicast trees
called "Recursive Bitstring Structure" (RBS) and its use for (stateless)
forwarding of packets that include this structure in their
header. It is intended as an alternative to "flat" bitstring addresses
in BIER and BIER-TE or their possible variations such as MSR6.
RBS aims to improve performance and scalability over flat bitstrings and simplify
operations.</t>

<t>Operations is simplified because RBS does not require the use, management and optimization
of network-wide configured address spaces BIFT-ID and SI and because one common RBS mechanism
can replace flat bitstring addresses for both shortest-path forwarding and tree engineered
forwarding.</t>

<t>This document calls the bitstring addressing used today in BIER and BIER-TE "flat" solely as
simple to remember distinction to the "recursive" bitstring addressing used by RBS.</t>

<t>The document is structured as follows:</t>

<t>The introduction reviews the aspect of BIER and BIER-TE that RBS intends to improve on
to then give an introduction to RBS.</t>

<t>The architecture section describes the models how RBS can integrate into comprehensive forwarding
architectures such as those defineed by BIER/BIER-TE.</t>

<t>The Overview section explains RBS address encoding and forwarding based on an example</t>

<t>The Specification section defines normative requirements of RBS including forwarding Pseudocode.</t>

<t>The section on using RBS with BIER and RFC8296 encapsulation describes proposed normative
aspects when applying RBS to BIER.</t>

<t>Appendices discuss High-speed implementation considerations and current insight into
how well RBS can help to reducing the number of of packet required to be sent with RBS.</t>

<section anchor="bier-review"><name>BIER review</name>

<t>In BIER, each bit of a bitstring indicates a BIER egres router (BFER). When using
<xref target="RFC8296"/> encapsulation, BitString can have a BitStringLength (BSL) of 2^N, N=6...12.
Routers may not be able to support up to 2^12=496 long BitStrings. The most common
BSL assumed to be supported is 256.</t>

<t>When a network has a number M of BFER, M &gt;&gt; BSL support by routers in the network,
it it necessary to use multiple "sets" of BitStrings across the network to address all BFER.
Each set has a SetIdentifier (SI). BFER are identified in BIER via their BFR-id which is
(SI &lt;&lt; N | 2^BP ), where BP is the BitPosition, the bit in the BitString used for this BFER:
the lower N bits of the BFR-id are the BP of the BFER and the high order bits the SI.
In <xref target="RFC8279"/> this is also shown as (SI:BitString), where the BitString has only the BP of
the BFER set.</t>

<t>When a network requires k SI to address all BFER, then a message that needs to
be sent to k arbitrary BFER in the network may require to send as many as k BIER packets -
when each of the k BFER has a different SI. The total number of packets required for
any possible set of receiver BFER is a stochastial matter. At best, BIER can reduce the
number of packet required to reach M BFER to M/BSL.</t>

<t>Intelligent allocation of BFR-id can lead to a more efficient delivery of
BIER traffic. Consider a network requiring k SI and random allocation of BFR-id so that
every edge area of the network has at least one BFR in each of the k BFR. This makes
it more likely that up to k BIER packets need to be sent into such an area to reach
subsets of BFR in it. Compare this to an allocation that attempts to minimize the
number of SI used by BFR in each individual area. This will result in fewer BIER
packets required to reach subsets of BFR in such an area.</t>

</section>
<section anchor="bier-te-review"><name>BIER-TE review</name>

<t>Whereas BIER relies on hop-by-hop routing to direct its traffic, Tree Engineering
for BIER (BIER-TE, <xref target="RFC9262"/>) is based on explicit source routing by encoding the whole
delivery tree in a BitString. This is done to support similar type of requirements
as those that require explicit source routing in IP unicast, also called traffic steering,
such as SRH in IPv6, but also multicast specific ones, such as lowest cost trees (so-called
Steiner trees).</t>

<t>BIER-TE was designed to reuse the packet encodings of BIER and as much as feasible of
the BIER forwarding plane. It therefore relies on the same type of flat BitStrings (and
their addressing via SI) as BIER.  In BIER-TE, each bit of a BitString indicates an adjacency.
In the most simple case those adjacencies are subnet adjacent BFR for the edges of the multicast
tree which are called forward_connected() in BIER-TE, and local_decap() adjacencies for the
leaves of the tree - effectively its BFER.</t>

<t>Because BIER-TE needs to represent the whole delivery tree and not only its leaves/BFER
in the BitString, intelligent and efficient allocation of BP is even more important than
in BIER, and a significant number of BP in every SI must be allocated to transit hops of
the network to allow defining BIER-TE trees across those transit hops. In large networks this
may also lead to the need to allocate BP across multiple SI for the same transit hops and
thus a much larger total number of BP required to represent a smaller number of BFER and
transit hop adjacencies - and in result also more BIER-TE packets required for the
same message to send to the larger number of different SI required.</t>

</section>
<section anchor="rbs-introduction"><name>RBS introduction</name>

<t>One way to understand the Recursive BitString Structure address is to think of it as an
evolution of BIER-TE flat bitstrings. Every single BFR processing a BIER-TE bitstring
only needs to look at a small subset of the BP in it: those BP that indicate adjacencies of
this BFR. All the other bits are ignored because they are adjacencies on other BFR.</t>

<t>Consider we decompose a BIER-TE BitString into separate smaller bitstrings - one each for
every BFR on the multicast tree that we want to encode. The BitString for each BFR now
only needs to have a BP for each subnet adjacent (neighbor) BFR. And an equivalent to the
local_decap() BP to indicate to the BFR itself to be a leaf/BFER on the multicast tree itself.</t>

<t>With this step, RBS eliminates the complex optimization problems resulting from the
flat BitStrings: There is no need anymore for a network wide SI address space and optimizing
which adjacencies and BFR-id to put into which SI. There is no hard partitioning by SI:
A tree can span an arbitrary subset of BFR. Just the total encoded size of the tree needs
to fit into an appropriate maximum header field size. And if the target tree is too large,
then it can arbitrarily be broken up into overlapping subtrees - all originating at the
sender, but each only delivering to a subset of BFER small enough so the encoded tree
fits into the target packet header size. And none of these optimization have to happen
at network configuration time by seeding optimized BIFT, but it happens when building
an RBS address on on ingres router or with the help of a controller.</t>

<t>The RBS encoding is called recursive, because it consists of such a local BitString
for the first BFR of the tree (BFIR), followed by a sequence of RBS sub-trees, one for
each adjacent BFR whose BP is set in the first BFR BitString. Whenever a packet is
forwarded to such an adjacent BFR, the RBS addressing information is appropriately
updated such that that BFR will only have to examine the local BitString for that BFR.
In result, every BFR in RBS only has to examine - like in BIER and BIER-TE a single
BitString. What really changes is that instead of clearing bits in a flat bitstring as
done in BIER/BIER-TE, every hop advances the decoding othe RBS address structure to look
at a differnt, small local BitString.</t>

</section>
</section>
<section anchor="arch"><name>RBS Network Architecture</name>

<section anchor="controller-centric"><name>Controller centric</name>

<t>RBS may simply use the same network architecture as BIER-TE
as shown in <xref target="FIG-ARCH"/>, and operations of the Controller 
is significantly simplified because the complex allocation of
BP across SI, especially the allocation of BP for transit
adjacencies is eliminated.</t>

<figure title="RBS Architecture with Controller" anchor="FIG-ARCH"><artwork><![CDATA[
                    Optional
   |<-IGMP/PIM->  multicast flow   <-PIM/IGMP->|
                     overlay

                    [Controller] 
control plane   .  ^      ^     ^   
               .  /       |      \     BIFT configuration
     ..........  |        |       |    per-flow RBS setup
    .            |        |       |   
   .             v        v       v
Src (-> ... ) -> BFIR-----BFR-----BFER -> (... ->) Rcvr

                |<----------------->|
             RBS-address forwarding plane

 |<.............. <- RBS domain ---> ...............|

              |<--------------------->|
              Routing underlay (optional)
]]></artwork></figure>

</section>
<section anchor="distributeddecentralized"><name>Distributed/Decentralized</name>

<t>Instead of a controller centric network architecture, RBS also lends itself
to a distributed/decentralized model, similar to the typical deployment model
of BIER, with extensions to a link-state IGP routing protocol.</t>

<t>Every BFR can autoamtically allocate its BFR neighbors and derive the size
of its local BitString and allocation of BP to each neighbor from it. This
is then signalled via appropriate link-state IGP extensions.</t>

<t>BFIR can derive not only the hop-by-hop paths towards BFER from this IGP information,
but also the necessary local BitString for each BFR on a tree. In the most simple
cae, these paths are the shorted-paths normally calculated by link-state IGP,
but for traffic-engineering purposes, this can easily include all type of
constrained path calculations.</t>

<t>It is this model that would be attractive, when there are no tree engineering /
traffic engineering requirements, but RBS is simply used to replace flat bitstrings
for BIER to simplify its operations and (depending on size / topology of network)
improve its scale / performance.</t>

</section>
<section anchor="host-to-host"><name>Host-to-host</name>

<t>To eliminate the need for an IP Multicast flow overlays and allow
utilization of benefits of bitstring addressing at the application level
(e.g.: eliminating group membership management for the network), the
 RBS domain may extend all the way into Sender/Receiver
hosts. This is possible with BIER/BIER-TE as well, but when the
total numer of sender/receiver hosts is for example a factor 10 larger
than the number of BFR in BIER, then the elimination of the network wide
SI/BP allocation issue of BIER/BIER-TE could help to make this model
easier deployable with RBS than with BIER-TE/BIER.</t>

<t>To avoid dependencies against initial operating system level network stack
upgrades on hosts, such deployment option could for example be
introduced by tunneling the RBS packets over UDP to first-hop BFIR/BFER
as well as appropriate routing / controller plane extensions.</t>

</section>
</section>
<section anchor="fwd-overview"><name>Overview</name>

<t>This section gives a more thourough run through the life
of a packet forwarded with an RBS address.</t>

<section anchor="example"><name>Example</name>

<t><xref target="FIG-RBS-Topo1"/> shows the example network topology.
R1 has network connections to R2, R3, R4, R5 (not shown) and R6.
R3 and R4 have connections to R1, R7, R8, R9 and R10.
R9 has connections to R3, R4, and further, not shown routers.
For the purpose of explaining RBS, it is irrelevant whether those
connections are separate L2 point-to-point links or adjacencies on shared LANs.</t>

<t>The example multicast tree encoded as an RBS address utilizing
topology informtion as explained in <xref target="arch"/> is
R1 -&gt; (R2, R3 -&gt; (R7), R4 -&gt; (R9 -&gt; (...), R10), R6): The packet
originates in the trees root R1, which needs to form the appropriate
packet header with this trees RBS address and replicate the packet to
R2, R3, R4 and R6. R2, R4 and R6 should receive the packet as domain
egres routers. R3 should only replicate the pcket to R7, and R7 should
replicate the packet to R9 and R10. R10 should only receive the packet,
R9 should receive the packet and further replicate it to further routers
not shown.</t>

<figure title="Example Topology/RBS tree" anchor="FIG-RBS-Topo1"><artwork><![CDATA[
                +---+
                |R1 | (root)
                +-+-+           
            ...........................
     .......    .           .          .
  ...           .            .          ....
  |             |            |            |
+-v-+         +-v-+        +-v-+ (rcvr/ +-v-+
| R2| (rcvr)  |R3 |(vertex)|R4 | leaf)  |R6 | (rcvr)
+-+-+         +---+        +---+        +---+
                .            .
     .................................
  ...           .         .        .....
  |             |         |            |
+-v-+         +-v-+     +-v-+        +-v-+
|R7 | (recvr) |R8 |     |R9 |(rcvr/  |R10| (rcvr)
+-+-+         +---+     +---+ vertex +---+
                          .
                        .....
                    .... more vertex/leaves...
]]></artwork></figure>

<t>R7, R10 and some MSER behind R9. Given how R7, R8, R8, R10 and
the router behind R9 can be reached via both either R3 and R4, this
tree involves an explicit packet steering and replication (tree engineering)
choice of using R3 instead of R4 to reach R7, and R4 instead of R3
to reach R9, R10 (and routers below R9).</t>

</section>
<section anchor="rbs-bift"><name>RBS-BIFT</name>

<t>Every router has an RBS "Bit Index Forwarding Table" (RBS-BIFT) that defines
which BitPosition (BP) (1..N) indicates which adjacency.
<xref target="FIG-RBS-R1-BIFT"/>, shows the example RBS-BIFT for R1.</t>

<figure title="BIFT on R1" anchor="FIG-RBS-R1-BIFT"><artwork><![CDATA[
+--+-------+----------+
|BP|R Flag | Adjacency|
+--+-------+----------+
| 1|      0|   receive|
+--+-------+----------+
| 2|      0|       R2 |
+--+-------+----------+
| 3|      1|       R3 |
+--+-------+----------+
| 4|      1|       R4 |
+--+-------+----------+
| 5|      0|       R5 |
+--+-------+----------+
| 6|      0|       R6 |
+--+-------+----------+
]]></artwork></figure>

<t>The "receive" adjacency is the BP indicating that the
packet is to be received by the router itself. The (R)ercursive
flag indicates whether the adjacency when set in the BitString
of an RBS address will have a subtree (Recursive Unit, see below)
associated with it.</t>

<t>The absence of the R flag allows for more compact RBS encodings 
or adjacencies that for the purpose of RBS are not used for transit.
In the example, R2, R5 and R6 are connected to R1 but also leaf router in
the topology.  Hence they have R=0 in the RBS-BIFT of R1.</t>

</section>
<section anchor="rbs-address"><name>RBS Address</name>

<t>The RBS address as shown in <xref target="FIG-RBSA"/> consists of 
RU-Length, RU-Offset and RecursiveUnit0. Depending on packet header
encoding, these fields do not need to be encoded squentially.</t>

<t>A RecursiveUnit (RU) is the unit of data processed by a particular
router Rx on the multicast tree encoded by the RBS address. RU0 is
the RU processed by the root of the tree. An RU consists of
the BitString whose length is the length of the RBS-BIFT of Rx, followed
by (N-1) AddressFields and N RUs. N is the number of BP set in BitString
with R=1 flag set - e.g. which do need an RU in the RBS address.
Each AddressField indicates the length of one RU. 
There are only N-1 AF for N RU because the length of the N'th
RU can be derived by calculation, saving for every router on the
tree one AF field, and therefore resulting in a more compact encoding.</t>

<t>RU-Offset indicates the offset of the current RU from the start of
RU0. '$' in <xref target="FIG-RBSA"/> is the first bit of RU0, and a value of
RU-Offset=0 indicates that the RU starts at '$' - and is therefore RU0.</t>

<t>For every copy of an RBS packet made by a router, RU-Offset and RU-Length
are updated. None of the other fields of the RBS-Address are modified for
RBS forwarding.</t>

<figure title="RBS Address" anchor="FIG-RBSA"><artwork><![CDATA[
       +----------------------+
       | RU-Length            |
       +----------------------+
       | RU-Offset            |
       +----------------------+
       |$ RecursiveUnit0 (RU0)|
       +----------------------+
      .                       .
 .....                         ................
.                                              .
+-----------+-----+     +--------+---+     +----+
| BitString | AF1 | ... | AF(n-1)|RU1| ... |RU N|
+-----------+-----+     +--------+---+     +----+
]]></artwork></figure>

</section>
<section anchor="processing-on-r1-in-the-example"><name>Processing on R1 in the example</name>

<t>In the example, the root of the tree is is R1, so the BitString
of RU0 is as shown in <xref target="FIG-R1"/></t>

<figure title="RU for R1 (RU0)" anchor="FIG-R1"><artwork><![CDATA[
  BitString (of RU0)
 1 2 3 4 5 6 
+-+-+-+-+-+-+-..-+...+...+
|0|1|1|1|0|1|AF1 |RU1|RU2|
+-+-+-+-+-+-+-..-+...+...+
]]></artwork></figure>

<t>When RBS forwarding in a router processes the RBS address, the
length of the BitString is known from the length of the RBS-BIFT.
In the case of R1 it is therefore known to be 6 bits long.</t>

<t>Two of the BP set in the BitString, BP3 for R3 and for R4
have R=1 in the RBS-BIFT of R1, therefore (N-1)=1 AF field must follow
and N=2 RU must follow in the RBS address for RU0 - one for R3,
one for R4.</t>

<t>When R1 creates packet copies to R3 and R4, it will rewrite
RU-Length and RU-Offset accordingly, so that RU-offset will
point to RU1 for the packet towards R3 and to RU2 for the
packet towards R4, and RU-Length indicates the length of RU1
or RU2.</t>

<t>This forwarding process repeats on every hop along the tree.
When a packet copy is made on a BP with R=0, RU-Length is set
to 0. When such a packet copy is received, it indicates that
no further RU lookup is required, and the packet is only
received - same as processing for a receive BU.</t>

</section>
</section>
<section anchor="specification"><name>Specification</name>

<section anchor="rbs-address-1"><name>RBS Address</name>

<t>Any RBS router MUST support to parse its RU with AF entries that are 8
bit in size.  Any RBS routers SHOULD support to decode a variable length
AF encoding, where 0XXXXXXX (8-bit length AF field) is used to encode a
7-bit XXXXXXX (0..127) values, and where 1XXXXXXXXXXXX is used to
encode an 12-bit value XXXXXXXXXXX. All values indicate the size of an RU
in bits, therefore allowing up to 4096 bit long RU.</t>

<t>An RBS router MUST support processing the BitString size of its configured RBS-BIFT
(see <xref target="bift-size"/>).</t>

<t>RBS routers MUST suport RU-Length and RU-Offset encodings of 12 bits.</t>

</section>
<section anchor="bift-size"><name>RBS-BIFT</name>

<t>An Router must support for its RBS-BIFT to be configured with a number of entries
ranging between min(k,1024), where k is an implementation specific number, no
less than the number of physical interfaces on the router.</t>

<t>The leftmost bit in an RBS RU Bitstrings is RBS-BIFT entry 1.</t>

<t>The type of adjacencies to be supported depend on the encapsulation and
are out of scope.</t>

</section>
<section anchor="rbs-address-creation"><name>RBS address creation</name>

<t>Upon creation of the RBS header with an RBS-Address, RU-Length MUST be 
set to the length of RU0 and RU-offset is set to 0.</t>

</section>
<section anchor="common"><name>Common RBS processing</name>

<t>Whether a header with an RBS address is created/imposed on the root of an
RBS tree or received from another RBS router, encapsulation independent
processing of the packet by RBS forwarding is the same.</t>

<t>Parsing RBS-Address, generating copies and rewriting RU-Length and RU-Offset for
each copy is formally described in <xref target="pseudocode"/></t>

</section>
<section anchor="reciving-rbs-packets"><name>Reciving RBS packets</name>

<t>When a packet copy is received with RU-Length=0, the packet is "received" -
it is passed up the stack to an appropriate receiving entity based on the
encapsulation parameters.</t>

<t>When a packet copy is made for a receive BP, its RU-Length is set to 0 and
the packet is processed as if it was received with RU-Length=0.</t>

</section>
<section anchor="encapsulation-considerations"><name>Encapsulation considerations</name>

<t>The total length of an RBS address is not included in the definition of an
RBS address here. This length is assumed to be provided by some other packet
header field, because it is not required to parse an RBS address itself, but is
only required to parse beyond an RBS address in a packet header by an RBS
unaware parser. The field that carries RU0 may be larger (for example due to
padding) than RU0 itself without problems for the RBS parsing/processing described here.</t>

<t>Additional forwarding rules may be established by specific encapsulations
such as BIER OAM processing steps when using BIER with RFC8296 encapsulation.</t>

<t>Given how the processing of the RBS address describes a naturally loop-free
rewrite operation, no further loop-prevention mechanism is required in packet
processing with RBS addresses, but no harm is done if this is still performed
(on appropriate header TTL fields independent of RBS).</t>

</section>
<section anchor="pseudocode"><name>RBS forwarding Pseudocode</name>

<t>The following RBS forwarding (derived from C language) pseudocode assumes all pointers
(and dereferencing them) are using bit-accurate addresses so that of calculation of
starting bit addresses of address fields and RU in RU0 can be shown with
as simple code as if byte addressing for pointers was used.  byte addressing of
pointers was used. This is NOT supported by C language!</t>

<figure title="RBS forwarding Pseudocode" anchor="FIG-PSEUDOCODE"><artwork><![CDATA[
void ForwardRBS(Packet)
{
  // parse bit accurate addresses of RBS address fields in Packet into
  // RBS.{RULength,RUOffset,RU0}
  RBS = ParseRBSAddress(Packet); 

  if(*(RBS.RULength) == 0) return ReceiveRBS(Packet);
  RU  = RBS.RU0 + *(RBS.RUOffset);
  RUL = *(RBS.RULength);

  BitStringA = RU
  AddressingField =  BitStringA + BIFT.entries;

  // [1] calculate number of R=1 BP set in BitString
  CopyBitString(*BitStringA, *RecursiveBits, BIFT.entries);
  And(*RecursiveBits,*BIFTRecursiveBits, BIFT.entries);
  N = CountBits(*RecursiveBits, BIFT.entries);

  // Start of first RecursiveUnit in RBS address
  // After AddressingField array with 8-bit length fields
  RecursiveUnit = AddressingField + (N - 1) * 8;

  RemainLength = *(RBS.RULength);
  Index = GetFirstBitPosition(*BitStringA);
  while (Index) {
    PacketCopy = Copy(Packet);
    RBSc = ParseRBSAddress(PacketCopy)
    if (BIFT.BP[Index].adjacency == receive)
      *(RBSc.RULength) = 0;
      ReceiveRBS(PacketCopy);
      next;
    }

    If (BIFT.BP[Index].recursive) {
      if(N == 1) {
        RecursiveUnitLength = RemainLength;
      } else {
        RecursiveUnitLength = *AddressingField;
        N--;
        AddressingField += 8;
        RemainLength -= RecursiveUnitLength;
        RemainLength -= 8; // 8 bit of AddressingField
      }
      *(RBSc.RUOffset) = RecursiveUnit - RU0
      *(RBSc.RULength) = RecursiveUnitLength
      RecursiveUnit += RecursiveUnitLength;
    } else {
      *(RBSc.RUOffset) = 0
      *(RBSc.RULength) = 0
      *(MSR6c.SegmentsLeft) -= 1
    }
    SendTo(PacketCopy, BIFT.BP[Index].adjacency)
    Index = GetNextBitPosition(*BitStringA, Index);
  }
}
]]></artwork></figure>

<t>Explanations for <xref target="FIG-PSEUDOCODE"/>.</t>

<t>ForwardRBS(Packet) processes the RBS address independent
of its encapsulation. ParseRBSAddress(Packet) parses the
header of Packet to create a list of bit-accurate pointers to
the elements of an RBS address: RBS.{RULength,RUOffset,RU0}.</t>

<t>BitStringA is the address of the RBS address BitString in Packet.
Other variables use names matching those from the packet header
figures (without " -_").</t>

<t>The BFR local BIFT has a total number of BIFT.entries
addressable BP 1...BIFTentries. The BitString therefore
has BIFT.entries bits.</t>

<t>BIFT.RecursiveBits is a BitString pre-filled by the control
plane with all the BP with the recursive flag set. This is constructed
from the Recursive flag setting of the BP of the BIFT. The
code starting at [1] therefore counts the number of
recursive BP in the packets BitString.</t>

<t>Because the AddressingField does not have an entry for the
last (potentially only) RecursiveUnit, its length has to be calculated
By subtracting the length of the prior N-1 RecursiveUnits from
RULength as received. This is done via variable RemainLength.</t>

<t>For every PacketCopy that is to be forwarded, the RU-Length  and RU-Offset
fields are updated. SendTo(packet,adjacency) takes care of any
encapsulation/architecture specific further rewrites of the packet headers
based on the adjcency of the BP.</t>

</section>
</section>
<section anchor="using-rbs-with-bier-and-rfc8296-encapsulation"><name>Using RBS with BIER and RFC8296 encapsulation</name>

<t>RBS can be used in a BIER domain by introducing as a per-subdomin mode of forwarding,
exactly the same as <xref target="RFC8279"/> (non-TE) BIER and <xref target="RFC9262"/> BIER-TE can co-exist in a BIER.</t>

<t>In BIER deployments, RBS can most easily replace BIER-TE, and using a centralized controller
and therefore simplify and esier scale deployment of tree engineering. RBS should also
be able to replace BIER in networks with link-state routing protocols and reduce the
number of replicated packets in large networks. This requires as aforementioned the
change from hop-by-hop routing to sourc-routing.</t>

<t>When using BIER, RBS routers are BFR, RBS ingres routers are BFIR, RBS egres routers are BFER.
Routers may support multiple RBS-BIFT through different BIFT-ID or SI. This may be useful
when specific constructs such as slices of the network are only allowed to use a subset
of the adjacencies of the network.</t>

<t>The RBS address is encoded as a binary string concatenating {RULenth,RUOffset,RU0} into the
BitString field in <xref target="RFC8296"/> packet headers.  Without changes to <xref target="RFC8296"/>, the length of this
field has to be a power of 2 sized. The RBS address SHOULD be zero-padded to the size used.</t>

<t>In BIER, the BitStringLength (BSL) expects to indicate different BIFT. When using RBS addresses,
it SHOULD be possible for all supported BSL to refer to the same RBS-BIFT, so that upon
imposition of an RBS-Address the smallest power of 2 BitString size can be used without
duplication of BIFT state on routers.</t>

<t>SendTo() of RBS forwarding pseudocode <xref target="pseudocode"/> needs to take care of any BIER
specific rewrites of the <xref target="RFC8296"/> BIER header, specifically the BIFT-id derived from
the RBS-BIFT adjacency.</t>

<t>TBD: This description does not outline, how much of existing BIER IGP extensions could be
reused with RBS and how.</t>

</section>
<section anchor="using-rbs-with-ipv6-extension-header-encapsulation"><name>Using RBS with IPv6 extension header encapsulation</name>

<t>Solutions for stateless IP multicast have been proposed to the IETF under the name
Multicast Source Routing for IPv6 (MSR6). They are based on putting the stateless multicast
structures into an IPv6 routing extension headers and using per-steering-hop rules according to
or derived from <xref target="RFC8200"/>, Section 4.4 rules.  IPv6 forwarding") for source routing.</t>

<t>SendTo() of RBS forwarding pseudocode <xref target="pseudocode"/> needs to take care of any IPv6
specific rewrites of the IPv6 header (IPv6 Destination address) and IPv6 routing extension
header.</t>

<t>For complete support of IPv6 multicast with <xref target="RFC8200"/> compliant source routing, it
is necessary for the IPv6 routing extension header to not only carry the RBS address information
but also an IPv6 multicast destination address field.</t>

<t><xref target="I-D.eckert-msr6-rbs"/> is a proposed IPv6 extension header design for MSR6 using RBS that
is supporting IPv6 multicast.</t>

</section>
<section anchor="security-considerations"><name>Security considerations</name>

</section>
<section anchor="acknowledgements"><name>Acknowledgements</name>

<t>This work is based on the design published by Sheng Jiang, Xu Bing, Yan Shen, Meng Rui, Wan Junjie and Wang Chuang {jiangsheng|bing.xu|yanshen|mengrui|wanjunjie2|wangchuang}@huawei.com, see <xref target="CGM2Design"/>.
Many thanks for Bing Xu (bing.xu@huawei.com) for editorial work on the prior variation of this work <xref target="I-D.xu-msr6-rbs"/>.</t>

</section>
<section anchor="changelog"><name>Changelog</name>

<t>[RFC-editor: please remove]</t>

<t>This document is written in https://github.com/cabo/kramdown-rfc2629 markup language.
This documents source is maintained at https://github.com/toerless/multicast-rbs,
please provide feedback to the bier@ietf.org and/or msr6@ietf.org mailing list and submit an Issue
to the GitHub.</t>

<t>This draft is derived from and superceeds <xref target="I-D.eckert-bier-cgm2-rbs"/> as follows:</t>

<t><list style="symbols">
  <t>Removes larger architectural context (CGM2) and refocusses on only RBS.</t>
  <t>Add explanation about possible distributed/decentralized control plane via
link-state IGP to complement the central controller based approach.</t>
  <t>Define its procedures independent of specific
architectures such as BIER wih RFC8296 encapsulation or proposed MSR encoding.</t>
  <t>Inherits the RBS specific improvements originally introduced with  <xref target="I-D.eckert-msr6-rbs"/>.
RU-Length and RU-Offset to avoid rewriting complete RBS address with the RU of the next
hop and instead just updating these two indices when forwarding RBS address.</t>
  <t>Adds specific proposed encapsulation details for BIER.</t>
</list></t>

</section>


  </middle>

  <back>


    <references title='Normative References'>





<reference anchor='RFC8279' target='https://www.rfc-editor.org/info/rfc8279'>
<front>
<title>Multicast Using Bit Index Explicit Replication (BIER)</title>
<author fullname='IJ. Wijnands' initials='IJ.' role='editor' surname='Wijnands'><organization/></author>
<author fullname='E. Rosen' initials='E.' role='editor' surname='Rosen'><organization/></author>
<author fullname='A. Dolganow' initials='A.' surname='Dolganow'><organization/></author>
<author fullname='T. Przygienda' initials='T.' surname='Przygienda'><organization/></author>
<author fullname='S. Aldrin' initials='S.' surname='Aldrin'><organization/></author>
<date month='November' year='2017'/>
<abstract><t>This document specifies a new architecture for the forwarding of multicast data packets.  It provides optimal forwarding of multicast packets through a &quot;multicast domain&quot;.  However, it does not require a protocol for explicitly building multicast distribution trees, nor does it require intermediate nodes to maintain any per-flow state. This architecture is known as &quot;Bit Index Explicit Replication&quot; (BIER).  When a multicast data packet enters the domain, the ingress router determines the set of egress routers to which the packet needs to be sent.  The ingress router then encapsulates the packet in a BIER header.  The BIER header contains a bit string in which each bit represents exactly one egress router in the domain; to forward the packet to a given set of egress routers, the bits corresponding to those routers are set in the BIER header.  The procedures for forwarding a packet based on its BIER header are specified in this document.  Elimination of the per-flow state and the explicit tree-building protocols results in a considerable simplification.</t></abstract>
</front>
<seriesInfo name='RFC' value='8279'/>
<seriesInfo name='DOI' value='10.17487/RFC8279'/>
</reference>



<reference anchor='RFC8296' target='https://www.rfc-editor.org/info/rfc8296'>
<front>
<title>Encapsulation for Bit Index Explicit Replication (BIER) in MPLS and Non-MPLS Networks</title>
<author fullname='IJ. Wijnands' initials='IJ.' role='editor' surname='Wijnands'><organization/></author>
<author fullname='E. Rosen' initials='E.' role='editor' surname='Rosen'><organization/></author>
<author fullname='A. Dolganow' initials='A.' surname='Dolganow'><organization/></author>
<author fullname='J. Tantsura' initials='J.' surname='Tantsura'><organization/></author>
<author fullname='S. Aldrin' initials='S.' surname='Aldrin'><organization/></author>
<author fullname='I. Meilik' initials='I.' surname='Meilik'><organization/></author>
<date month='January' year='2018'/>
<abstract><t>Bit Index Explicit Replication (BIER) is an architecture that provides optimal multicast forwarding through a &quot;multicast domain&quot;, without requiring intermediate routers to maintain any per-flow state or to engage in an explicit tree-building protocol.  When a multicast data packet enters the domain, the ingress router determines the set of egress routers to which the packet needs to be sent.  The ingress router then encapsulates the packet in a BIER header.  The BIER header contains a bit string in which each bit represents exactly one egress router in the domain; to forward the packet to a given set of egress routers, the bits corresponding to those routers are set in the BIER header.  The details of the encapsulation depend on the type of network used to realize the multicast domain.  This document specifies a BIER encapsulation that can be used in an MPLS network or, with slight differences, in a non-MPLS network.</t></abstract>
</front>
<seriesInfo name='RFC' value='8296'/>
<seriesInfo name='DOI' value='10.17487/RFC8296'/>
</reference>



<reference anchor='RFC9262' target='https://www.rfc-editor.org/info/rfc9262'>
<front>
<title>Tree Engineering for Bit Index Explicit Replication (BIER-TE)</title>
<author fullname='T. Eckert' initials='T.' role='editor' surname='Eckert'><organization/></author>
<author fullname='M. Menth' initials='M.' surname='Menth'><organization/></author>
<author fullname='G. Cauchie' initials='G.' surname='Cauchie'><organization/></author>
<date month='October' year='2022'/>
<abstract><t>This memo describes per-packet stateless strict and loose path steered replication and forwarding for &quot;Bit Index Explicit Replication&quot; (BIER)  packets (RFC 8279); it is called &quot;Tree Engineering for Bit Index Explicit Replication&quot; (BIER-TE) and is intended to be used as the path steering mechanism for Traffic Engineering with BIER.</t><t>BIER-TE introduces a new semantic for &quot;bit positions&quot; (BPs). These BPs indicate adjacencies of the network topology, as opposed to (non-TE) BIER in which BPs indicate &quot;Bit-Forwarding Egress Routers&quot; (BFERs).  A BIER-TE &quot;packets BitString&quot; therefore indicates the edges of the (loop-free) tree across which the packets are forwarded by BIER-TE. BIER-TE can leverage BIER forwarding engines with little changes. Co-existence of BIER and BIER-TE forwarding in the same domain is possible -- for example, by using separate BIER &quot;subdomains&quot; (SDs). Except for the optional routed adjacencies, BIER-TE does not require a BIER routing underlay and can therefore operate without depending on a routing protocol such as the &quot;Interior Gateway Protocol&quot; (IGP).</t></abstract>
</front>
<seriesInfo name='RFC' value='9262'/>
<seriesInfo name='DOI' value='10.17487/RFC9262'/>
</reference>



<reference anchor='RFC8200' target='https://www.rfc-editor.org/info/rfc8200'>
<front>
<title>Internet Protocol, Version 6 (IPv6) Specification</title>
<author fullname='S. Deering' initials='S.' surname='Deering'><organization/></author>
<author fullname='R. Hinden' initials='R.' surname='Hinden'><organization/></author>
<date month='July' year='2017'/>
<abstract><t>This document specifies version 6 of the Internet Protocol (IPv6). It obsoletes RFC 2460.</t></abstract>
</front>
<seriesInfo name='STD' value='86'/>
<seriesInfo name='RFC' value='8200'/>
<seriesInfo name='DOI' value='10.17487/RFC8200'/>
</reference>




    </references>

    <references title='Informative References'>




<reference anchor='I-D.eckert-msr6-rbs'>
   <front>
      <title>Recursive Bitstring Structure (RBS) for Multicast Source Routing over IPv6 (MSR6)</title>
      <author fullname='Toerless Eckert' initials='T. T.' surname='Eckert'>
         <organization>Futurewei Technologies USA</organization>
      </author>
      <author fullname='Xuesong Geng' initials='X.' surname='Geng'>
         <organization>Huawei 2012 NT Lab</organization>
      </author>
      <author fullname='Xiuli Zheng' initials='X.' surname='Zheng'>
         <organization>Huawei 2012 NT Lab</organization>
      </author>
      <author fullname='Rui Meng' initials='R.' surname='Meng'>
         <organization>Huawei 2012 NT Lab</organization>
      </author>
      <author fullname='Fengkai Li' initials='F.' surname='Li'>
         <organization>Huawei 2012 NT Lab</organization>
      </author>
      <date day='11' month='July' year='2022'/>
      <abstract>
	 <t>   This document defines an encoding and corresponding packet processing
   procedures for native IPv6 multicast source routing (MSR6) using a
   so-called &quot;Recursive Bitstring&quot; (RBS) address structure.

   The RBS address structure encodes the source-routed multicast tree as
   a tree of bitstrings.  Each router on the tree only needs to examine
   and perform replication for the one bitstring destined for it.

   The MSR6/RBS IPv6 extension header encoding and processing is modeled
   after that of unicast source routing headers, RFC6554 and RFC8754,
   and shares all elements that can be shared.  To support the RBS
   structure, it is replacing the &quot;Segments Left&quot; pointer to the next
   segment with two fields to point to the next sub-tree to parse.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-eckert-msr6-rbs-00'/>
   <format target='https://www.ietf.org/archive/id/draft-eckert-msr6-rbs-00.txt' type='TXT'/>
</reference>


<reference anchor='I-D.xu-msr6-rbs'>
   <front>
      <title>RBS(Recursive BitString Structure) for Multicast Source Routing over IPv6</title>
      <author fullname='Bing Xu' initials='B.' surname='Xu'>
         <organization>Huawei</organization>
      </author>
      <author fullname='Xuesong Geng' initials='X.' surname='Geng'>
         <organization>Huawei</organization>
      </author>
      <author fullname='Toerless Eckert' initials='T. T.' surname='Eckert'>
         <organization>Futurewei Technologies</organization>
      </author>
      <date day='30' month='March' year='2022'/>
      <abstract>
	 <t>   This document defines a new type of segment: End.RBS, and the
   corresponding packet processing procedures over the IPv6 data plane
   for the MSR6(Multicast Source Routing over IPv6) TE solutions.


	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-xu-msr6-rbs-01'/>
   <format target='https://www.ietf.org/archive/id/draft-xu-msr6-rbs-01.txt' type='TXT'/>
</reference>


<reference anchor='I-D.eckert-bier-cgm2-rbs'>
   <front>
      <title>Carrier Grade Minimalist Multicast (CGM2) using Bit Index Explicit Replication (BIER) with Recursive BitString Structure (RBS) Addresses</title>
      <author fullname='Toerless Eckert' initials='T. T.' surname='Eckert'>
         <organization>Futurewei Technologies USA</organization>
      </author>
      <author fullname='Bing Xu' initials='B.' surname='Xu'>
         <organization>Huawei Technologies (2012Lab)</organization>
      </author>
      <date day='9' month='February' year='2022'/>
      <abstract>
	 <t>   This memo introduces the architecture of a multicast architecture
   derived from BIER-TE, which this memo calls Carrier Grade Minimalist
   Multicast (CGM2).  It reduces limitations and complexities of BIER-TE
   by replacing the representation of the in-packet-header delivery tree
   of packets through a &quot;flat&quot; BitString of adjacencies with a
   hierarchical structure of BFR-local BitStrings called the Recursive
   BitString Structure (RBS) Address.

   Benefits of CGM2 with RBS addresses include smaller/fewer BIFT in
   BFR, less complexity for the network architect and in the CGM2
   controller (compared to a BIER-TE controller) and fewer packet copies
   to reach a larger set of BFER.

   The additional cost of forwarding with RBS addresses is a slightly
   more complex processing of the RBS address in BFR compared to a flat
   BitString and the novel per-hop rewrite of the RBS address as opposed
   to bit-reset rewrite in BIER/BIER-TE.

   CGM2 can support the traditional deployment model of BIER/BIER-TE
   with the BIER/BIER-TE domain terminating at service provider PE
   routers as BFIR/BFER, but it is also the intention of this document
   to expand CGM2 domains all the way into hosts, and therefore
   eliminating the need for an IP Multicast flow overlay, further
   reducing the complexity of Multicast services using CGM2.  Note that
   this is not fully detailed in this version of the document.

   This document does not specify an encapsulation for CGM2/RBS
   addresses.  It could use existing encapsulations such as [RFC8296],
   but also other encapsulations such as IPv6 extension headers.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-eckert-bier-cgm2-rbs-01'/>
   <format target='https://www.ietf.org/archive/id/draft-eckert-bier-cgm2-rbs-01.txt' type='TXT'/>
</reference>


<reference anchor="CGM2Design" target="https://github.com/BingXu1112/CGMM/blob/main/Novel%20Multicast%20Protocol%20Proposal%20Introduction.pptx">
  <front>
    <title>Novel Multicast Protocol Proposal Introduction</title>
    <author initials="S." surname="Jiang" fullname="Sheng Jiang">
      <organization></organization>
    </author>
    <author initials="B. (Robin)" surname="Xu" fullname="Bing (Robin) Xu">
      <organization></organization>
    </author>
    <author initials="Y." surname="Shen" fullname="Yan Shen">
      <organization></organization>
    </author>
    <author initials="M." surname="Rui" fullname="Meng Rui">
      <organization></organization>
    </author>
    <author initials="W." surname="Junjie" fullname="Wan Junjie">
      <organization></organization>
    </author>
    <author initials="W." surname="Chuang" fullname="Wang Chuang">
      <organization></organization>
    </author>
    <date year="2021" month="October" day="10"/>
  </front>
</reference>


    </references>


<section anchor="high-speed-implementation-considerations"><name>High-speed implementation considerations</name>

<t>RBS was designed with high-speed, low-cost forwarding hardware and possible backward compatibility
with potentially existing flat-bitstring look-up and replication hardware in mind.</t>

<t>Because RBS requires to only perform replication on each router on a single
bitstring, it could be possible to reuse existing bitstring replication hardware,
or design future hardware such that it supports BIER, BIER-TE and RBS bitstrings.</t>

<t>The calculations required to process an RBS header are the added complexity of
processing RBS packets are the additional new cost of RBS. It has to be seen
whether / how these are feasible at the low-end of high-speed forwarding plane
hardware, especially P4. Further optimizations to reduce calculations are possible,
but at the expense of compression of the RBS address.</t>

<t>RBS also minimizes write-cycles to packet memory by only requiring per-packet-copy
rewrites of the RU-Length and RU-Offset fields. With mandatory encoding of 12
bits each, these are 24 bits to rewrite and should therefore be causing minimal
cost with todays high-speed forwarding hardware.</t>

</section>
<section anchor="complete-rbs-example"><name>Complete RBS example</name>

<t>TBD: Need to rewrite more elaborete multi-hop example from <xref target="I-D.eckert-bier-cgm2-rbs"/> with RU-Offset, RU-Length.</t>

</section>
<section anchor="replication-efficiency-performance-considerations"><name>Replication efficiency performance considerations</name>

<t>This section discusses in more detail the number of packets
required to reach a set of receivers when using flat bitstrings
vs. RBS addresses. The first sub-section gives a hopefully
simple to understand theoretical topology example, the second
sub-section presents initial results of a real-world, large-network
simulation.</t>

<section anchor="reducing-number-of-duplicate-packet-copies"><name>Reducing number of duplicate packet copies</name>

<t>If the total size of an RBS encoded delivery tree is
larger than a supported maximum RBS header size, then
the controller simply needs to divide the tree
into multiple subtrees, each only addressing a part
of the BFER (leaves) of the target tree and pruning
any unnecessary branches.</t>

<figure title="Simple Topology Example" anchor="FIG-SMPLT"><artwork><![CDATA[
             B1
            /  \
      B2    B3
        /   \  /  \
       /     \/    \
     B4      B5     B6
   /..|     /  \    |..\
B7..B99  B100..B200 B201...B300
]]></artwork></figure>

<t>Consider the simple topology in <xref target="FIG-SMPLT"/> and a multicast packet
that needs to reach all BFER B7...B300. Assume that
the desired maximum RBM header size is such that a
RBS address size of &lt;= 256 bits is desired. The 
controller could create an RBS address
B1=&gt;B2=&gt;B4=&gt;(B7..B99), for a first packet, an
RBS address B1=&gt;B3=&gt;B5=&gt;(B100..B200) for a second
packet and a third RBS address B1=&gt;B3=&gt;B6=&gt;B201...B300.</t>

<t>The elimination of larger BIFT state in BFR
through multiple SI in BIER/BIER-TE does come at
the expense of replicating initial hops of a tree
in RBS addresses, such as in the example the encoding
of B1=&gt;B3 in the example.</t>

<t>Consider that the assignment of BFIR-ids with BIER
in the above example is not carefully engineered. It is
then easily possible that the BFR-ids for B7..B99 are not
sequentially, but split over a larger BFIR-id space.
If the same is true for all BFER, then it is possible
that each of the three BFR B4,B5 and B6 has attached
BFER from three different SI and one may need to send
for example three multiple packets to B7 to
address all BFER B7..B99 or to B5 to address all
B100..B200 or B6 to address all B201...B300. These
unnecessary duplicate packets across B4, B5 or B6 are
because of the addressing principle in BIER and are not
necessary in RBS, as long as the total length of an RBS
address does not require it.</t>

</section>
<section anchor="analysis"><name>Statistical Analysis of performance gain</name>

<t>TBD: Comparison of number of packets/header sizes required
in large real-world operator topology between BIER/BIER-TE and RBS.
Analysis: Gain in dense topology</t>

<t>Topology description:
1. Typical topology of Beijing Mobile in China.
2. All zones dual homing access to backbone.
3. Core layer: 4 nodes full mesh connected
4. Aggregation layer: 8 nodes are divided into two layers, with full interconnection between the layers and dual homing access to the core layer on the upper layer.
5. Aggregation rings: 8 rings, 6 nodes per ring
6. Access rings: 3600 nodes, 18 nodes per ring</t>

<figure title="Validation Topology" anchor="FIG-TOPO"><artwork><![CDATA[
                  ┌──────┐          ┌──────┐
                  │      ├──────────┤      │
                 /└──────┘\        /└──────┘\   Interconnected
                /   / | \  \      /  / | \   \   BackBone
       ┌──────┐/   /  |  \  \    /  /  |  \   \┌──────┐
       │      │   /   |   \  \  /  /   |   \   │      │
       └───┬──┘  /    |    \  \/  /    |    \  └─┬────┘
           │    /     |     \ /\ /     |     \   │
        ┌──┴───┐      |      /  \      |      ┌──┴───┐
        │      │------------+ \/ +------------│      │
        └──────┘\     |       /\       |     /└──────┘
                 \    |      /  \      |    /
                  \ ┌──────┐/    \┌──────┐ /
                   \│      ├──────┤      │/
                    └───┬──┘      └───┬──┘
                        │   \     /   │  Dual Return Access
                        │    \   /    │
                        │     \ /     │
                        │      /      │
                        │     / \     │
                      ┌─┴───┐/   \┌───┴─┐
                      │     ├─────┤     │
                      └─┬───┘\   /└───┬─┘
                        │     \ /     │  Core Layer
                        │      /      │
                        │     / \     │
                      ┌─┴───┐/   \┌───┴─┐
                     /│     ├─────┤     │\
                    / └──┬──┘\   /└──┬──┘ \
                   /     │\   \ /   /│     \   Zone1
                  /      │ \   \   / │      \
                 /       │  \ / \ /  │       \
                /   +----│---+   +---│----+   \
               /   /     │    \ /    │     \   \
              /   /      │     +     │      \   \
             /   /       │    / \    │       \   \
           ┌───┐/       ┌┴──┐/   \┌──┴┐       \┌───┐
           │   │\      /│   │     │   │\      /│   │
           └─┬─┘ \    / └─┬─┘\   /└─┬─┘ \    / └─┬─┘  Aggregation
             │    \  /    │   \ /   │    \  /    │    Layer
             │     \/     │    /    │     \/     │
             │     /\     │   / \   │     /\     │
           ┌─┴─┐  /  \  ┌─┴─┐/   \┌─┴─┐  /  \  ┌─┴─┐
           │   │--    --│   │     │   │--    --│   │
           └───┘        └───┘\   /└───┘\       └───┘
                        / | \ \ /  / |  \
                       /  |  \ \  /  |   \
                      /   |   / \/   |    \
                     / +--|--+ \/+---|---+ \
                    / /   |    /\    |    \ \
                 ┌───┐   ┌┴──┐/  \┌───┐   ┌───┐   ASBR
                 │   │   │   │    │   │   │   │
                 └─┬─┘   └─┬─┘    └─┬─┘   └─┬─┘
                   │       │        │       │  
                   │       │        │       │  
                 ┌─┴─┐   ┌─┴─┐    ┌─┴─┐   ┌─┴─┐
                 │   │   │   │    │   │   │   │
                 └─┬─┘   └─┬─┘    └─┬─┘   └─┬─┘
                   │       │        │       │  
                   │       │ 8Rings │       │  
                 ┌─┴─┐   ┌─┴─┐ ...┌─┴─┐   ┌─┴─┐
                 │   │---│   │    │   │---│   │
             ----└───┘   └───┘    └───┘\  └───┘
            /   /   \  \   |  \       \ \    |  \
          /    /     \  \  |   \       \ +---|-+ \
         /    /       \  +-|---+\       \    |  \ \   
       /     /         \   |    \\       \   |   \ \   
      /     /           \  |     \\       \  |    \ \  
     /     /             \ |      \\       \ |     \ \ 
┌───┐   ┌───┐           ┌───┐   ┌───┐       ┌───┐   ┌───┐ CSBR
│   │   │   │           │   │   │   │       │   │   │   │ 
└─┬─┘   └─┬─┘           └─┬─┘   └─┬─┘       └─┬─┘   └─┬─┘ 
  │       │    Access     │       │           │       │   
  │       │    Rings      │       │           │       │   
┌─┴─┐   ┌─┴─┐  ...      ┌─┴─┐   ┌─┴─┐       ┌─┴─┐   ┌─┴─┐ 
│   │   │   │           │   │   │   │       │   │   │   │ 
└─┬─┘   └─┬─┘           └─┬─┘   └─┬─┘       └─┬─┘   └─┬─┘ 
  │       │               │       │           │       │   
  │       │               │       │           │       │   
┌─┴─┐   ┌─┴─┐           ┌─┴─┐   ┌─┴─┐       ┌─┴─┐   ┌─┴─┐ 
│   │   │   │           │   │   │   │       │   │   │   │ 
└───┘...└───┘           └───┘...└───┘       └───┘...└───┘ 
]]></artwork></figure>

<t>Comparison notes:</t>

<t><list style="numbers">
  <t>RBS: We randomly select egress points as group members, with the total number ranging from 10 to 28800 (for sake of simplicity, we assume merely one client per egress point). The egress points are randomly distributed in the topology with 10 runs for each value, showing the average result in our graphs as below. The total number of samples is 60</t>
  <t>BIER: We divide the overall topology into 160 BIER domains, each of which includes 180 egress points, providing the total of 28000 egress points.</t>
  <t>Simulation: In order to compare the BIER against the in-packet tree encoding mechanism, we limit the size of the header to 256 bits (the typical size of a BIER header).</t>
</list></t>

<t>Results are shown in the following image: https://user-images.githubusercontent.com/92767820/153332926-defe38e4-1b63-4b16-852f-feaae487d307.png</t>

<t>Conclusions:</t>

<t><list style="numbers">
  <t>BIER reaches its 160 packet replication limit at about 500 users, while the in-packet tree encoding reaching its limit of 125 replications at about 12000 users. And the following decrease of replications is caused by the use of node-local broadcast as a further optimization.</t>
  <t>For the sake of comparison, the same 256-bit encapsulation limit is imposed on RBS, but we can completely break the 256-bit encapsulation limit, thus allowing the source to send fewer multicast streams.</t>
  <t>RBS encoding performs significantly better than BIER in that it requires less packet replications and network bandwidth.</t>
</list></t>

</section>
</section>


  </back>

<!-- ##markdown-source:
H4sIAAAAAAAAA+19S3McyZHmHWb4D7HsWVOhWU+QRJNosU0AH92Q8QEDiJV2
BEmWVZUFZLOQWZuZBRAiYLam8x500EGHPc5RR/0i/ZL1z93jlZUFQhqN2diO
0E2ykJXx8vC3e3j0er3NjUkxzfKzXbOsZ72nmxubG3VWz9Ndc5ROlmWVXaZm
P6uP65JeMvTPclIvy9R0jvaPt8zedFqmVZVWZlaUZv/g1ZFJ8ql5e3y0s7mR
jMdlerlrxlla9spxtbkxLSZ5ckF9T8tkVvfSyce0rHv2+95wuLlxRTNBPzSv
pE7PivJ616SfFpsb2aLcNTR8VW8Ph8+G25hpVdNov03mRU59Xqc0wiLbNb+q
i0nXVEVZl+msok/XF/JhUlxcpHld/Rptk2V9XpS7mxvG9PAX/8jsPhRpOadl
mVc8QfdtWQAu6TSri9I9LEqa8eslgHKVZuZDOjnPi3lxlhFQTo733HsVzSat
d8329vbQvKBplMncvPq0APyukmv33iSracnHSV4n5sU8KRP/TTGl4V/smWdP
hk+GweMldUZtwtHSiySbE7zq9GeTqj9Llv1p2rbUt9nkPEnn5i1N6Dxe00lO
e08IUF+bYmY+LNMxYUCar477fVpeJPl1c2yA+vxnyzzr1bbtmkn8cplWBWHX
92l+Fs/hh2UCoG4PR9vm3QfzJhmvDv/iPMuT5uA02Nkn6fZn59xJn3a/dfBs
Oc/Mv57/48b+Hfr6hG6/MPTRMgPg/1HjEsDPyuWXBn1Nb31MMvMmu/ew2v88
m0nbaAT8lxeEATWhC5PT0esXT7e/eeY/P9uxn59t72z758PhLlpn+Sxqf9B7
2VfWcFGVO2AN7vmn5eqzkI1Mzi623Zcvvn+7/TKtsrN8V9ainO1dcQmUX87r
bJJUtTksC2IZxRwfFkVFdHlAYC6mxOqyQhF+StyIiHe4PeqNhvS/dpiUZyDq
87peVLuDwVlWny/HAMxgnzD+l8vRaLQ9oHm8HYznxXhAgMwHPPx/3x66CdBn
OwX5yJOgj+E0+otF/UlGDVgXfvwO6xYfAwHNz7PEo9bKO5geMfGCCHOLCNC9
Z5ov/s8k5w7X9gQMBiqvfeEX1MPPl/mPWXrXK2eE1Ev8A5To9XomGRPLTCY1
fv9wnlWE3xeFyRQkxF0TMPQFvYHNSXqVk01lCq5K7CcB4MC9LtxegwtXEC7z
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

-->

</rfc>

