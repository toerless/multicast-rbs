<?xml version="1.0" encoding="utf-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.6.9 (Ruby 3.1.2) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

]>

<?rfc comments="yes"?>

<rfc ipr="trust200902" docName="draft-eckert-bier-rbs-00" category="exp" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="bier-rbs">Recursive BitString Structure (RBS) Addresses for BIER and MSR6</title>

    <author initials="T." surname="Eckert" fullname="Toerless Eckert" role="editor">
      <organization>Futurewei Technologies USA</organization>
      <address>
        <postal>
          <street>2220 Central Expressway</street>
          <city>Santa Clara</city>
          <code>CA 95050</code>
          <country>USA</country>
        </postal>
        <email>tte@cs.fau.de</email>
      </address>
    </author>
    <author initials="M." surname="Menth" fullname="Michael Menth">
      <organization>University of Tuebingen</organization>
      <address>
        <postal>
          <country>Germany</country>
        </postal>
        <email>menth@uni-tuebingen.de</email>
      </address>
    </author>
    <author initials="X." surname="Geng" fullname="Xuesong Geng">
      <organization>Huawei 2012 NT Lab</organization>
      <address>
        <postal>
          <country>China</country>
        </postal>
        <email>gengxuesong@huawei.com</email>
      </address>
    </author>
    <author initials="X." surname="Zheng" fullname="Xiuli Zheng">
      <organization>Huawei 2012 NT Lab</organization>
      <address>
        <postal>
          <country>China</country>
        </postal>
        <email>zhengxiuli@huawei.com</email>
      </address>
    </author>
    <author initials="R." surname="Meng" fullname="Rui Meng">
      <organization>Huawei 2012 NT Lab</organization>
      <address>
        <postal>
          <country>China</country>
        </postal>
        <email>mengrui@huawei.com</email>
      </address>
    </author>
    <author initials="F." surname="Li" fullname="Fengkai Li">
      <organization>Huawei 2012 NT Lab</organization>
      <address>
        <email>lifengkai@huawei.com</email>
      </address>
    </author>

    <date year="2022" month="October" day="20"/>

    
    <workgroup>BIER</workgroup>
    

    <abstract>


<t>This memo introduces a compact data-structure representation of multicast trees
called "Recursive Bitstring Structure" (RBS) and its use for (stateless)
forwarding of packets that include this structure in their
header. It is intended as an alternative to "flat" bitstring addresses
as used in BIER and BIER-TE or possible forwarding plane variations such as MSR6.
RBS aims to improve performance and scalability over flat bitstrings and simplify
operations.</t>

<t>Operations is simplified because RBS does not require the use, management and optimization
of network-wide configured address spaces BIFT-ID and SI and because one common RBS mechanism
can replace flat bitstring addresses for both shortest-path forwarding and tree engineered
forwarding. It intends to improve performance by allowing multicast to sparse set of
receivers in larger networks with fewer packets and it intends to improve scalability
by requiring less BIFT state on routers.</t>



    </abstract>



  </front>

  <middle>


<section anchor="introduction"><name>Introduction</name>

<t>This memo introduces a compact data-structure representation of multicast trees
called "Recursive Bitstring Structure" (RBS) and its use for (stateless)
forwarding of packets that include this structure in their
header. It is intended as an alternative to "flat" bitstring addresses
in BIER and BIER-TE or their possible variations such as MSR6.
RBS aims to improve performance and scalability over flat bitstrings and simplify
operations.</t>

<t>Operations is simplified because RBS does not require the use, management and optimization
of network-wide configured address spaces BIFT-ID and SI and because one common RBS mechanism
can replace flat bitstring addresses for both shortest-path forwarding and tree engineered
forwarding.</t>

<t>This document calls the bitstring addressing used today in BIER and BIER-TE "flat" solely as
simple to remember distinction to the "recursive" bitstring addressing used by RBS.</t>

<t>The document is structured as follows:</t>

<t>The introduction reviews the aspect of BIER and BIER-TE that RBS intends to improve on
to then give an introduction to RBS.</t>

<t>The architecture section describes the models how RBS can integrate into comprehensive forwarding
architectures such as those defineed by BIER/BIER-TE.</t>

<t>The Overview section explains RBS address encoding and forwarding based on an example</t>

<t>The Specification section defines normative requirements of RBS including forwarding Pseudocode.</t>

<t>The section on using RBS with BIER and RFC8296 encapsulation describes proposed normative
aspects when applying RBS to BIER.</t>

<t>Appendices discuss High-speed implementation considerations and current insight into
how well RBS can help to reducing the number of of packet required to be sent with RBS.</t>

<section anchor="bier-review"><name>BIER review</name>

<t>In BIER, each bit of a bitstring indicates a BIER egres router (BFER). When using
<xref target="RFC8296"/> encapsulation, BitString can have a BitStringLength (BSL) of 2^N, N=6...12.
Routers may not be able to support up to 2^12=496 long BitStrings. The most common
BSL assumed to be supported is 256.</t>

<t>When a network has a number M of BFER, M &gt;&gt; BSL support by routers in the network,
it it necessary to use multiple "sets" of BitStrings across the network to address all BFER.
Each set has a SetIdentifier (SI). BFER are identified in BIER via their BFR-id which is
(SI &lt;&lt; N | 2^BP ), where BP is the BitPosition, the bit in the BitString used for this BFER:
the lower N bits of the BFR-id are the BP of the BFER and the high order bits the SI.
In <xref target="RFC8279"/> this is also shown as (SI:BitString), where the BitString has only the BP of
the BFER set.</t>

<t>When a network requires k SI to address all BFER, then a message that needs to
be sent to k arbitrary BFER in the network may require to send as many as k BIER packets -
when each of the k BFER has a different SI. The total number of packets required for
any possible set of receiver BFER is a stochastial matter. At best, BIER can reduce the
number of packet required to reach M BFER to M/BSL.</t>

<t>Intelligent allocation of BFR-id can lead to a more efficient delivery of
BIER traffic. Consider a network requiring k SI and random allocation of BFR-id so that
every edge area of the network has at least one BFR in each of the k BFR. This makes
it more likely that up to k BIER packets need to be sent into such an area to reach
subsets of BFR in it. Compare this to an allocation that attempts to minimize the
number of SI used by BFR in each individual area. This will result in fewer BIER
packets required to reach subsets of BFR in such an area.</t>

</section>
<section anchor="bier-te-review"><name>BIER-TE review</name>

<t>Whereas BIER relies on hop-by-hop routing to direct its traffic, Tree Engineering
for BIER (BIER-TE, <xref target="RFC9262"/>) is based on explicit source routing by encoding the whole
delivery tree in a BitString. This is done to support similar type of requirements
as those that require explicit source routing in IP unicast, also called traffic steering,
such as SRH in IPv6, but also multicast specific ones, such as lowest cost trees (so-called
Steiner trees).</t>

<t>BIER-TE was designed to reuse the packet encodings of BIER and as much as feasible of
the BIER forwarding plane. It therefore relies on the same type of flat BitStrings (and
their addressing via SI) as BIER.  In BIER-TE, each bit of a BitString indicates an adjacency.
In the most simple case those adjacencies are subnet adjacent BFR for the edges of the multicast
tree which are called forward_connected() in BIER-TE, and local_decap() adjacencies for the
leaves of the tree - effectively its BFER.</t>

<t>Because BIER-TE needs to represent the whole delivery tree and not only its leaves/BFER
in the BitString, intelligent and efficient allocation of BP is even more important than
in BIER, and a significant number of BP in every SI must be allocated to transit hops of
the network to allow defining BIER-TE trees across those transit hops. In large networks this
may also lead to the need to allocate BP across multiple SI for the same transit hops and
thus a much larger total number of BP required to represent a smaller number of BFER and
transit hop adjacencies - and in result also more BIER-TE packets required for the
same message to send to the larger number of different SI required.</t>

</section>
<section anchor="rbs-introduction"><name>RBS introduction</name>

<t>One way to understand the Recursive BitString Structure address is to think of it as an
evolution of BIER-TE flat bitstrings. Every single BFR processing a BIER-TE bitstring
only needs to look at a small subset of the BP in it: those BP that indicate adjacencies of
this BFR. All the other bits are ignored because they are adjacencies on other BFR.</t>

<t>Consider we decompose a BIER-TE BitString into separate smaller bitstrings - one each for
every BFR on the multicast tree that we want to encode. The BitString for each BFR now
only needs to have a BP for each subnet adjacent (neighbor) BFR. And an equivalent to the
local_decap() BP to indicate to the BFR itself to be a leaf/BFER on the multicast tree itself.</t>

<t>With this step, RBS eliminates the complex optimization problems resulting from the
flat BitStrings: There is no need anymore for a network wide SI address space and optimizing
which adjacencies and BFR-id to put into which SI. There is no hard partitioning by SI:
A tree can span an arbitrary subset of BFR. Just the total encoded size of the tree needs
to fit into an appropriate maximum header field size. And if the target tree is too large,
then it can arbitrarily be broken up into overlapping subtrees - all originating at the
sender, but each only delivering to a subset of BFER small enough so the encoded tree
fits into the target packet header size. And none of these optimization have to happen
at network configuration time by seeding optimized BIFT, but it happens when building
an RBS address on on ingres router or with the help of a controller.</t>

<t>The RBS encoding is called recursive, because it consists of such a local BitString
for the first BFR of the tree (BFIR), followed by a sequence of RBS sub-trees, one for
each adjacent BFR whose BP is set in the first BFR BitString. Whenever a packet is
forwarded to such an adjacent BFR, the RBS addressing information is appropriately
updated such that that BFR will only have to examine the local BitString for that BFR.
In result, every BFR in RBS only has to examine - like in BIER and BIER-TE a single
BitString. What really changes is that instead of clearing bits in a flat bitstring as
done in BIER/BIER-TE, every hop advances the decoding othe RBS address structure to look
at a differnt, small local BitString.</t>

</section>
</section>
<section anchor="arch"><name>RBS Network Architecture</name>

<section anchor="controller-centric"><name>Controller centric</name>

<t>RBS may simply use the same network architecture as BIER-TE
as shown in <xref target="FIG-ARCH"/>, and operations of the Controller 
is significantly simplified because the complex allocation of
BP across SI, especially the allocation of BP for transit
adjacencies is eliminated.</t>

<figure title="RBS Architecture with Controller" anchor="FIG-ARCH"><artwork><![CDATA[
                    Optional
   |<-IGMP/PIM->  multicast flow   <-PIM/IGMP->|
                     overlay

                    [Controller] 
control plane   .  ^      ^     ^   
               .  /       |      \     BIFT configuration
     ..........  |        |       |    per-flow RBS setup
    .            |        |       |   
   .             v        v       v
Src (-> ... ) -> BFIR-----BFR-----BFER -> (... ->) Rcvr

                |<----------------->|
             RBS-address forwarding plane

 |<.............. <- RBS domain ---> ...............|

              |<--------------------->|
              Routing underlay (optional)
]]></artwork></figure>

</section>
<section anchor="distributeddecentralized"><name>Distributed/Decentralized</name>

<t>Instead of a controller centric network architecture, RBS also lends itself
to a distributed/decentralized model, similar to the typical deployment model
of BIER, with extensions to a link-state IGP routing protocol.</t>

<t>Every BFR can autoamtically allocate its BFR neighbors and derive the size
of its local BitString and allocation of BP to each neighbor from it. This
is then signalled via appropriate link-state IGP extensions.</t>

<t>BFIR can derive not only the hop-by-hop paths towards BFER from this IGP information,
but also the necessary local BitString for each BFR on a tree. In the most simple
cae, these paths are the shorted-paths normally calculated by link-state IGP,
but for traffic-engineering purposes, this can easily include all type of
constrained path calculations.</t>

<t>It is this model that would be attractive, when there are no tree engineering /
traffic engineering requirements, but RBS is simply used to replace flat bitstrings
for BIER to simplify its operations and (depending on size / topology of network)
improve its scale / performance.</t>

</section>
<section anchor="host-to-host"><name>Host-to-host</name>

<t>To eliminate the need for an IP Multicast flow overlays and allow
utilization of benefits of bitstring addressing at the application level
(e.g.: eliminating group membership management for the network), the
 RBS domain may extend all the way into Sender/Receiver
hosts. This is possible with BIER/BIER-TE as well, but when the
total numer of sender/receiver hosts is for example a factor 10 larger
than the number of BFR in BIER, then the elimination of the network wide
SI/BP allocation issue of BIER/BIER-TE could help to make this model
easier deployable with RBS than with BIER-TE/BIER.</t>

<t>To avoid dependencies against initial operating system level network stack
upgrades on hosts, such deployment option could for example be
introduced by tunneling the RBS packets over UDP to first-hop BFIR/BFER
as well as appropriate routing / controller plane extensions.</t>

</section>
</section>
<section anchor="fwd-overview"><name>Overview</name>

<t>This section gives a more thourough run through the life
of a packet forwarded with an RBS address.</t>

<section anchor="example"><name>Example</name>

<t><xref target="FIG-RBS-Topo1"/> shows the example network topology.
R1 has network connections to R2, R3, R4, R5 (not shown) and R6.
R3 and R4 have connections to R1, R7, R8, R9 and R10.
R9 has connections to R3, R4, and further, not shown routers.
For the purpose of explaining RBS, it is irrelevant whether those
connections are separate L2 point-to-point links or adjacencies on shared LANs.</t>

<t>The example multicast tree encoded as an RBS address utilizing
topology informtion as explained in <xref target="arch"/> is
R1 -&gt; (R2, R3 -&gt; (R7), R4 -&gt; (R9 -&gt; (...), R10), R6): The packet
originates in the trees root R1, which needs to form the appropriate
packet header with this trees RBS address and replicate the packet to
R2, R3, R4 and R6. R2, R4 and R6 should receive the packet as domain
egres routers. R3 should only replicate the pcket to R7, and R7 should
replicate the packet to R9 and R10. R10 should only receive the packet,
R9 should receive the packet and further replicate it to further routers
not shown.</t>

<figure title="Example Topology/RBS tree" anchor="FIG-RBS-Topo1"><artwork><![CDATA[
                +---+
                |R1 | (root)
                +-+-+           
            ...........................
     .......    .           .          .
  ...           .            .          ....
  |             |            |            |
+-v-+         +-v-+        +-v-+ (rcvr/ +-v-+
| R2| (rcvr)  |R3 |(vertex)|R4 | leaf)  |R6 | (rcvr)
+-+-+         +---+        +---+        +---+
                .            .
     .................................
  ...           .         .        .....
  |             |         |            |
+-v-+         +-v-+     +-v-+        +-v-+
|R7 | (recvr) |R8 |     |R9 |(rcvr/  |R10| (rcvr)
+-+-+         +---+     +---+ vertex +---+
                          .
                        .....
                    .... more vertex/leaves...
]]></artwork></figure>

<t>R7, R10 and some MSER behind R9. Given how R7, R8, R8, R10 and
the router behind R9 can be reached via both either R3 and R4, this
tree involves an explicit packet steering and replication (tree engineering)
choice of using R3 instead of R4 to reach R7, and R4 instead of R3
to reach R9, R10 (and routers below R9).</t>

</section>
<section anchor="rbs-bift"><name>RBS-BIFT</name>

<t>Every router has an RBS "Bit Index Forwarding Table" (RBS-BIFT) that defines
which BitPosition (BP) (1..N) indicates which adjacency.
<xref target="FIG-RBS-R1-BIFT"/>, shows the example RBS-BIFT for R1.</t>

<figure title="BIFT on R1" anchor="FIG-RBS-R1-BIFT"><artwork><![CDATA[
+--+-------+----------+
|BP|R Flag | Adjacency|
+--+-------+----------+
| 1|      0|   receive|
+--+-------+----------+
| 2|      0|       R2 |
+--+-------+----------+
| 3|      1|       R3 |
+--+-------+----------+
| 4|      1|       R4 |
+--+-------+----------+
| 5|      0|       R5 |
+--+-------+----------+
| 6|      0|       R6 |
+--+-------+----------+
]]></artwork></figure>

<t>The "receive" adjacency is the BP indicating that the
packet is to be received by the router itself. The (R)ercursive
flag indicates whether the adjacency when set in the BitString
of an RBS address will have a subtree (Recursive Unit, see below)
associated with it.</t>

<t>The absence of the R flag allows for more compact RBS encodings 
or adjacencies that for the purpose of RBS are not used for transit.
In the example, R2, R5 and R6 are connected to R1 but also leaf router in
the topology.  Hence they have R=0 in the RBS-BIFT of R1.</t>

</section>
<section anchor="rbs-address"><name>RBS Address</name>

<t>The RBS address as shown in <xref target="FIG-RBSA"/> consists of 
RU-Length, RU-Offset and RecursiveUnit0. Depending on packet header
encoding, these fields do not need to be encoded squentially.</t>

<t>A RecursiveUnit (RU) is the unit of data processed by a particular
router Rx on the multicast tree encoded by the RBS address. RU0 is
the RU processed by the root of the tree. An RU consists of
the BitString whose length is the length of the RBS-BIFT of Rx, followed
by (N-1) AddressFields and N RUs. N is the number of BP set in BitString
with R=1 flag set - e.g. which do need an RU in the RBS address.
Each AddressField indicates the length of one RU. 
There are only N-1 AF for N RU because the length of the N'th
RU can be derived by calculation, saving for every router on the
tree one AF field, and therefore resulting in a more compact encoding.</t>

<t>RU-Offset indicates the offset of the current RU from the start of
RU0. '$' in <xref target="FIG-RBSA"/> is the first bit of RU0, and a value of
RU-Offset=0 indicates that the RU starts at '$' - and is therefore RU0.</t>

<t>For every copy of an RBS packet made by a router, RU-Offset and RU-Length
are updated. None of the other fields of the RBS-Address are modified for
RBS forwarding.</t>

<figure title="RBS Address" anchor="FIG-RBSA"><artwork><![CDATA[
       +----------------------+
       | RU-Length            |
       +----------------------+
       | RU-Offset            |
       +----------------------+
       |$ RecursiveUnit0 (RU0)|
       +----------------------+
      .                       .
 .....                         ................
.                                              .
+-----------+-----+     +--------+---+     +----+
| BitString | AF1 | ... | AF(n-1)|RU1| ... |RU N|
+-----------+-----+     +--------+---+     +----+
]]></artwork></figure>

</section>
<section anchor="processing-on-r1-in-the-example"><name>Processing on R1 in the example</name>

<t>In the example, the root of the tree is is R1, so the BitString
of RU0 is as shown in <xref target="FIG-R1"/></t>

<figure title="RU for R1 (RU0)" anchor="FIG-R1"><artwork><![CDATA[
  BitString (of RU0)
 1 2 3 4 5 6 
+-+-+-+-+-+-+-..-+...+...+
|0|1|1|1|0|1|AF1 |RU1|RU2|
+-+-+-+-+-+-+-..-+...+...+
]]></artwork></figure>

<t>When RBS forwarding in a router processes the RBS address, the
length of the BitString is known from the length of the RBS-BIFT.
In the case of R1 it is therefore known to be 6 bits long.</t>

<t>Two of the BP set in the BitString, BP3 for R3 and for R4
have R=1 in the RBS-BIFT of R1, therefore (N-1)=1 AF field must follow
and N=2 RU must follow in the RBS address for RU0 - one for R3,
one for R4.</t>

<t>When R1 creates packet copies to R3 and R4, it will rewrite
RU-Length and RU-Offset accordingly, so that RU-offset will
point to RU1 for the packet towards R3 and to RU2 for the
packet towards R4, and RU-Length indicates the length of RU1
or RU2.</t>

<t>This forwarding process repeats on every hop along the tree.
When a packet copy is made on a BP with R=0, RU-Length is set
to 0. When such a packet copy is received, it indicates that
no further RU lookup is required, and the packet is only
received - same as processing for a receive BU.</t>

</section>
</section>
<section anchor="specification"><name>Specification</name>

<section anchor="rbs-address-1"><name>RBS Address</name>

<t>Any RBS router MUST support to parse its RU with AF entries that are 8
bit in size.  Any RBS routers SHOULD support to decode a variable length
AF encoding, where 0XXXXXXX (8-bit length AF field) is used to encode a
7-bit XXXXXXX (0..127) values, and where 1XXXXXXXXXXXX is used to
encode an 12-bit value XXXXXXXXXXX. All values indicate the size of an RU
in bits, therefore allowing up to 4096 bit long RU.</t>

<t>An RBS router MUST support processing the BitString size of its configured RBS-BIFT
(see <xref target="bift-size"/>).</t>

<t>RBS routers MUST suport RU-Length and RU-Offset encodings of 12 bits.</t>

</section>
<section anchor="bift-size"><name>RBS-BIFT</name>

<t>An Router must support for its RBS-BIFT to be configured with a number of entries
ranging between min(k,1024), where k is an implementation specific number, no
less than the number of physical interfaces on the router.</t>

<t>The leftmost bit in an RBS RU Bitstrings is RBS-BIFT entry 1.</t>

<t>The type of adjacencies to be supported depend on the encapsulation and
are out of scope.</t>

</section>
<section anchor="rbs-address-creation"><name>RBS address creation</name>

<t>Upon creation of the RBS header with an RBS-Address, RU-Length MUST be 
set to the length of RU0 and RU-offset is set to 0.</t>

</section>
<section anchor="common"><name>Common RBS processing</name>

<t>Whether a header with an RBS address is created/imposed on the root of an
RBS tree or received from another RBS router, encapsulation independent
processing of the packet by RBS forwarding is the same.</t>

<t>Parsing RBS-Address, generating copies and rewriting RU-Length and RU-Offset for
each copy is formally described in <xref target="pseudocode"/></t>

</section>
<section anchor="reciving-rbs-packets"><name>Reciving RBS packets</name>

<t>When a packet copy is received with RU-Length=0, the packet is "received" -
it is passed up the stack to an appropriate receiving entity based on the
encapsulation parameters.</t>

<t>When a packet copy is made for a receive BP, its RU-Length is set to 0 and
the packet is processed as if it was received with RU-Length=0.</t>

</section>
<section anchor="encapsulation-considerations"><name>Encapsulation considerations</name>

<t>The total length of an RBS address is not included in the definition of an
RBS address here. This length is assumed to be provided by some other packet
header field, because it is not required to parse an RBS address itself, but is
only required to parse beyond an RBS address in a packet header by an RBS
unaware parser. The field that carries RU0 may be larger (for example due to
padding) than RU0 itself without problems for the RBS parsing/processing described here.</t>

<t>Additional forwarding rules may be established by specific encapsulations
such as BIER OAM processing steps when using BIER with RFC8296 encapsulation.</t>

<t>Given how the processing of the RBS address describes a naturally loop-free
rewrite operation, no further loop-prevention mechanism is required in packet
processing with RBS addresses, but no harm is done if this is still performed
(on appropriate header TTL fields independent of RBS).</t>

</section>
<section anchor="pseudocode"><name>RBS forwarding Pseudocode</name>

<t>The following RBS forwarding (derived from C language) pseudocode assumes all pointers
(and dereferencing them) are using bit-accurate addresses so that of calculation of
starting bit addresses of address fields and RU in RU0 can be shown with
as simple code as if byte addressing for pointers was used.  byte addressing of
pointers was used. This is NOT supported by C language!</t>

<figure title="RBS forwarding Pseudocode" anchor="FIG-PSEUDOCODE"><artwork><![CDATA[
void ForwardRBS(Packet)
{
  // parse bit accurate addresses of RBS address fields in Packet into
  // RBS.{RULength,RUOffset,RU0}
  RBS = ParseRBSAddress(Packet); 

  if(*(RBS.RULength) == 0) return ReceiveRBS(Packet);
  RU  = RBS.RU0 + *(RBS.RUOffset);
  RUL = *(RBS.RULength);

  BitStringA = RU
  AddressingField =  BitStringA + BIFT.entries;

  // [1] calculate number of R=1 BP set in BitString
  CopyBitString(*BitStringA, *RecursiveBits, BIFT.entries);
  And(*RecursiveBits,*BIFTRecursiveBits, BIFT.entries);
  N = CountBits(*RecursiveBits, BIFT.entries);

  // Start of first RecursiveUnit in RBS address
  // After AddressingField array with 8-bit length fields
  RecursiveUnit = AddressingField + (N - 1) * 8;

  RemainLength = *(RBS.RULength);
  Index = GetFirstBitPosition(*BitStringA);
  while (Index) {
    PacketCopy = Copy(Packet);
    RBSc = ParseRBSAddress(PacketCopy)
    if (BIFT.BP[Index].adjacency == receive)
      *(RBSc.RULength) = 0;
      ReceiveRBS(PacketCopy);
      next;
    }

    If (BIFT.BP[Index].recursive) {
      if(N == 1) {
        RecursiveUnitLength = RemainLength;
      } else {
        RecursiveUnitLength = *AddressingField;
        N--;
        AddressingField += 8;
        RemainLength -= RecursiveUnitLength;
        RemainLength -= 8; // 8 bit of AddressingField
      }
      *(RBSc.RUOffset) = RecursiveUnit - RU0
      *(RBSc.RULength) = RecursiveUnitLength
      RecursiveUnit += RecursiveUnitLength;
    } else {
      *(RBSc.RUOffset) = 0
      *(RBSc.RULength) = 0
      *(MSR6c.SegmentsLeft) -= 1
    }
    Forward(PacketCopy)
    Index = GetNextBitPosition(*BitStringA, Index);
  }
}
]]></artwork></figure>

<t>Explanations for <xref target="FIG-PSEUDOCODE"/>.</t>

<t>ForwardRBS(Packet) processes the RBS address independent
of its encapsulation. ParseRBSAddress(Packet) parses the
header of Packet to create a list of bit-accurate pointers to
the elements of an RBS address: RBS.{RULength,RUOffset,RU0}.</t>

<t>BitStringA is the address of the RBS address BitString in Packet.
Other variables use names matching those from the packet header
figures (without " -_").</t>

<t>The BFR local BIFT has a total number of BIFT.entries
addressable BP 1...BIFTentries. The BitString therefore
has BIFT.entries bits.</t>

<t>BIFT.RecursiveBits is a BitString pre-filled by the control
plane with all the BP with the recursive flag set. This is constructed
from the Recursive flag setting of the BP of the BIFT. The
code starting at [1] therefore counts the number of
recursive BP in the packets BitString.</t>

<t>Because the AddressingField does not have an entry for the
last (potentially only) RecursiveUnit, its length has to be calculated
By subtracting the length of the prior N-1 RecursiveUnits from
RULength as received. This is done via variable RemainLength.</t>

<t>For every PacketCopy that is to be forwarded, the RU-Length  and RU-Offset
fields are updated.</t>

</section>
</section>
<section anchor="using-rbs-with-bier-and-rfc8296-encapsulation"><name>Using RBS with BIER and RFC8296 encapsulation</name>

<t>RBS can be used in a BIER domain by introducing as a per-subdomin mode of forwarding,
exactly the same as <xref target="RFC8279"/> (non-TE) BIER and <xref target="RFC9262"/> BIER-TE can co-exist in a BIER.</t>

<t>In BIER deployments, RBS can most easily replace BIER-TE, and using a centralized controller
and therefore simplify and esier scale deployment of tree engineering. RBS should also
be able to replace BIER in networks with link-state routing protocols and reduce the
number of replicated packets in large networks. This requires as aforementioned the
change from hop-by-hop routing to sourc-routing.</t>

<t>When using BIER, RBS routers are BFR, RBS ingres routers are BFIR, RBS egres routers are BFER.
Routers may support multiple RBS-BIFT through different BIFT-ID or SI. This may be useful
when specific constructs such as slices of the network are only allowed to use a subset
of the adjacencies of the network.</t>

<t>The RBS address is encoded as a binary string concatenating {RULenth,RUOffset,RU0} into the
BitString field in <xref target="RFC8296"/> packet headers.  Without changes to <xref target="RFC8296"/>, the length of this
field has to be a power of 2 sized. The RBS address SHOULD be zero-padded to the size used.</t>

<t>In BIER, the BitStringLength (BSL) expects to indicate different BIFT. When using RBS addresses,
it SHOULD be possible for all supported BSL to refer to the same RBS-BIFT, so that upon
imposition of an RBS-Address the smallest power of 2 BitString size can be used without
duplication of BIFT state on routers.</t>

<t>TBD: This description does not outline, how much of existing BIER IGP extensions could be
reused with RBS and how.</t>

</section>
<section anchor="security-considerations"><name>Security considerations</name>

</section>
<section anchor="acknowledgements"><name>Acknowledgements</name>

<t>This work is based on the design published by Sheng Jiang, Xu Bing, Yan Shen, Meng Rui, Wan Junjie and Wang Chuang {jiangsheng|bing.xu|yanshen|mengrui|wanjunjie2|wangchuang}@huawei.com, see <xref target="CGM2Design"/>.
Many thanks for Bing Xu (bing.xu@huawei.com) for editorial work on the prior variation of this work <xref target="I-D.xu-msr6-rbs"/>.</t>

</section>
<section anchor="changelog"><name>Changelog</name>

<t>[RFC-editor: please remove]</t>

<t>This document is written in https://github.com/cabo/kramdown-rfc2629 markup language.
This documents source is maintained at https://github.com/toerless/rbs,
please provide feedback to the bier@ietf.org and/or msr6@ietf.org mailing list and submit an Issue
to the GitHub.</t>

<t>This draft is derived from and superceeds <xref target="I-D.eckert-bier-cgm2-rbs"/> as follows:</t>

<t><list style="symbols">
  <t>Removes larger architectural context (CGM2) and refocusses on only RBS.</t>
  <t>Add explanation about possible distributed/decentralized control plane via
link-state IGP to complement the central controller based approach.</t>
  <t>Define its procedures independent of specific
architectures such as BIER wih RFC8296 encapsulation or proposed MSR encoding.</t>
  <t>Inherits the RBS specific improvements originally introduced with  <xref target="I-D.eckert-msr6-rbs"/>.
RU-Length and RU-Offset to avoid rewriting complete RBS address with the RU of the next
hop and instead just updating these two indices when forwarding RBS address.</t>
  <t>Adds specific proposed encapsulation details for BIER.</t>
</list></t>

</section>


  </middle>

  <back>


    <references title='Normative References'>





<reference anchor='RFC8279' target='https://www.rfc-editor.org/info/rfc8279'>
<front>
<title>Multicast Using Bit Index Explicit Replication (BIER)</title>
<author fullname='IJ. Wijnands' initials='IJ.' role='editor' surname='Wijnands'><organization/></author>
<author fullname='E. Rosen' initials='E.' role='editor' surname='Rosen'><organization/></author>
<author fullname='A. Dolganow' initials='A.' surname='Dolganow'><organization/></author>
<author fullname='T. Przygienda' initials='T.' surname='Przygienda'><organization/></author>
<author fullname='S. Aldrin' initials='S.' surname='Aldrin'><organization/></author>
<date month='November' year='2017'/>
<abstract><t>This document specifies a new architecture for the forwarding of multicast data packets.  It provides optimal forwarding of multicast packets through a &quot;multicast domain&quot;.  However, it does not require a protocol for explicitly building multicast distribution trees, nor does it require intermediate nodes to maintain any per-flow state. This architecture is known as &quot;Bit Index Explicit Replication&quot; (BIER).  When a multicast data packet enters the domain, the ingress router determines the set of egress routers to which the packet needs to be sent.  The ingress router then encapsulates the packet in a BIER header.  The BIER header contains a bit string in which each bit represents exactly one egress router in the domain; to forward the packet to a given set of egress routers, the bits corresponding to those routers are set in the BIER header.  The procedures for forwarding a packet based on its BIER header are specified in this document.  Elimination of the per-flow state and the explicit tree-building protocols results in a considerable simplification.</t></abstract>
</front>
<seriesInfo name='RFC' value='8279'/>
<seriesInfo name='DOI' value='10.17487/RFC8279'/>
</reference>



<reference anchor='RFC8296' target='https://www.rfc-editor.org/info/rfc8296'>
<front>
<title>Encapsulation for Bit Index Explicit Replication (BIER) in MPLS and Non-MPLS Networks</title>
<author fullname='IJ. Wijnands' initials='IJ.' role='editor' surname='Wijnands'><organization/></author>
<author fullname='E. Rosen' initials='E.' role='editor' surname='Rosen'><organization/></author>
<author fullname='A. Dolganow' initials='A.' surname='Dolganow'><organization/></author>
<author fullname='J. Tantsura' initials='J.' surname='Tantsura'><organization/></author>
<author fullname='S. Aldrin' initials='S.' surname='Aldrin'><organization/></author>
<author fullname='I. Meilik' initials='I.' surname='Meilik'><organization/></author>
<date month='January' year='2018'/>
<abstract><t>Bit Index Explicit Replication (BIER) is an architecture that provides optimal multicast forwarding through a &quot;multicast domain&quot;, without requiring intermediate routers to maintain any per-flow state or to engage in an explicit tree-building protocol.  When a multicast data packet enters the domain, the ingress router determines the set of egress routers to which the packet needs to be sent.  The ingress router then encapsulates the packet in a BIER header.  The BIER header contains a bit string in which each bit represents exactly one egress router in the domain; to forward the packet to a given set of egress routers, the bits corresponding to those routers are set in the BIER header.  The details of the encapsulation depend on the type of network used to realize the multicast domain.  This document specifies a BIER encapsulation that can be used in an MPLS network or, with slight differences, in a non-MPLS network.</t></abstract>
</front>
<seriesInfo name='RFC' value='8296'/>
<seriesInfo name='DOI' value='10.17487/RFC8296'/>
</reference>



<reference anchor='RFC9262' target='https://www.rfc-editor.org/info/rfc9262'>
<front>
<title>Tree Engineering for Bit Index Explicit Replication (BIER-TE)</title>
<author fullname='T. Eckert' initials='T.' role='editor' surname='Eckert'><organization/></author>
<author fullname='M. Menth' initials='M.' surname='Menth'><organization/></author>
<author fullname='G. Cauchie' initials='G.' surname='Cauchie'><organization/></author>
<date month='October' year='2022'/>
<abstract><t>This memo describes per-packet stateless strict and loose path steered replication and forwarding for &quot;Bit Index Explicit Replication&quot; (BIER)  packets (RFC 8279); it is called &quot;Tree Engineering for Bit Index Explicit Replication&quot; (BIER-TE) and is intended to be used as the path steering mechanism for Traffic Engineering with BIER.</t><t>BIER-TE introduces a new semantic for &quot;bit positions&quot; (BPs). These BPs indicate adjacencies of the network topology, as opposed to (non-TE) BIER in which BPs indicate &quot;Bit-Forwarding Egress Routers&quot; (BFERs).  A BIER-TE &quot;packets BitString&quot; therefore indicates the edges of the (loop-free) tree across which the packets are forwarded by BIER-TE. BIER-TE can leverage BIER forwarding engines with little changes. Co-existence of BIER and BIER-TE forwarding in the same domain is possible -- for example, by using separate BIER &quot;subdomains&quot; (SDs). Except for the optional routed adjacencies, BIER-TE does not require a BIER routing underlay and can therefore operate without depending on a routing protocol such as the &quot;Interior Gateway Protocol&quot; (IGP).</t></abstract>
</front>
<seriesInfo name='RFC' value='9262'/>
<seriesInfo name='DOI' value='10.17487/RFC9262'/>
</reference>




    </references>

    <references title='Informative References'>




<reference anchor='I-D.eckert-msr6-rbs'>
   <front>
      <title>Recursive Bitstring Structure (RBS) for Multicast Source Routing over IPv6 (MSR6)</title>
      <author fullname='Toerless Eckert' initials='T. T.' surname='Eckert'>
         <organization>Futurewei Technologies USA</organization>
      </author>
      <author fullname='Xuesong Geng' initials='X.' surname='Geng'>
         <organization>Huawei 2012 NT Lab</organization>
      </author>
      <author fullname='Xiuli Zheng' initials='X.' surname='Zheng'>
         <organization>Huawei 2012 NT Lab</organization>
      </author>
      <author fullname='Rui Meng' initials='R.' surname='Meng'>
         <organization>Huawei 2012 NT Lab</organization>
      </author>
      <author fullname='Fengkai Li' initials='F.' surname='Li'>
         <organization>Huawei 2012 NT Lab</organization>
      </author>
      <date day='11' month='July' year='2022'/>
      <abstract>
	 <t>   This document defines an encoding and corresponding packet processing
   procedures for native IPv6 multicast source routing (MSR6) using a
   so-called &quot;Recursive Bitstring&quot; (RBS) address structure.

   The RBS address structure encodes the source-routed multicast tree as
   a tree of bitstrings.  Each router on the tree only needs to examine
   and perform replication for the one bitstring destined for it.

   The MSR6/RBS IPv6 extension header encoding and processing is modeled
   after that of unicast source routing headers, RFC6554 and RFC8754,
   and shares all elements that can be shared.  To support the RBS
   structure, it is replacing the &quot;Segments Left&quot; pointer to the next
   segment with two fields to point to the next sub-tree to parse.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-eckert-msr6-rbs-00'/>
   <format target='https://www.ietf.org/archive/id/draft-eckert-msr6-rbs-00.txt' type='TXT'/>
</reference>


<reference anchor='I-D.xu-msr6-rbs'>
   <front>
      <title>RBS(Recursive BitString Structure) for Multicast Source Routing over IPv6</title>
      <author fullname='Bing Xu' initials='B.' surname='Xu'>
         <organization>Huawei</organization>
      </author>
      <author fullname='Xuesong Geng' initials='X.' surname='Geng'>
         <organization>Huawei</organization>
      </author>
      <author fullname='Toerless Eckert' initials='T. T.' surname='Eckert'>
         <organization>Futurewei Technologies</organization>
      </author>
      <date day='30' month='March' year='2022'/>
      <abstract>
	 <t>   This document defines a new type of segment: End.RBS, and the
   corresponding packet processing procedures over the IPv6 data plane
   for the MSR6(Multicast Source Routing over IPv6) TE solutions.


	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-xu-msr6-rbs-01'/>
   <format target='https://www.ietf.org/archive/id/draft-xu-msr6-rbs-01.txt' type='TXT'/>
</reference>


<reference anchor='I-D.eckert-bier-cgm2-rbs'>
   <front>
      <title>Carrier Grade Minimalist Multicast (CGM2) using Bit Index Explicit Replication (BIER) with Recursive BitString Structure (RBS) Addresses</title>
      <author fullname='Toerless Eckert' initials='T. T.' surname='Eckert'>
         <organization>Futurewei Technologies USA</organization>
      </author>
      <author fullname='Bing Xu' initials='B.' surname='Xu'>
         <organization>Huawei Technologies (2012Lab)</organization>
      </author>
      <date day='9' month='February' year='2022'/>
      <abstract>
	 <t>   This memo introduces the architecture of a multicast architecture
   derived from BIER-TE, which this memo calls Carrier Grade Minimalist
   Multicast (CGM2).  It reduces limitations and complexities of BIER-TE
   by replacing the representation of the in-packet-header delivery tree
   of packets through a &quot;flat&quot; BitString of adjacencies with a
   hierarchical structure of BFR-local BitStrings called the Recursive
   BitString Structure (RBS) Address.

   Benefits of CGM2 with RBS addresses include smaller/fewer BIFT in
   BFR, less complexity for the network architect and in the CGM2
   controller (compared to a BIER-TE controller) and fewer packet copies
   to reach a larger set of BFER.

   The additional cost of forwarding with RBS addresses is a slightly
   more complex processing of the RBS address in BFR compared to a flat
   BitString and the novel per-hop rewrite of the RBS address as opposed
   to bit-reset rewrite in BIER/BIER-TE.

   CGM2 can support the traditional deployment model of BIER/BIER-TE
   with the BIER/BIER-TE domain terminating at service provider PE
   routers as BFIR/BFER, but it is also the intention of this document
   to expand CGM2 domains all the way into hosts, and therefore
   eliminating the need for an IP Multicast flow overlay, further
   reducing the complexity of Multicast services using CGM2.  Note that
   this is not fully detailed in this version of the document.

   This document does not specify an encapsulation for CGM2/RBS
   addresses.  It could use existing encapsulations such as [RFC8296],
   but also other encapsulations such as IPv6 extension headers.

	 </t>
      </abstract>
   </front>
   <seriesInfo name='Internet-Draft' value='draft-eckert-bier-cgm2-rbs-01'/>
   <format target='https://www.ietf.org/archive/id/draft-eckert-bier-cgm2-rbs-01.txt' type='TXT'/>
</reference>


<reference anchor="CGM2Design" target="https://github.com/BingXu1112/CGMM/blob/main/Novel%20Multicast%20Protocol%20Proposal%20Introduction.pptx">
  <front>
    <title>Novel Multicast Protocol Proposal Introduction</title>
    <author initials="S." surname="Jiang" fullname="Sheng Jiang">
      <organization></organization>
    </author>
    <author initials="B. (Robin)" surname="Xu" fullname="Bing (Robin) Xu">
      <organization></organization>
    </author>
    <author initials="Y." surname="Shen" fullname="Yan Shen">
      <organization></organization>
    </author>
    <author initials="M." surname="Rui" fullname="Meng Rui">
      <organization></organization>
    </author>
    <author initials="W." surname="Junjie" fullname="Wan Junjie">
      <organization></organization>
    </author>
    <author initials="W." surname="Chuang" fullname="Wang Chuang">
      <organization></organization>
    </author>
    <date year="2021" month="October" day="10"/>
  </front>
</reference>


    </references>


<section anchor="high-speed-implementation-considerations"><name>High-speed implementation considerations</name>

<t>RBS was designed with high-speed, low-cost forwarding hardware and possible backward compatibility
with potentially existing flat-bitstring look-up and replication hardware in mind.</t>

<t>Because RBS requires to only perform replication on each router on a single
bitstring, it could be possible to reuse existing bitstring replication hardware,
or design future hardware such that it supports BIER, BIER-TE and RBS bitstrings.</t>

<t>The calculations required to process an RBS header are the added complexity of
processing RBS packets are the additional new cost of RBS. It has to be seen
whether / how these are feasible at the low-end of high-speed forwarding plane
hardware, especially P4. Further optimizations to reduce calculations are possible,
but at the expense of compression of the RBS address.</t>

<t>RBS also minimizes write-cycles to packet memory by only requiring per-packet-copy
rewrites of the RU-Length and RU-Offset fields. With mandatory encoding of 12
bits each, these are 24 bits to rewrite and should therefore be causing minimal
cost with todays high-speed forwarding hardware.</t>

</section>
<section anchor="complete-rbs-example"><name>Complete RBS example</name>

<t>TBD: Need to rewrite more elaborete multi-hop example from <xref target="I-D.eckert-bier-cgm2-rbs"/> with RU-Offset, RU-Length.</t>

</section>
<section anchor="replication-efficiency-performance-considerations"><name>Replication efficiency performance considerations</name>

<t>This section discusses in more detail the number of packets
required to reach a set of receivers when using flat bitstrings
vs. RBS addresses. The first sub-section gives a hopefully
simple to understand theoretical topology example, the second
sub-section presents initial results of a real-world, large-network
simulation.</t>

<section anchor="reducing-number-of-duplicate-packet-copies"><name>Reducing number of duplicate packet copies</name>

<t>If the total size of an RBS encoded delivery tree is
larger than a supported maximum RBS header size, then
the controller simply needs to divide the tree
into multiple subtrees, each only addressing a part
of the BFER (leaves) of the target tree and pruning
any unnecessary branches.</t>

<figure title="Simple Topology Example" anchor="FIG-SMPLT"><artwork><![CDATA[
             B1
            /  \
      B2    B3
        /   \  /  \
       /     \/    \
     B4      B5     B6
   /..|     /  \    |..\
B7..B99  B100..B200 B201...B300
]]></artwork></figure>

<t>Consider the simple topology in <xref target="FIG-SMPLT"/> and a multicast packet
that needs to reach all BFER B7...B300. Assume that
the desired maximum RBM header size is such that a
RBS address size of &lt;= 256 bits is desired. The 
controller could create an RBS address
B1=&gt;B2=&gt;B4=&gt;(B7..B99), for a first packet, an
RBS address B1=&gt;B3=&gt;B5=&gt;(B100..B200) for a second
packet and a third RBS address B1=&gt;B3=&gt;B6=&gt;B201...B300.</t>

<t>The elimination of larger BIFT state in BFR
through multiple SI in BIER/BIER-TE does come at
the expense of replicating initial hops of a tree
in RBS addresses, such as in the example the encoding
of B1=&gt;B3 in the example.</t>

<t>Consider that the assignment of BFIR-ids with BIER
in the above example is not carefully engineered. It is
then easily possible that the BFR-ids for B7..B99 are not
sequentially, but split over a larger BFIR-id space.
If the same is true for all BFER, then it is possible
that each of the three BFR B4,B5 and B6 has attached
BFER from three different SI and one may need to send
for example three multiple packets to B7 to
address all BFER B7..B99 or to B5 to address all
B100..B200 or B6 to address all B201...B300. These
unnecessary duplicate packets across B4, B5 or B6 are
because of the addressing principle in BIER and are not
necessary in RBS, as long as the total length of an RBS
address does not require it.</t>

</section>
<section anchor="analysis"><name>Statistical Analysis of performance gain</name>

<t>TBD: Comparison of number of packets/header sizes required
in large real-world operator topology between BIER/BIER-TE and RBS.
Analysis: Gain in dense topology</t>

<t>Topology description:
1. Typical topology of Beijing Mobile in China.
2. All zones dual homing access to backbone.
3. Core layer: 4 nodes full mesh connected
4. Aggregation layer: 8 nodes are divided into two layers, with full interconnection between the layers and dual homing access to the core layer on the upper layer.
5. Aggregation rings: 8 rings, 6 nodes per ring
6. Access rings: 3600 nodes, 18 nodes per ring</t>

<figure title="Validation Topology" anchor="FIG-TOPO"><artwork><![CDATA[
                  ┌──────┐          ┌──────┐
                  │      ├──────────┤      │
                 /└──────┘\        /└──────┘\   Interconnected
                /   / | \  \      /  / | \   \   BackBone
       ┌──────┐/   /  |  \  \    /  /  |  \   \┌──────┐
       │      │   /   |   \  \  /  /   |   \   │      │
       └───┬──┘  /    |    \  \/  /    |    \  └─┬────┘
           │    /     |     \ /\ /     |     \   │
        ┌──┴───┐      |      /  \      |      ┌──┴───┐
        │      │------------+ \/ +------------│      │
        └──────┘\     |       /\       |     /└──────┘
                 \    |      /  \      |    /
                  \ ┌──────┐/    \┌──────┐ /
                   \│      ├──────┤      │/
                    └───┬──┘      └───┬──┘
                        │   \     /   │  Dual Return Access
                        │    \   /    │
                        │     \ /     │
                        │      /      │
                        │     / \     │
                      ┌─┴───┐/   \┌───┴─┐
                      │     ├─────┤     │
                      └─┬───┘\   /└───┬─┘
                        │     \ /     │  Core Layer
                        │      /      │
                        │     / \     │
                      ┌─┴───┐/   \┌───┴─┐
                     /│     ├─────┤     │\
                    / └──┬──┘\   /└──┬──┘ \
                   /     │\   \ /   /│     \   Zone1
                  /      │ \   \   / │      \
                 /       │  \ / \ /  │       \
                /   +----│---+   +---│----+   \
               /   /     │    \ /    │     \   \
              /   /      │     +     │      \   \
             /   /       │    / \    │       \   \
           ┌───┐/       ┌┴──┐/   \┌──┴┐       \┌───┐
           │   │\      /│   │     │   │\      /│   │
           └─┬─┘ \    / └─┬─┘\   /└─┬─┘ \    / └─┬─┘  Aggregation
             │    \  /    │   \ /   │    \  /    │    Layer
             │     \/     │    /    │     \/     │
             │     /\     │   / \   │     /\     │
           ┌─┴─┐  /  \  ┌─┴─┐/   \┌─┴─┐  /  \  ┌─┴─┐
           │   │--    --│   │     │   │--    --│   │
           └───┘        └───┘\   /└───┘\       └───┘
                        / | \ \ /  / |  \
                       /  |  \ \  /  |   \
                      /   |   / \/   |    \
                     / +--|--+ \/+---|---+ \
                    / /   |    /\    |    \ \
                 ┌───┐   ┌┴──┐/  \┌───┐   ┌───┐   ASBR
                 │   │   │   │    │   │   │   │
                 └─┬─┘   └─┬─┘    └─┬─┘   └─┬─┘
                   │       │        │       │  
                   │       │        │       │  
                 ┌─┴─┐   ┌─┴─┐    ┌─┴─┐   ┌─┴─┐
                 │   │   │   │    │   │   │   │
                 └─┬─┘   └─┬─┘    └─┬─┘   └─┬─┘
                   │       │        │       │  
                   │       │ 8Rings │       │  
                 ┌─┴─┐   ┌─┴─┐ ...┌─┴─┐   ┌─┴─┐
                 │   │---│   │    │   │---│   │
             ----└───┘   └───┘    └───┘\  └───┘
            /   /   \  \   |  \       \ \    |  \
          /    /     \  \  |   \       \ +---|-+ \
         /    /       \  +-|---+\       \    |  \ \   
       /     /         \   |    \\       \   |   \ \   
      /     /           \  |     \\       \  |    \ \  
     /     /             \ |      \\       \ |     \ \ 
┌───┐   ┌───┐           ┌───┐   ┌───┐       ┌───┐   ┌───┐ CSBR
│   │   │   │           │   │   │   │       │   │   │   │ 
└─┬─┘   └─┬─┘           └─┬─┘   └─┬─┘       └─┬─┘   └─┬─┘ 
  │       │    Access     │       │           │       │   
  │       │    Rings      │       │           │       │   
┌─┴─┐   ┌─┴─┐  ...      ┌─┴─┐   ┌─┴─┐       ┌─┴─┐   ┌─┴─┐ 
│   │   │   │           │   │   │   │       │   │   │   │ 
└─┬─┘   └─┬─┘           └─┬─┘   └─┬─┘       └─┬─┘   └─┬─┘ 
  │       │               │       │           │       │   
  │       │               │       │           │       │   
┌─┴─┐   ┌─┴─┐           ┌─┴─┐   ┌─┴─┐       ┌─┴─┐   ┌─┴─┐ 
│   │   │   │           │   │   │   │       │   │   │   │ 
└───┘...└───┘           └───┘...└───┘       └───┘...└───┘ 
]]></artwork></figure>

<t>Comparison notes:</t>

<t><list style="numbers">
  <t>RBS: We randomly select egress points as group members, with the total number ranging from 10 to 28800 (for sake of simplicity, we assume merely one client per egress point). The egress points are randomly distributed in the topology with 10 runs for each value, showing the average result in our graphs as below. The total number of samples is 60</t>
  <t>BIER: We divide the overall topology into 160 BIER domains, each of which includes 180 egress points, providing the total of 28000 egress points.</t>
  <t>Simulation: In order to compare the BIER against the in-packet tree encoding mechanism, we limit the size of the header to 256 bits (the typical size of a BIER header).</t>
</list></t>

<t>Results are shown in the following image: https://user-images.githubusercontent.com/92767820/153332926-defe38e4-1b63-4b16-852f-feaae487d307.png</t>

<t>Conclusions:</t>

<t><list style="numbers">
  <t>BIER reaches its 160 packet replication limit at about 500 users, while the in-packet tree encoding reaching its limit of 125 replications at about 12000 users. And the following decrease of replications is caused by the use of node-local broadcast as a further optimization.</t>
  <t>For the sake of comparison, the same 256-bit encapsulation limit is imposed on RBS, but we can completely break the 256-bit encapsulation limit, thus allowing the source to send fewer multicast streams.</t>
  <t>RBS encoding performs significantly better than BIER in that it requires less packet replications and network bandwidth.</t>
</list></t>

</section>
</section>


  </back>

<!-- ##markdown-source:
H4sIAAAAAAAAA+19S3Mb2bHmnhH8D2fUd8JgC4UHJbEldqvDpB7ddOjBIMWx
55q2owAckNUCqzBVBVK0yIgJr2fhhRdezPIuvfQv8i+Z/DLzPKoAUPS9nogb
M2a3JLBwHnny5Mn3yUqSZHNjXEyy/GzXLOpp8nRzY3OjzuqZ3TVHdrwoq+zS
mv2sPq5LamTon8W4XpTWdI72j7fM3mRS2qqylZkWpdk/eHVk0nxi3h4f7Wxu
pKNRaS93zSizZVKOqs2NSTHO0wsae1Km0zqx44+2rBP3fTIYbG5cESQYh+BK
a3tWlNe7xn6ab25k83LX0PRVvT0YPBtsA9Kqptl+l86KnMa8tjTDPNs1v66L
cddURVmXdlrRp+sL+TAuLi5sXle/Qd90UZ8X5e7mhjEJ/uIfge5DYcsZLcu8
YgD9t2UBvNhJVhelf1iUBPHrBZByZTPzwY7P82JWnGWElJPjPd+uImhsvWu2
t7cH5gWBUaYz8+rTHPi7Sq99u3FW05KP07xOzYtZWqbhm2JC07/YM8+eDJ4M
oscLGoz6xLPZizSbEb5q+/Nx1Zumi97Erlrq22x8ntqZeUsAnTfXdJLT3hMB
1NemmJoPCzsiCrD58rw/2PIiza/bcwPV5z9f5FlSu75rgPjVwlYFUdcPNj9r
wvDjIgVStwfDbfPug3mTjpanf3Ge5Wl7cprs7JMM+/NzHqRHu79y8mwxy8y/
nv/j5v49xvqEYb8w9dEiA+L/UfMSws/KxZcmfU2tPqaZeZPde1odf5ZNpW9j
BvyXF0QBNZELH6ej1y+ebn/zLHx+tuM+P9ve2d5FjyyfNvocJC97yg4uqnIH
7MA//7RYfhazjvHZxbb/8sUPb7df2io7y3cFfuVm74pLkPliVmfjtKrNYVkQ
myhm+DAvKjqLB4TaYkLsLSuUyCfEgejADraHyXBA/+uAaXmGg3xe1/Nqt98/
y+rzxQjI6O8Tlf9qMRwOt/sEx9v+aFaM+oS8vM/T/9ftgQeAPjsQ5CMDQR9j
MHrzef1JZo3YFX7Cruq2HoPozC+yNJDTUhuAR4y7oMO4RYfOtzPthv89zXnA
tSOBakG+axv8kkb4xSL/KbN3NTkjQl7gH5BEkiQmHRGbTMc1fv9wnlVE0xeF
yRQlxFFTMPE5tcDmpEnl5VFpwUmJ5aRAHDjWhd9rcN4KAmU2sxPzoCHYqpZg
e6CSDWKMvjWLyrJs65CsqS2kwtbmBj24SkuITUxE4Hy01LQ+T2uCdTxbTCz9
QtAH8LKcntiMxMa5TSe27JkDalthaTafEFQprS036ay2Zc7HwtSFeTCdpfUD
EqAOzNTJW5JfDNsEI3u5iw/Jh1d0oA2RU5WNZgy8g3U+S3NrLtMyYyQRfIvx
OWaGvO5tbtDCTZpdVJg6u5iXRLNmbks+qfnY8hQVYTEdZTMWCyQfDEAMEFbS
iHoTtyCRUFB/mayHPX3vf8XitVlGqxjZcQpUA4RJQRudFzXt6f9YZCVwabHW
riEw0jMLwcLTFPM6u8h+n8qJpZ3IbX1VlB+Tq4x2YFzk0+yMkD9xaDMVbRWN
vX/w+kNy8JLHOD7gf9z8pEmwmkAkBFAuSJqneVZdgHpyENmMRmitOewKU8qo
qM9NRYe1tlWdzFP6LdoDTAZ6NHSCstxaAi+mJ6ELJoq12zC6JjqZFVcYLiLy
AssraQ2VrYksNzdKO7YswkEjM3Ct0mGoMlcZ4CKVpfT0KyS/avZo0zc3aHrZ
GMzPahLwafh8EP5IS1oQEct+40xfZJPJzOK3r1o89p9n/AtnfM3Z5lnCCf/n
gf7PfKA9mZPxs+CVgkYrxsHSjPjIXL0uJun1St6u9FKRLTIjRkBUwlhnWioJ
lRcj2sNJVtVEpXxM6DnmelC6I7GC2Py8dLgJTQq0DTDHhM6EPC3Agqpd1zKL
TjbBcZnZK1ljWs3tGAxpeSl8mLArK1gOCEAgz80ZjgrtVmMO+jKGNC3H51lt
5SRWVtpMbDUus5EVSC7IfiLEnxdXPOlYRrRnJRgXfSqY75SWpmTOETaRpG00
fDhmpJIRiU3sFBvPyMPS+ro+D9t7OlZAiIeLDNoZaYUVw+Fo2eZiiTOKIgIb
pdgY6pWiY4q9dgMfE2rpuI2FH4ZVAx6cONWw3blj4xc7ITgHE8ME0VyHlV3Q
nhOiPPBuVPp/wXSCziw9/H6qko8VpPNqMUtbyJ+zdkuL8BBBfQFZkBzCBqfz
+ezajU37gJEZgL35nAgjwxknkh4vCE0/ZmfnCXWG6gNcXHh5QPyhIj7h+BEg
I4ovmXzpm7Nzlm0FsWeigCs7m3kyOLezuZwfoi7AAXLJF3yUCF2e/ztE4nwS
hzGQRYILR4pffSVokROAJwdyhrvGpkQ0dPIwXBodwQwLJBKE4OO+RJH0i4hR
09l//epoq2d+CTzxBmxufP6sGL+9beK8G7lqeF0pDk54+IZ4FAHb2T9+swUw
tn/7rmvePd/p9XrDbcgLEd3Elq+ZX9MS05GwlmoxnxMHNAtG1PZvh9vPH9OW
z2C3+/GrnvnAB40EsjDdzQ2ai45KRWzEY02GwgZWZvvJDiOO15c6hk+QAx26
BW+Ze7wGEt+a7783GNLBA21EoRb564bokvisoc/kpAZVVVpeY3qIBFYawDEf
kKZUPeDB/QpMOi5JsMYjoZ87pMS6GRKC+RX2E7qWwHps64MJ0QPEH23b8QFt
GloSZyLu4r4J+vpllqog3399lGQTOgkZDZgRQ6fO5rvvzDtzQ4jePzRbXRwT
GoY+ZwIaAXxYVJlsuooSh4BAA8zSp6wxUD9AQ/waTYh1E5DvmAqxfu4mYKQq
n2ku/4Wec/xyTueIdBA6ZtIZz44PekznSpffPCO65BkzIKwqIDyvcjBMWtmu
B88vqwk00FnkJNs8FAIzg0H4XkUuei4r8xHyf8V+dUWSpKQAEC2cWZE94NqQ
OqTU6mGmrh8JBbS0EhTDczbpig+HV2QKdGOBCBcY/v0o2+sURjJ7mcXx6VeE
fpRxhW4m2XRqmUkRGvn41EWdziL244byzGcK9yOm8yqgqPzGafwKN4av6oI0
HtIGaEjivTXU0j2c7KruCqSiB0H1BnCbG+2JG0yv5HW8lQno97d9Oow94XOk
Os+yM9blSDcYeyVdCQvzzEgx5u0hHkHos1MSXhl6kGQG4Ne82wwWbQC+7ZkX
ytaXthvE8tHpeyX9VVysnrkqeLs3NyxPYSdn0Bds6vajwXRqAEn8C4oj9cfu
t/fuCPsEwyX9yFp6LauZZR8tk23q2GSLFlhJiCQH6xyiS+QCkMMwKXWLEbiT
rgJQZDVwQYZRqZYH8JjHK+aZsccX85q/vshy6NNLG0s4c9pevERIostssiBS
ATS6yquMzhAdJuKaaCk2o7jolyjTU8gy+PE6eyaSldAEg7j8JThCWjkpOoMb
nZZ2XsyT0XVC/zC7Zxld0NkpoVsyHxJy6ZoP0MVfqS7O4tKHJjo6XVc4FZyR
t7dbOCdex4JmRiRZE80sSjoRbjLClNfPQAZX5wXUME+2bAFkeSxsFX2s+ecN
GUoKe0b2uKmv51aObVDP2LEjeiVvp+M06wCjOQ8OzSJnK7gr7FaNYEUJsQDB
RBdUJYrr8dGP0vNyp2tGi1r6BWu6UsUSpwARFO0GscGi3RncZDIXiUy3uXFc
W0J6Kd9sMVNw+3tFnSfslXVEsqiE7yuPccitGoYC2KpOPSWiYFbnxQEatZ1b
bHLXIKFpwQ4DRz/oUaUX1uOcLb5I7HdoPh6YBHJkFEFKkyg3SpE9Y1SfYzJq
qnRBhEUqHZHE5CcyMfPxtQjJ2ilIarYRvq1uuGsJmHHK6RARa3KPaz5JIs0t
MzEvuv3G0QpAiKJKYAglBcXT70hFJnWIVK/OllNEeCFANtjI7HcTspvn9G0M
i865uUGc8TLMylMlYOIwES7B+3ASVT2izVcT3BGBk7bBjxOOkmmeJMADBZT1
AAwqM/cxNrtFGipDl+04L3yobxAsLYHAChSJgVxYNm0BHciUIUlz73ARhJDw
JIJl+4oaBO6JQXIjsoQ46cWiEk1ZZhICp7NHUqsG36o8ycb6JKxnsdRAMN4i
5kPlVVDmAtFIPVAfe/KCIw+iYHMDSgmfYSdhZT4BxkEGyHVsrwPTAhxJyfmI
AdczsYAiwQdRvYhtDYXGbYoAt7+EwgtQYBk3VnUStOrnatBbIp653EkdYU7Y
L4enVSqRkCgvwit5qp4pPpwP1IMS615+LGfHqWOi4a98T4z8KhVLIiedhAPQ
PPbd0XKnjorUpi3LP2J+Wjv7BKGZFLOFp1JdZcsT1zOvmObAmGainJBlPVZO
lfpuvsfmBp8ff+5mRfERCo7uigppr+Yfipaxq4RHv6u3U5hZY4uEpNmoIKa4
R4NhiAKsV+wCtnrOyOCPfIH07TV/0Rgp124YCTj2+t4VuAJcMswb/fJiNssb
TBoRwHOUFrkuE9bimEuzzixnFohTkdD0H8t6r7DFYgqwVLKilYdpQWs8JgbK
i6s2mp3VfRhatjl5J7dkR42KcksRCHZDPIUo8DKdqSEiLLfBlbEnRdgRpWvW
sOrKzqaqXaZgA1PmlmtWKs3FlIL/Ql3Zdt5luidmTLojSzB0xibM7KeGfxa0
R/L4otJTypgpSQVnsFvidRcoBEXAKyV8iewXPtLAUdDs2dELlT528Ma+YSZr
lW+xuIRbUbR9QsF8ocq1NFTDys9/TqKQWEhZs/2s6h1Zppsbe4IdmCo0cy76
qjMGw3HhPfsF+H7t7TWhFbjKf28bEpLpgp2Z00zBStnlVRZzOO5pb9JP2cXi
wkjYgJrZmYwjhJHpYBx31u0DoRXC0LosXHByGW4Hb0YkSaQwKouP8BzNZWZ4
+Gc0NxZN6xF5k7CZXJTZGfacmUmt3BSBi1JURLGCQOkqq1UJTxuIgY3OzMXm
xeLsXGwv67GDCYk6wCEYnmhhqgkqEsLyc5xhQSj8+TEJ8knjEwc/IanOtSck
FyxQyyi74LhZRXvBER0ZxU44dCDrgyDicdQpOVpkM3X+5g1HrThD6ZvITUdE
fCXnyIo3kTVCAoLkB7iSd6fy6XKWBG2jKmjeOd/13BL7CVZYiRklOrhoaeFk
iXWDWacZSSPhbRHxdfZfHxxtddVdLyYfbRgxGosAkPqCaQMTJoUuM0zhlWk4
YjLulRMLYBXWu5vCxJHpA/8MuC1NpvsKLUXVUNESvEEYzSG+rAjZwuY1VwRY
r+KTM7ve3FjMJ6x08XDMwPkvBhiWK1OsIxT4z7NcLI8WJlWFkK6iqgtj65og
NjKhBB2ziodM2P5fGbJJVWSTShxjiK072v5rg5gU1PnMBxiJFZMeR9szJk7O
4I3kzNBg7WAVJ9blfup+ME8YbtGuLhHwE24OoSqnoIXsKJap2gIfKeejygkV
crZbqBONiUd6p8dvLw7HfP4K4ZNb1ate+ENhsO1lNsYXHJxLr8UqujbOPGR1
zp3pRoxHLTJaKJvM4mLM4IR8ffBDsnf04sfb265KDh8T0KMRgUA6fxXr+bPr
VVHMWAg2LAraUq9THx8Qytly5k3l4Ffb+mAiE7WXwI4EGMwSJ3Qn4h8JCTPt
n/dzDJnOfIub75KDH94e9g8P3ibfm0jYT2FmGPNdQt/00ST5/mb9uCoeNJVv
fbtfBwT+Rpspq9McE2PIUv6tNP6t/3vlgNSw71Yh/5zy35xU0ODiUfee//G9
wgf+l/Y84cUzf7P1Yh669+L5V3b3bRtNzWX7w6U0PC7HpkOIBzxbhj6A6yb4
gU4i/xJPoC86aJJ8v2WOxpflXWimHW3/rNw5Wl7ijm/bG9IY/+a7XuOHaEKD
80hQMxjfNFv0btYDuAK8tSCaI/VVsclE5GU6hRLw1ubG513zlTuxkqz3/AHg
anAQlq2B6B44XvIyAxMk6W0n/Zd2LFm1kOvikfZcNBbFjuusZCui/qoljZC0
KMqsvqUcVnfTTeLpJLbcDZ491Wyu5xk45cTOZ8U1B9K5Iec2iKOBV2Y/1Yg5
g0PxPDOyDxNJqDn44dD7+uaaMMj89pUXSqz1LeoivcChB+vxBr/4Y8hKUXND
FGXaBU4+AX8l6BkadrK0JCI7QdocDCIPqoEbUpR+OKc/sCdCAlQ581TRbeBD
i9Xd1urC4sVrREeHl6RQejcQq1bBDYw8DKALFC9OJ2d+EAQYN1IbSEX2Tk5x
jLiQ4ColwNt2iLmzGsV+l5bjDgkktqtaqQDjQmeSKzJJ5CkHvVnKp7MxArWi
hTWxoBCqeID3KrHBh00GTQkruOrK8oAe+EPhHNNcJIhl9W0ipT9HHmUGbyvn
q7ipPZYlM4kHY4pU07dYzCZsQNachsn6KCvD7FPlBeZFM90F4PXZl8PO5vhx
7NcWHZt9KlUk5J2/aEUWThV57qEuagoSU2ok0kGkHTpgyBOATpOLBdanPnPk
4XP2uh51YjcuvwSjIPUJLaOUKOf8+ZE2OqkLorRKklGLIJ6Db41tV3bAv21K
XJWjlT9CV6So1tnMGS4E0ogU5KmGX1fm44gNxrkRLsNjRhodMY+O7Z31dj1A
aHxGPGJuJPunOs/mcWaVsxAcErpi28XcH5oXn8OJENK5uLnYRDtmG7B/pLFF
pE+QSRKiGz4I6ZNC+l7xrTjPQvbe0RF4qboPxQsnRmbfBy95fIzMh1EyXqD2
EkHSg+FA/Xgwe9O8laqhSrrw1lpnDJgS1Me+WDgcNjeOD/rQ4wKvy6pqYZ0v
zq9nzOfDZYsg/BcdIZhMFWL/wu1TjxJOagGoHkE0Vt/nuBBppZdFBrYMInYO
jTMkCMEUyDh2qxQPs/2axNqF0IJfBjGS8UcYQ2clmc8aMqtqF7uJBJCIXl1K
jOGRhf9bszCZRdWLPCfUacgLy3B+V04UPHnJ0oDtP2bJYN3qotedZ/dmxPqd
JOvH8lhUxpYY+CpkTX3+ano1SQr99dYn1LnMJKSHVS6kXJ8Xi5I9D+UCmy+f
2d7LpiLqvEkazFHemaaZ7zjBq5ByJaYFNK4PxFuGt7dsdYhR5bAYfPzCfZBV
M2RbMfJM5AI5S/ujbdI5HtGfx/TnielA3rExI/mpksf5SD4/FkO2PcKQen5D
f57Sn2fScjhAt2c8cbu5TsZpZosSnL1r/KxR+u5r5RsqfHAaNHFNU7W6nC5M
R7UsLZEjnKZ0yNmZyy5kFkR+ao5oOWftm23iG0Rt4LH8geVhBT9Kyzlcnafw
Ib/Ze1d5J4pDdsup6ZxMkmcbG7bCe9lf4sWC6AdMQdRBVyYJOp8/s8F6y04L
2j4o7rJP8vGbLaBQPj9zaj2eDQf4e2eL/Z1KZkRz6lmzPkdJ/G5lQVjH7omb
0juQAZfj/e7ouGC7849dea+tjBWvlvMhrIiNRpQVmS6B3hx9CQm6X0EGYA3K
juPuCOKyvCBWFzm/SBYQYrQbq2qtyXVuJlKe5BttjRz1lWDGdIy/WqO3Iesy
rd8BeCD1CLaMZ/LPZS24zKRHobfOBH9Ils7DNWYbUcuN6WBnt9Z1pv+i35db
9db/LJvA/DHuHH10rbXZcotm82j8m7hN87fmL9LhYXIZranxm/zSKcnc7csv
0uWGqO5Gnm8BbY/MTYc4fG0/bd0QLd5wBIO/2TGunZvsYWOyJJ6s/cvqPWii
YKVf4QsbsA6lvcZIX0Ln34PLZawqIuk0AUGWMXlz9FRHvaETcaN4B1kO7odF
+SQ7cRcKV+Nv1dctul3xtUhumbMvkX7u41wDXuI6/4DKZPNBeXmfVSzig+IY
YGFITINvLhQX1rw9JhtiZM8zsJRnPfNDhgwATgR3cvOp7yKxevXr+05sc42s
pDepUcsXA2zG7MOL6K5G5DUj6LKYXUoeiM/gUabk0nIa7BrSqNO2r2jLxudF
Jv56TcJ+FDuJ6cD4zCvPZB83WjxiF4Y2eSaL7fDMmj07suwte7YVxb8TOOGC
s0Fxch7k6wOynMk2nhCtvA7Opw/QfeWSDY+wJdal5qW78F2Uwmo6+4dbpjPs
9d5tRckzzTAfVKmggR0NeWj4eJeVMDcx67dHQ8/IiZ4fqqfqYXBauYO0f3hz
ZF7P0jM6QXtu0pv79DRDPckD/KsC6H49t+Oe+DnaNvfr+Uh7DH3PR/fs+Xip
5+N79nyyBO2Te/bcWeq588We8fnX/XYcgD/jTs/wwa3TCh8o4h8EkvHp0oeO
rMSacfFNH5vSwLmOINZP4AIaLWelrnO0ZUsN1nGc+6xBsU79tREQbPlGEbMo
egdzpKmqctBKUwg0Qktz+uySE7IHu4hjyoHdgqlVFeOM3UqsFGZ1uBQzqlyY
jy04w+CyP0Ksa2a87rZdHJqsDNTWhi7OWJsu2wQMfCmOupBwLjGOkPKmR7Mr
yuYTp2xyjppLShNjJuQjQgXwW5ALX/Z2lTE/8to4qYTxdfR84DDsGQDgG8YZ
PVqxIg7HerV5KYpE3+6RFRCHYUm6nCRyj4LWcZK8n04r1TD9JmGPSG99GTul
Gto76c+KZ+dA5Jg/1GtGY5Qo7NMKELGtObIkN2Oa0xGJnGw5al/kkpKI65Mu
RciFfjntAb5AAkJRe/RpTZKIm1sPQ2wc09IHbB3xFyfNWeTkFHUciUYsHw0j
XGoep/e9Snx5JndUdCn6myPgeFs/hag2X0rtvEuGviLJa8EntuUdTUsAv3ND
NtLW9FRGJ1JcNs+HclbwfWLgb1NpNPHpK1hNILfIbcAXQ2I4IgbRXBOitkcn
iPZ98P5VNnFoKWbvNZ8kgN+IQzZR8u5nqNsBxIp+Il5z3obI6UscI730/u1Y
mBfOJ4cNBzyYFkB33ZUPn0vrsnw4CN3gHI6amTLDoWguu5CHCre7mUWQu6wh
OLFKubpM1NUzP/uXny0dRd1DyTnQzFtq7BI2L9PZwuoICgUzhQCHelVpWp6N
E/4xkeYcVtGKAQQW9NrjbFzM2Z2sLFvP9AUdaTlcgtMlvuAYBq4R0umUhAWi
yJDYoilwygUiat9zvKnk+4sSleb8DADQumba0LIjURr/NNX5mwBcrJTf/DtH
0kX/B0f6lxYnBW8bbP39IzVjt9FzbeTt59WtVlp+69vfNVUMrXwOxpZ/GD3y
WlNgjqSSvoZrASDjcycnbndzdDLUR0TQ727+3bNFmtZeIwgr5OfjrYch35SV
L8cAo3upbXm/ShgYiRzA9aURuaZKJMJllUAe3t42g9IBQx3p6NwuQ7NtHpnH
5onZMZHJ6//r9ZKHhDn+o+ge3Az5P/zL2AZ6j062b77c3yPQ26hgbGx9CPkK
CvnaWvPkCjtVbuzEaNUWKxqzafL+KBO2Mh9zYMrz0tWCM+hjfO2AtSN14ga+
JyOJ+rEjeUe45ila5VUR5Quv0mm79MUjWfojd5WZDIzNDdXRhqt1tG4EAEvy
50MviiTFXoQ9svFIpj/fBguPnq8QxTIzkVListrg+ES2rv7yOFwlJDSMyTiG
jFCuTryetd4iNu2z2l2HuiozOGUD+1RO7/j+eFzw9s6uu+7+Gb5WIYhByPpg
xzdmOBkGzdr5QCWwrZNzo+2Q5t5upf78AM46lYOmYs2eRgulCeLEEaFAOCQI
HeyBj9LI+LqvV+n8NcyAMra4WCBy8JxoRPWpQTcGjhMI2SMx0KvNmt7YGsnZ
YxJpaIhxOGq985ZoAelqyHINlwK8BhNSEFm78pVRJkQZnGCWVnEmvWQkOzfy
/onGoxqX7VdbFHs5l09wp/ntyfEHf+kLaclcngXnieBlvBCFczKKU00g5p+S
NiuXeSUH1jRHrczxj+9P3ryMB+aMPsv6T5lx4HGmCgdP4EwNuW07+JX8mM7T
BBMpbbjDxlaEi8yLBWDSzY1vuK3vOsCN8W+2ROGqBNMy/PBX0U80lto8XMhh
uM2jibYWNZebBDJmlOWueSpO8zrhezrgSzHT8CVx5Orl48Ez5l1yQ/1INnEv
X7s90f43WaubGdsWVSAJ3rEOjPHPn0fZtE7Q+PZWXGjxlrmpMNM6ltG4Ajfc
5gW2fXHm81dhHrciWQ3zQrcakDDTmesn3DyCXyKekTGkdEiHI4Xn8Yza11cW
F6WyvPOxOxxsP/YXtj+ydM7bBRj8rUEZFVFFiCy+yrQUqZ+fX1ecHIW7W+WU
67ioGSpY816MmZ3WnHijx0K1bzpD++GqRxYtFku5NkM/gLvz1/BmtEoRSPDd
QdCsZMFOYbbNFqzGVMSerL/DGkscliHKHk7mCLPrg0gQNyJ4shan5sc8kkmG
QEQSvrsO0uDjA0c/KlM0K5t5qk+19YVvIvr+/JXUZnAaCXPQdAVY8bUlkY6T
fnYhpTz8VolmhztMzgmPIK7nsKyQpLnYN+FIdFsopsOu2Q/E2CNYFW3KwKU6
TUN5qnyaMC/6kFisRqcDUs9s7pInVKqLyx0ynBuvOZEhD97Jo6nL5XLFTTRc
PPd1U26dqkw2THbpappo3kRUuWCNoFNx6QCC2GwKMOfknDxAaQFR3eYpe17A
+MSKHn90l8Pj3AvuCIjgSKqvw6Vn1iia+4Ew/YWV4O56qFnQt8TlYVclXFPY
M12G8EpYUPAckRTO+E4cbguvRYjPy2jA26z94g8+JxqFQ7NM1vC2aQrdxKmQ
civTnVpH2a4TGKAmPwVXVbPACTLMMnWccfxJqN+lA8TXfBrXPbJGlaxJUBna
cLM7Wm+tVHr9bLnXyF4Xcq+s0TnaR4UEvgtutLmxyNMrcDoeoRSPt+jgrJ+M
05KVFXAf5IyN/KXKTpxKNFlYlvhzmhTxK+H/bNXJNTVsKpipv0PmtF85LHyG
+xEbCMeN0c+Sj4aWJOKYH5QLkjcONEtHYTTLqnPdCieeGqRehVvxnGr4fu9t
zCxxJ04vBEnkjRsJUa4qe8Swhfgi0/oSO4v3I5RJImmc1ouS+Qtps/Nkypel
1NYIOY+Qq17z5YbzEleamWJ9gbNYE8amO+qLoPHZab7emdCUXJG78KUL+AKa
mOxVDfNHEybheO0UTS6jJPXhwxvnzYpYu4YL4hDj6upTJKMiluqOs1h6jqdG
HTvO68nS5gXRZH62SM/slgmj6BmVkjBseXG2R0cToi1fBHbFny62WBWXHSe1
IyF7blHKJVhXGs5ZdbikEzyt7Hxk16J2jXqwCqKmafBPixsZh0NduOLzwObI
zRatEyBrwGaMrgMgzmBxK2LmCZWbDId2O4C2op1L5Hz3/kOkENGBCYj8L865
yImKGuqlTegcMlWpz+Wzc8r0+44FZWwKt1HnokZNZBAWDlUscJkuPxaKa30+
OtGoy9GJiGf6MLh1rTDccwPpb+HDkoEddN+a4BvNpp2vEZjuufG2zPPnZrBF
Z4XOXm40zTVa27d+jhNDc0jfgXlo3DgCTtzuDbVrzfJtAMHbFnsY7sQ93vMb
JUGD542WD/lCTE+19G+bTjDC0a+HvwkJ5pGaDYfLyjiH9HxBktw/7HwdJuya
r70Xdp9NrXj+sNi9fNJptfwaLe/V+R0t8gVqWqNRe5iVfaIVH2u0QIMBzXBY
1hB6Ua+9KYylNq5JrJHIYH7YMIqFMv3GNqZ4vjTKQ9N5ZxIz3DJfm6ctgI9Q
RDtXlWgVdUgzyaV4bn6w9WssK0qSiHcndLg6z4g5dLjfVjiBRo8S9peRPL9e
omc+NeO1xwZ9ohw24jsd3pH9w1/zbL/phQg3HSFV2BpZb7zKcXzUzODbuMHS
aeNJG01y+6mOHtzGYY6DZZj8RdoGMvjcvwOYw9bz1q76DYr3qwHPrbEz4mz3
GuTrFoV82+z0LklaT5Yo6rknpDBTREjJ81Uzf6HH029xEJ668FlrzsZaV26m
8jvTmpson/jiF7Z/BbQteogGfPil1a3aixVgfgmo1vconjvuHdszvrjyxk5p
EELbsEGE7qPKwtVnJjrN74iM1xzmrrQLZK/D34awwuHxq5OX71+8f/kqjs6s
VJ0k0PAK6cy5XpGBfiDxkzDO7a2LbbZE+foYRNNIV5dYU/ldJ4FFHajE0lQV
kQY49Pm+4l7gq29VrVdigtLllRaoBXKhIxQzbdo3uyygT9eoC3LDLEhVdR/4
m/3L6nlcbUThpUHes+7tvK1SQRpV7WF61ONz0SKRzeDjMa38D3HDVabjLCEy
53/3YMu7rHCPRe+mwaMlpQKXyu5EAhK3iRlidv+SxB/2ej000O/bRUy84xSB
maoxVPA88tOGVJaigmEYsjySacbX/DTxQy92kKbJ1zrEnaR3ilw4gD1HPqXJ
JVoETVTury2QE0Socig8WupRRzZVVK8SUGO5/G4bTSvQG1Wn0JOC05hfqNFK
C+HwgKvlc+icAu7mS/PS+36Ul9Hm3b7qtSRz5eqWDMW0kGfTmRe1y+vh4MRW
k+V1tfoV826tODCy0VVCguFa8sRwX0+9183gH1lmyCNJhs2hKyZOhLCc8yt4
XVq165Ds6kMLsThp5UdEOofUMXDw+ps2WuAhJB00PG44F2IXRXkSEn05+Xtq
Dzv3uxpU7j0JWl9X77yNrn15JymjAL+ILRNCJrXApTgQD/RLz2a7mxv2E+FZ
b6O62FFc97STF3ny4dVWgDCqNegrQgCwcZHYT1lVB8h6Ub3g6MpW1fWFitkN
rjc/3a3JRhG3hdaCiu8mh6tWEjwN5O/vVHLNNL68Jnci4/ti06X7nj25VC/X
LZCpx/VTXaXgGC6srfnKgejaa/tas3PLripF6m9tTPxJzNql0JRofS1Y7CiW
eSGuETuRQaXYhnDm1WUlucRiog9CjDj4f7qNeByIlWuXSMWw+GaMfnegX9oV
3/G2x4WXXQzHl2gLQRy9zRbKlrnC93QCpchR5p1fRPTTxUyrz3rXl+esoYh5
NeP62q17kT4VLdXCMVo82VX7YQUgTnPNlsZo1LyJfK7xNS2SNTnXVtKi1UWO
TdZLrSLE2zLcFw6KJLn6KDNfg5hrYzdkLpGH+aUKW1dvhcaJ2neXeCfXrOGR
A+slJsHFk1E+m4ODExGt8SI1Qkutf2/LIoEb1PoqdBxQZM9Lozx4I+rYKNRt
P0mp9LjyV5ME4vLgLYcexwgCPPFrYYzUgHMOH1TV5uM7tb6AAXM4R38hkWEx
B4/lUFDkJ28krHFvrshGHCvCWCuwGnNoVYU2NyaLcBlC1ZzVrxf5sP9yV4he
vKhytdULXmpJ7MZ22RPL9Qv5CiO/G0Educ0CBHordsReVw+TYJRYEw3jcgEg
SBFDWY47fGX2xsigmaFCp5Z01TQLPlhxtVmJNqBSgpkvIk919DKnrvnVgl/c
1PVvZer61y91o/csMYTxO5VOP/+EASqMdXqDF7D1Pi1Ob67THI9Ob/R1Yac3
V2n+Ew+xzZ/Pxtz/9DZ6zZdknH/+HN6uxfbDWxShhm//o74AEHgleDs6WzTC
lqSe8rvzcJ+ZcaEoEAXFv8bEnT1p8/lz6x1garl8RevEKZ4VZ/j19Nd0jhMZ
f9fMUcMZOuZFcWlPf7P8Dg6MThtYW04uW/Eqr3E6Kvofy/RiUlzlSTkdkwB/
Rry1RJKJc4v2WsNWrjovs2HiU3KjlE7Mihlqfctgn9bUhbrMIGvsyEytnYw0
kAcc4U1nP89sPe0VJV8Z6iN9n1ASHuItbdgANqH47tNidAEHbG4OcJ3dvVDD
/JDVPxIQASt4GyMre7EbXUYgjWjM91JlH1a9d404beuFIF9DSSxw70mjQ1GJ
Fdp7KCR06EwH5LSlUn9a4PUOWhASgse9UuFraNZyP1ev8NPWIHbkWNn6qizN
okSkxcKwbpUf0dd+iEEpFoy+nDG6oi4nluMc6fhcwXrJ95lYQWebecIWXSvc
4SQvZl79EhENKK2JJ/G7vNz7M94eHzVzrb82Bzlpc64QP6tlTtRrpQu1k+UK
8mwWlF7H3Zo72zhlZm1ovHZFC0IUXbBYNyWhN/eOToJ28IlfqckJZVznVW6p
/YQEFlb61YyBXXWlMs9qDC5yebTv6jOdVGH9Hmvt15LQqZyFF5b691SNuIIC
GMt9XzHizIxGdWte8bkfoYui2QlXzI5gRwVKjrMCAZ6QAQFaSF59nbk3bvGQ
saHoZRgqpiSheghy4JLFfOlGoZ8u43SeScN2ZVXW6cwoEYnDpxG+xiiFlokP
NwdCYTsPQ1fqFmodGb80X/Pbgx6gXgVpl5MUVTZO+e2qYRWh1F/mU54qVaN8
6ZGcc7Ti8rlOHY2L4TTD5pr7qB4l9VO5qj6ixGkVOHkraiOaGtfHiPq4IHVu
r6RwugS/uFJ50CpJvOasq7Njqe9ix5XcCfHFz/X2AkiKs5WmEaWtKP/lsRnX
pTt83DOvNXocV9Os/BtwWijifADdSFdJqdYkb5TLZCNZXp1UVa1cp/iA+spa
7rUEIoNtMr4ez4T23I0Kkh5kFIyuTZTawOsisSNtEuSg+OB4cN2tS+Vhv0KP
LQDUxiEugxl8JU5OuRMyZiLvRtjffqyvOilc3q/IRrF/gzXNfhnRwXmFqM/H
Oy5MEG/0qtbsl9sop9nErDR+5xP03XfWVU0SWORNGjMSiiW6sNnIFq3LxmBp
fqf4djk2amUFLEIGcGnH6Ii62urj68a75FZl4ERFWvT1TVICg0EWRtzOCnSJ
UsuvlEjbbzlppGUs1Y66rHpNU8gls5ScJzlK2uVjCGWwmJEfHN6o1qzyDQxz
zqIvItK45kAjFkhwikfXSuiVL+Qj96jEc831PxNSc5EIxKpSorYzwxCnlHBG
mbqqogLmC1fMopm1zpal3rdgp3GcP+uueXLWY+P9FRW8klLhHQk7aWQduhrF
EWPEmFJkSZzykb6kBb58RRN+r4j1meNcaKgIHg5XibgbFRmOK2HxrUXvceBa
bx2pE7Dlr5VE1ZFZqJaLPJPivdcGdYxcxbdRSeR6bjWvzbR/9ofLD/vGnMZP
97f570fNlqhiebrcWKtbnvI/8Tf7j/XfJ/LPjv+u3+vd+Inx702vpz33v+n1
9p89A5yDAX3cHgwInAE7+x/h/ekuYnT89vCNvy19nDXKJbiaRhIq8vXWxTmh
lO+L5GjkiMeDps/37MJFUZdW1Hifkjux+vIlhprh65k9zsLRDH5n/5YNAnsb
ExgnHXl5nzZz8RxVf/cc7xHTErmVG1IOPBch8qUfmWW7YFMrR2B/+Pz7/W36
8/j59x1FNJdORn6j8A0tN7OUFMhdH9GfJ+jqt2ZLOzvGEJWjwcu/snJiVo6y
A0D8poayR80yZnpUI/cIMjxeHwGv4iiM3/LQqg4sXpIxshPdTkTS3KtkHPcS
xqWvstCSiJyD38odcxZN81KYS6guJu56l6yz1UzOY0SMrv5dBR3QuaK5sGo2
qUIUwL8OhATgZZhUcynHJFSZqUev59T3smrZdPWmB03VTSzl5NVQ0GOn99yR
kx3uY0vSXEUYq6UwWuq3RqCVKvY9z5LZq8aVmxbBERe9pUyzehUiPVvxS6ho
f63ECPcfd/flMv3+jr6/quYCJSikGUpionnjZRdcFzm38qY/VShQh09qLoad
Q0dPRf4luAUhhGOx7deseUQV7EIk0JrvYsMh83wLeN1ZellbRPc4v6giFrPv
tsTzb0shTGA+GTRFXNO/AtY5qr1AmZOOMOYlxeW6/eaG2YTGu/LuIwkSBZna
zisO6Fh64a3WZCAhfgxLshItYo/sgusq41MVq1Io/Yei2fr1rVf95PVfWSXn
f0lr6kd8M1g2fEAkUhLUDc0m5W1SVu/uezQrOIoZ1cNNE4Fm1/wA8DJY0uAW
rr+UMtSxInfs7ubGkHZSK+HGRTn3bfYTduNtMcpkK16cE3ujubblItDv8fYp
w+8jO0dE7gy5hOxcLthWHtH31PoR3ouG96+l17bcNY8J8yiBiGOPN8GchwIT
mxtk++ydnZX2TAtqSpen2gUUIKrKRKMMV4W0qbRSLw/KyQihtJ3HHJtm3FrK
7K4EXDQlB65zgZKehWRePKIVPWlCqa/QeCofumZHwUUXSebboQ4yg7Z9tEMH
jFt1zfDpUvt19Zj+9qf/9bc//c+l///45RbrR/yD+/C/V3WM//8332XNaP2/
/elPqzr++fReLQ6ifbOT1XP0+c8N9K5T/0Qf8J99Irz9whXX/gJWZDRU5HLj
9aMH5vRe2IxQ+AeF8Ma4EfuNB422rUFivPzF40X1U9Y3T0VNbTxw/f7SwucS
9nRm0XZFfT01/dPWgxW7G+Hgr8s0d+M34bTxYF2v9tgBHY06AVhoo4bAWsSZ
u2nOlTPqOxJUzX1drzWUfbp+rf11R+v0TrJbT1zrR0Sfu49rOKLrB7mD1u76
9u4ycgLYqUOQ/P4SHPZIEreF/91nEB6lr7/fq4NxZHzvDu6dBvfu0Ne1faGD
29O/tre7tdt/vZsrxzOv2ul/ux8sy6yBT0V/1Rbfa38bmDYi1t9AKP6/gvX+
vbB+un6Efnx+/rIW7dGhWz+Yx7TItn4MHx79K4m5Fe6QuDNj0onGftiIdZO6
V31ww1PGfz/av3X90O2hsmktXvLQ/8a/ru7Yj1dp/CpNvMqVPUNH3/Zh47e1
XaOerrFSWbTKlX2btPTHfvz4r2vJ7q9BPWtR4zIdCgS64cbvdqDJdV+vGCk+
+392uk3rcYMq725qYo13BVoD64428DSIgvZXa9mG3/oGXfRXf3VH//5p9Gu/
oXz11zOVJif5oxP2rceNPb676fo9ThL86jSbpT1e+nrtHjtGsvrxCobv1fHW
47t5sijZp07fvoNvSWtRok/dx7vbOx25L5sr2u1dfBr85UYURXCaG1Ea7+LL
ftx+UOZO13ZpHVX3pHHO2+d5Zbe94/2jtXP8YeXfq79YO0jrnK548uVGaxEX
mGL41H74f6Pz0ula8eTLjf6JeHx6esQlOP5RiO/1ev9hxCctvrfyixWDiI7R
5nsrOOEyx/sis3OagboCbryZJ2zMrGR6ff+X9nOWvjwR3rTMmaJu3PyhcLDQ
0QT+2dypvom7elDpw2nryXLndl8PcLO3Y42Nzst90UZN4qi38yScauf78Ej3
c9+2X273wnPdtWfdj7X++9XfuXHvcfz9OPdr++V2bkOWuIO6F1d+t/SbfFo7
lrCLf8dY92DavqTjvRj8vdr9f7XPd+zB3Xvzjxzrvnv397T9z7LP8v+fWcit
1K//jrZfbhcSAj68P3zv8gH+WzrLJhJbcCEblwvgA0x5UVvJ5h1yIs2u+aU1
ZZpPigu8I9XOLAr/nnG8i+9n8oWbxnvIuiH9s3F10VUY4+DkcICoyPbTp4OB
FJGp8FotZM7y5aRxVl938U52Kd9BQ5eWr8pZM55liGYiqhHDsSVx/xZoZQR8
lDDsX8jj4lIMMcFULvTiLMdduSSdvGnA3bFLL22Znrm6yBinWJS0/nR+zpjg
8uwCSvveZsXRVU5V2BlwtAvhNkZwlCiDUDJfnAy5GISo4c4gvsXmU2amWp9a
ixlVZvh00MRBV3PL3QIEKlzKINS32kpU7dinIO3iBYhFOZGbIZyeqhmOEj3V
l5XhQZYnrjilryHOKXGuMA3vJjIZ6kZlP3zW+CXowaVzdOrz8B5Nn8Uk00pz
rbanaVWcH+qKxtaNojHZBe3Xrk/FX1S2TPhZ1ZO0fDzh3PS85gz9Z9vf7Hzz
dHvQHz559OjR9rPtnWRip/bRU/s4GY52HiWPR8Od5OmT7WkytWlqHz/9ZvJo
8E1vLiG2FwX2gi+W7Bo9SAy3vEOE6zjxfiq+4jxYwQ8yXjjX/QltEKCrulrw
4S5M8/C8YFwd5YE4vfFJPEMVBh9uD9zw8sb1JtomFvkyrbwQDMAvolxENd81
2I5gYyKXl0dlkU44T4gve01XpJ1KuNe9a8wd/rFnRN2QMkFEwcU5mgndskLc
Vg2l6Thozy8dtHrXUhIqZ8j/sulHHvOO4TDpogo1JRkEudqhiRJmaq+46qJL
hCKWYtMLPTnxqxRcaL/9mumRrWuXaefuSrqkZp+PzdUTl+lDAszurt6IfrnK
Jnodd3Pj/wD0B7pC16MAAA==

-->

</rfc>

